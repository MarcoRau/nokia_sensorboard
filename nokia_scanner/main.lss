
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  000035f8  0000368c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800190  00800190  0000371c  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007f5  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002662  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d69  00000000  00000000  000066d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002194  00000000  00000000  0000743c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000560  00000000  00000000  000095d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000911  00000000  00000000  00009b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002319  00000000  00000000  0000a441  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000c75a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	e8 ef       	ldi	r30, 0xF8	; 248
     bcc:	f5 e3       	ldi	r31, 0x35	; 53
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	a0 39       	cpi	r26, 0x90	; 144
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	13 e0       	ldi	r17, 0x03	; 3
     bdc:	a0 e9       	ldi	r26, 0x90	; 144
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	af 39       	cpi	r26, 0x9F	; 159
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 3a 06 	call	0xc74	; 0xc74 <main>
     bee:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <__vector_11>:
}

uint8_t ms, ms10,ms100,sec,min,entprell, state;

ISR (TIMER1_COMPA_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
	ms10++;
     c04:	90 91 93 01 	lds	r25, 0x0193
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 93 01 	sts	0x0193, r25
	
	if(entprell != 0){
     c0e:	80 91 94 01 	lds	r24, 0x0194
     c12:	88 23       	and	r24, r24
     c14:	19 f0       	breq	.+6      	; 0xc1c <__vector_11+0x26>
		entprell--;
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 94 01 	sts	0x0194, r24
	}
	
	//10ms
	if(ms10 == 10){
     c1c:	9a 30       	cpi	r25, 0x0A	; 10
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__vector_11+0x38>
		ms10 = 0;
     c20:	10 92 93 01 	sts	0x0193, r1
		ms100++;
     c24:	80 91 96 01 	lds	r24, 0x0196
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 96 01 	sts	0x0196, r24
	}
	
	//100ms
    if(ms100 == 10){
     c2e:	80 91 96 01 	lds	r24, 0x0196
     c32:	8a 30       	cpi	r24, 0x0A	; 10
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_11+0x4e>
		ms100 = 0;
     c36:	10 92 96 01 	sts	0x0196, r1
		sec++;
     c3a:	80 91 97 01 	lds	r24, 0x0197
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	80 93 97 01 	sts	0x0197, r24
	}
	
	//Minute
	if(sec == 10){
     c44:	90 91 97 01 	lds	r25, 0x0197
     c48:	9a 30       	cpi	r25, 0x0A	; 10
     c4a:	69 f4       	brne	.+26     	; 0xc66 <__vector_11+0x70>
		sec = 0;
     c4c:	10 92 97 01 	sts	0x0197, r1
		min++;
     c50:	80 91 95 01 	lds	r24, 0x0195
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 95 01 	sts	0x0195, r24
		if(state == 11){
     c5a:	80 91 92 01 	lds	r24, 0x0192
     c5e:	8b 30       	cpi	r24, 0x0B	; 11
     c60:	11 f4       	brne	.+4      	; 0xc66 <__vector_11+0x70>
			state = 10;
     c62:	90 93 92 01 	sts	0x0192, r25
		}
	}
}
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <main>:


	
int main(void)
{	
     c74:	4f 92       	push	r4
     c76:	5f 92       	push	r5
     c78:	6f 92       	push	r6
     c7a:	7f 92       	push	r7
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	6e 97       	sbiw	r28, 0x1e	; 30
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
	uint16_t addr = 0;
	char string[30] = " ";
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	ab 83       	std	Y+3, r26	; 0x03
     cb0:	bc 83       	std	Y+4, r27	; 0x04
     cb2:	fe 01       	movw	r30, r28
     cb4:	35 96       	adiw	r30, 0x05	; 5
     cb6:	8a e1       	ldi	r24, 0x1A	; 26
     cb8:	df 01       	movw	r26, r30
     cba:	1d 92       	st	X+, r1
     cbc:	8a 95       	dec	r24
     cbe:	e9 f7       	brne	.-6      	; 0xcba <main+0x46>
	uint16_t addr2 = 0;
	
	enum { nichts, scann, reset } zustand = nichts;
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
     cc0:	22 9a       	sbi	0x04, 2	; 4
	//PORTB |= (1<<PB2);
	PORTB &= ~(1<<PB2);
     cc2:	2a 98       	cbi	0x05, 2	; 5
	
	DDRC &= ~(1<<PC0); //Eingang Hallsensor
     cc4:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PC0);	//Pullup Hallsensor einschalten
     cc6:	40 9a       	sbi	0x08, 0	; 8
	
	DDRC |=(1<<PC1); 	//Eingang Hallsensor
     cc8:	39 9a       	sbi	0x07, 1	; 7
	PORTC |= (1<<PC1);	//Pullup Hallsensor einschalten
     cca:	41 9a       	sbi	0x08, 1	; 8
	
	
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     ccc:	8a b1       	in	r24, 0x0a	; 10
     cce:	8b 79       	andi	r24, 0x9B	; 155
     cd0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     cd2:	8b b1       	in	r24, 0x0b	; 11
     cd4:	84 66       	ori	r24, 0x64	; 100
     cd6:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<PD4); //T0 Counter Input
     cd8:	54 98       	cbi	0x0a, 4	; 10
	TCCR0B |= (1<<CS02) | (1<<CS01) | (1<<CS00);//Counter 0 enabled clock on rising edge
     cda:	85 b5       	in	r24, 0x25	; 37
     cdc:	87 60       	ori	r24, 0x07	; 7
     cde:	85 bd       	out	0x25, r24	; 37
	
	//Timer 1 Configuration
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
     ce0:	8c e9       	ldi	r24, 0x9C	; 156
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	90 93 89 00 	sts	0x0089, r25
     ce8:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     cec:	80 91 81 00 	lds	r24, 0x0081
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     cf6:	80 91 6f 00 	lds	r24, 0x006F
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
     d00:	80 91 81 00 	lds	r24, 0x0081
     d04:	85 60       	ori	r24, 0x05	; 5
     d06:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 1024 and start the timer

    sei();
     d0a:	78 94       	sei
static void setup(void);

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     d0c:	0e 94 f5 07 	call	0xfea	; 0xfea <glcd_init>
    sei();
    // enable interrupts
	
	setup();
	
	glcd_clear();
     d10:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
	glcd_write();
     d14:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
     d18:	88 e6       	ldi	r24, 0x68	; 104
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	65 e0       	ldi	r22, 0x05	; 5
     d1e:	47 e0       	ldi	r20, 0x07	; 7
     d20:	20 e2       	ldi	r18, 0x20	; 32
     d22:	0f e7       	ldi	r16, 0x7F	; 127
     d24:	0e 94 b0 13 	call	0x2760	; 0x2760 <glcd_tiny_set_font>
	glcd_clear_buffer();
     d28:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
	
	min = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 93 95 01 	sts	0x0195, r24
	
	TWIInit();
     d32:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <TWIInit>
     d36:	80 e0       	ldi	r24, 0x00	; 0
			case scann:
				
				glcd_clear();
				glcd_clear_buffer();
				
				sprintf(string,"addr.:");
     d38:	5e 01       	movw	r10, r28
     d3a:	08 94       	sec
     d3c:	a1 1c       	adc	r10, r1
     d3e:	b1 1c       	adc	r11, r1
					
					TWIStart();
					TWIWrite ( addr );
					
					if ( TWIGetStatus() == 0x18 ){
						sprintf(string,"0x%x", addr);		// Vorhandene Adresse ausschreiben
     d40:	27 e0       	ldi	r18, 0x07	; 7
     d42:	42 2e       	mov	r4, r18
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	52 2e       	mov	r5, r18
						glcd_draw_string_xy(40,y,string);
						glcd_write();
						y += 8;
					}
					
					sprintf(string,"act addr.:0x%x", addr);	// Aktuelle Adresse ausschreiben
     d48:	9c e0       	ldi	r25, 0x0C	; 12
     d4a:	69 2e       	mov	r6, r25
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	79 2e       	mov	r7, r25
	
	TWIInit();
	
	while ( 1 ){
		
		if ( !(PIND & (1<<PD6)) ){
     d50:	4e 9b       	sbis	0x09, 6	; 9
     d52:	81 e0       	ldi	r24, 0x01	; 1
			zustand = scann;
		}
		if ( !(PIND & (1<<PD5)) ){
     d54:	4d 9b       	sbis	0x09, 5	; 9
     d56:	8f c0       	rjmp	.+286    	; 0xe76 <main+0x202>
			zustand = reset;
		}
		
		switch ( zustand ){
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	19 f0       	breq	.+6      	; 0xd62 <main+0xee>
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	c1 f7       	brne	.-16     	; 0xd50 <main+0xdc>
     d60:	8a c0       	rjmp	.+276    	; 0xe76 <main+0x202>
			case nichts:
				
			break;
			case scann:
				
				glcd_clear();
     d62:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
				glcd_clear_buffer();
     d66:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
				
				sprintf(string,"addr.:");
     d6a:	c5 01       	movw	r24, r10
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <strcpy>
				glcd_draw_string_xy(0,0,string);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	a5 01       	movw	r20, r10
     d7a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
				glcd_write();
     d7e:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
     d82:	99 24       	eor	r9, r9
     d84:	ee 24       	eor	r14, r14
     d86:	ff 24       	eor	r15, r15
     d88:	cc 24       	eor	r12, r12
     d8a:	dd 24       	eor	r13, r13
				addr1	= 0;
				addr2	= 0;
				
				do{
				
					addr1++;								// low nibble plus eins
     d8c:	08 94       	sec
     d8e:	e1 1c       	adc	r14, r1
     d90:	f1 1c       	adc	r15, r1
					
					if( addr1 == 0x0F ){
     d92:	bf e0       	ldi	r27, 0x0F	; 15
     d94:	eb 16       	cp	r14, r27
     d96:	f1 04       	cpc	r15, r1
     d98:	29 f4       	brne	.+10     	; 0xda4 <main+0x130>
						addr2++;							// high nibble plus eins
     d9a:	08 94       	sec
     d9c:	c1 1c       	adc	r12, r1
     d9e:	d1 1c       	adc	r13, r1
     da0:	ee 24       	eor	r14, r14
     da2:	ff 24       	eor	r15, r15
						addr1 = 0;
					}
					
					addr = ( addr1 + ( addr2 << 4 ));		// Adresse zusammensetzen
     da4:	86 01       	movw	r16, r12
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	00 0f       	add	r16, r16
     daa:	11 1f       	adc	r17, r17
     dac:	8a 95       	dec	r24
     dae:	e1 f7       	brne	.-8      	; 0xda8 <main+0x134>
     db0:	0e 0d       	add	r16, r14
     db2:	1f 1d       	adc	r17, r15
					
					TWIStart();
     db4:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWIStart>
					TWIWrite ( addr );
     db8:	80 2f       	mov	r24, r16
     dba:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
					
					if ( TWIGetStatus() == 0x18 ){
     dbe:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWIGetStatus>
     dc2:	88 31       	cpi	r24, 0x18	; 24
     dc4:	19 f5       	brne	.+70     	; 0xe0c <main+0x198>
						sprintf(string,"0x%x", addr);		// Vorhandene Adresse ausschreiben
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <main+0x154>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <main+0x156>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <main+0x158>
     dcc:	ed b7       	in	r30, 0x3d	; 61
     dce:	fe b7       	in	r31, 0x3e	; 62
     dd0:	31 96       	adiw	r30, 0x01	; 1
     dd2:	ad b7       	in	r26, 0x3d	; 61
     dd4:	be b7       	in	r27, 0x3e	; 62
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	bc 92       	st	X, r11
     dda:	ae 92       	st	-X, r10
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	53 82       	std	Z+3, r5	; 0x03
     de0:	42 82       	std	Z+2, r4	; 0x02
     de2:	15 83       	std	Z+5, r17	; 0x05
     de4:	04 83       	std	Z+4, r16	; 0x04
     de6:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sprintf>
						glcd_draw_string_xy(40,y,string);
     dea:	8d b7       	in	r24, 0x3d	; 61
     dec:	9e b7       	in	r25, 0x3e	; 62
     dee:	06 96       	adiw	r24, 0x06	; 6
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	9e bf       	out	0x3e, r25	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	8d bf       	out	0x3d, r24	; 61
     dfa:	88 e2       	ldi	r24, 0x28	; 40
     dfc:	69 2d       	mov	r22, r9
     dfe:	a5 01       	movw	r20, r10
     e00:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
						glcd_write();
     e04:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
						y += 8;
     e08:	98 e0       	ldi	r25, 0x08	; 8
     e0a:	99 0e       	add	r9, r25
					}
					
					sprintf(string,"act addr.:0x%x", addr);	// Aktuelle Adresse ausschreiben
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <main+0x19a>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <main+0x19c>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <main+0x19e>
     e12:	ed b7       	in	r30, 0x3d	; 61
     e14:	fe b7       	in	r31, 0x3e	; 62
     e16:	31 96       	adiw	r30, 0x01	; 1
     e18:	ad b7       	in	r26, 0x3d	; 61
     e1a:	be b7       	in	r27, 0x3e	; 62
     e1c:	12 96       	adiw	r26, 0x02	; 2
     e1e:	bc 92       	st	X, r11
     e20:	ae 92       	st	-X, r10
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	73 82       	std	Z+3, r7	; 0x03
     e26:	62 82       	std	Z+2, r6	; 0x02
     e28:	15 83       	std	Z+5, r17	; 0x05
     e2a:	04 83       	std	Z+4, r16	; 0x04
     e2c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sprintf>
					glcd_draw_string_xy(0,40,string);
     e30:	8d b7       	in	r24, 0x3d	; 61
     e32:	9e b7       	in	r25, 0x3e	; 62
     e34:	06 96       	adiw	r24, 0x06	; 6
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	9e bf       	out	0x3e, r25	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	8d bf       	out	0x3d, r24	; 61
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	68 e2       	ldi	r22, 0x28	; 40
     e44:	a5 01       	movw	r20, r10
     e46:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
					glcd_write();
     e4a:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
					
					TWIStop();
     e4e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <TWIStop>
					
				}while( addr < 0xFF );
     e52:	0f 3f       	cpi	r16, 0xFF	; 255
     e54:	11 05       	cpc	r17, r1
     e56:	08 f4       	brcc	.+2      	; 0xe5a <main+0x1e6>
     e58:	99 cf       	rjmp	.-206    	; 0xd8c <main+0x118>
				
				sprintf(string,"FINISH        ");
     e5a:	c5 01       	movw	r24, r10
     e5c:	6b e1       	ldi	r22, 0x1B	; 27
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <strcpy>
				glcd_draw_string_xy(0,40,string);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	68 e2       	ldi	r22, 0x28	; 40
     e68:	a5 01       	movw	r20, r10
     e6a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
				glcd_write();
     e6e:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	6d cf       	rjmp	.-294    	; 0xd50 <main+0xdc>
				zustand = nichts;
				
			break;
			case reset:
				
				glcd_clear();
     e76:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	69 cf       	rjmp	.-302    	; 0xd50 <main+0xdc>

00000e7e <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
     e7e:	98 2f       	mov	r25, r24
     e80:	84 35       	cpi	r24, 0x54	; 84
     e82:	08 f0       	brcs	.+2      	; 0xe86 <glcd_update_bbox+0x8>
     e84:	93 e5       	ldi	r25, 0x53	; 83
     e86:	44 35       	cpi	r20, 0x54	; 84
     e88:	08 f0       	brcs	.+2      	; 0xe8c <glcd_update_bbox+0xe>
     e8a:	43 e5       	ldi	r20, 0x53	; 83
     e8c:	60 33       	cpi	r22, 0x30	; 48
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <glcd_update_bbox+0x14>
     e90:	6f e2       	ldi	r22, 0x2F	; 47
     e92:	20 33       	cpi	r18, 0x30	; 48
     e94:	08 f0       	brcs	.+2      	; 0xe98 <glcd_update_bbox+0x1a>
     e96:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     e98:	e0 91 96 03 	lds	r30, 0x0396
     e9c:	f0 91 97 03 	lds	r31, 0x0397
     ea0:	80 81       	ld	r24, Z
     ea2:	98 17       	cp	r25, r24
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
     ea6:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	84 17       	cp	r24, r20
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
     eae:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	68 17       	cp	r22, r24
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
     eb6:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     eb8:	83 81       	ldd	r24, Z+3	; 0x03
     eba:	82 17       	cp	r24, r18
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
     ebe:	23 83       	std	Z+3, r18	; 0x03
     ec0:	08 95       	ret

00000ec2 <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     ec2:	e0 91 96 03 	lds	r30, 0x0396
     ec6:	f0 91 97 03 	lds	r31, 0x0397
     eca:	83 e5       	ldi	r24, 0x53	; 83
     ecc:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     ece:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     ed0:	8f e2       	ldi	r24, 0x2F	; 47
     ed2:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     ed4:	13 82       	std	Z+3, r1	; 0x03
}
     ed6:	08 95       	ret

00000ed8 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     ed8:	e0 91 96 03 	lds	r30, 0x0396
     edc:	f0 91 97 03 	lds	r31, 0x0397
     ee0:	83 e5       	ldi	r24, 0x53	; 83
     ee2:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     ee4:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     ee6:	8f e2       	ldi	r24, 0x2F	; 47
     ee8:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     eea:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
     eec:	08 95       	ret

00000eee <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
     eee:	e0 91 96 03 	lds	r30, 0x0396
     ef2:	f0 91 97 03 	lds	r31, 0x0397
     ef6:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
     ef8:	83 e5       	ldi	r24, 0x53	; 83
     efa:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
     efc:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
     efe:	8f e2       	ldi	r24, 0x2F	; 47
     f00:	83 83       	std	Z+3, r24	; 0x03
}
     f02:	08 95       	ret

00000f04 <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
     f04:	90 93 95 03 	sts	0x0395, r25
     f08:	80 93 94 03 	sts	0x0394, r24
	glcd_bbox_selected = bbox;
     f0c:	70 93 97 03 	sts	0x0397, r23
     f10:	60 93 96 03 	sts	0x0396, r22
}
     f14:	08 95       	ret

00000f16 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
     f16:	08 95       	ret

00000f18 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     f20:	64 e5       	ldi	r22, 0x54	; 84
     f22:	80 91 94 03 	lds	r24, 0x0394
     f26:	90 91 95 03 	lds	r25, 0x0395
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
     f2a:	45 30       	cpi	r20, 0x05	; 5
     f2c:	51 05       	cpc	r21, r1
     f2e:	81 f0       	breq	.+32     	; 0xf50 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
     f30:	dc 01       	movw	r26, r24
     f32:	a2 0f       	add	r26, r18
     f34:	b3 1f       	adc	r27, r19
     f36:	2c 5a       	subi	r18, 0xAC	; 172
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	fc 01       	movw	r30, r24
     f3c:	e2 0f       	add	r30, r18
     f3e:	f3 1f       	adc	r31, r19
     f40:	24 55       	subi	r18, 0x54	; 84
     f42:	30 40       	sbci	r19, 0x00	; 0
     f44:	84 e5       	ldi	r24, 0x54	; 84
     f46:	01 90       	ld	r0, Z+
     f48:	0d 92       	st	X+, r0
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <glcd_scroll_line+0x2e>
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     f50:	8c 55       	subi	r24, 0x5C	; 92
     f52:	9e 4f       	sbci	r25, 0xFE	; 254
     f54:	dc 01       	movw	r26, r24
     f56:	86 2f       	mov	r24, r22
     f58:	1d 92       	st	X+, r1
     f5a:	8a 95       	dec	r24
     f5c:	e9 f7       	brne	.-6      	; 0xf58 <glcd_scroll_line+0x40>
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	2c 5a       	subi	r18, 0xAC	; 172
     f64:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
     f66:	46 30       	cpi	r20, 0x06	; 6
     f68:	51 05       	cpc	r21, r1
     f6a:	d9 f6       	brne	.-74     	; 0xf22 <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	43 e5       	ldi	r20, 0x53	; 83
     f72:	2f e2       	ldi	r18, 0x2F	; 47
     f74:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
}
     f78:	08 95       	ret

00000f7a <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     f7a:	e0 91 94 03 	lds	r30, 0x0394
     f7e:	f0 91 95 03 	lds	r31, 0x0395
     f82:	88 ef       	ldi	r24, 0xF8	; 248
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	df 01       	movw	r26, r30
     f88:	9c 01       	movw	r18, r24
     f8a:	1d 92       	st	X+, r1
     f8c:	21 50       	subi	r18, 0x01	; 1
     f8e:	30 40       	sbci	r19, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	43 e5       	ldi	r20, 0x53	; 83
     f98:	2f e2       	ldi	r18, 0x2F	; 47
     f9a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
}
     f9e:	08 95       	ret

00000fa0 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     fa0:	e0 91 94 03 	lds	r30, 0x0394
     fa4:	f0 91 95 03 	lds	r31, 0x0395
     fa8:	88 ef       	ldi	r24, 0xF8	; 248
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	df 01       	movw	r26, r30
     fae:	9c 01       	movw	r18, r24
     fb0:	1d 92       	st	X+, r1
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	30 40       	sbci	r19, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	43 e5       	ldi	r20, 0x53	; 83
     fbe:	2f e2       	ldi	r18, 0x2F	; 47
     fc0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	glcd_write();
     fc4:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
}
     fc8:	08 95       	ret

00000fca <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
     fca:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
     fcc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
     fce:	0d b4       	in	r0, 0x2d	; 45
     fd0:	07 fe       	sbrs	r0, 7
     fd2:	fd cf       	rjmp	.-6      	; 0xfce <glcd_spi_write+0x4>
	GLCD_DESELECT();	
     fd4:	28 9a       	sbi	0x05, 0	; 5
}
     fd6:	08 95       	ret

00000fd8 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
     fd8:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
     fda:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fdc:	80 ea       	ldi	r24, 0xA0	; 160
     fde:	9f e0       	ldi	r25, 0x0F	; 15
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
     fe4:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
     fe6:	28 9a       	sbi	0x05, 0	; 5
}
     fe8:	08 95       	ret

00000fea <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
     fea:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
     fec:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
     fee:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
     ff0:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
     ff2:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
     ff4:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
     ff6:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
     ff8:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
     ffa:	80 e5       	ldi	r24, 0x50	; 80
     ffc:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
     ffe:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    1000:	0e 94 13 08 	call	0x1026	; 0x1026 <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    1004:	8c e9       	ldi	r24, 0x9C	; 156
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	68 e9       	ldi	r22, 0x98	; 152
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	0e 94 82 07 	call	0xf04	; 0xf04 <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    1010:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
    1014:	08 95       	ret

00001016 <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    1016:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    1018:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_spi_write>
}
    101c:	08 95       	ret

0000101e <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    101e:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    1020:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_spi_write>
}
    1024:	08 95       	ret

00001026 <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
    1026:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    102a:	81 e2       	ldi	r24, 0x21	; 33
    102c:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    1030:	82 e1       	ldi	r24, 0x12	; 18
    1032:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    1036:	8c eb       	ldi	r24, 0xBC	; 188
    1038:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    1048:	08 95       	ret

0000104a <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 e0       	ldi	r16, 0x00	; 0
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1060:	e0 91 96 03 	lds	r30, 0x0396
    1064:	f0 91 97 03 	lds	r31, 0x0397
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	e8 2e       	mov	r14, r24
    106c:	f1 2c       	mov	r15, r1
    106e:	e2 0e       	add	r14, r18
    1070:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1072:	81 81       	ldd	r24, Z+1	; 0x01
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	8e 15       	cp	r24, r14
    1078:	9f 05       	cpc	r25, r15
    107a:	54 f5       	brge	.+84     	; 0x10d0 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
    107c:	83 81       	ldd	r24, Z+3	; 0x03
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	82 17       	cp	r24, r18
    1082:	93 07       	cpc	r25, r19
    1084:	64 f1       	brlt	.+88     	; 0x10de <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    1086:	80 2f       	mov	r24, r16
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    108e:	e0 91 96 03 	lds	r30, 0x0396
    1092:	f0 91 97 03 	lds	r31, 0x0397
    1096:	80 81       	ld	r24, Z
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    109e:	e0 91 96 03 	lds	r30, 0x0396
    10a2:	f0 91 97 03 	lds	r31, 0x0397
    10a6:	10 81       	ld	r17, Z
    10a8:	0c c0       	rjmp	.+24     	; 0x10c2 <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    10aa:	e0 91 94 03 	lds	r30, 0x0394
    10ae:	f0 91 95 03 	lds	r31, 0x0395
    10b2:	ec 0f       	add	r30, r28
    10b4:	fd 1f       	adc	r31, r29
    10b6:	e1 0f       	add	r30, r17
    10b8:	f1 1d       	adc	r31, r1
    10ba:	80 81       	ld	r24, Z
    10bc:	0e 94 0b 08 	call	0x1016	; 0x1016 <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    10c0:	1f 5f       	subi	r17, 0xFF	; 255
    10c2:	e0 91 96 03 	lds	r30, 0x0396
    10c6:	f0 91 97 03 	lds	r31, 0x0397
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	81 17       	cp	r24, r17
    10ce:	68 f7       	brcc	.-38     	; 0x10aa <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    10d0:	0f 5f       	subi	r16, 0xFF	; 255
    10d2:	cc 5a       	subi	r28, 0xAC	; 172
    10d4:	df 4f       	sbci	r29, 0xFF	; 255
    10d6:	06 30       	cpi	r16, 0x06	; 6
    10d8:	11 f0       	breq	.+4      	; 0x10de <glcd_write+0x94>
    10da:	97 01       	movw	r18, r14
    10dc:	c1 cf       	rjmp	.-126    	; 0x1060 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    10de:	0e 94 61 07 	call	0xec2	; 0xec2 <glcd_reset_bbox>

}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	08 95       	ret

000010f0 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    10f6:	08 95       	ret

000010f8 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    10f8:	86 30       	cpi	r24, 0x06	; 6
    10fa:	10 f0       	brcs	.+4      	; 0x1100 <glcd_set_y_address+0x8>
    10fc:	85 e4       	ldi	r24, 0x45	; 69
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <glcd_set_y_address+0xa>
    1100:	80 64       	ori	r24, 0x40	; 64
    1102:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    1106:	08 95       	ret

00001108 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    110e:	08 95       	ret

00001110 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    1110:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    1114:	84 e2       	ldi	r24, 0x24	; 36
    1116:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    111a:	08 95       	ret

0000111c <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    111c:	1f 93       	push	r17
    111e:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1120:	81 e2       	ldi	r24, 0x21	; 33
    1122:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    1126:	81 2f       	mov	r24, r17
    1128:	80 68       	ori	r24, 0x80	; 128
    112a:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    112e:	80 e2       	ldi	r24, 0x20	; 32
    1130:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1134:	8c e0       	ldi	r24, 0x0C	; 12
    1136:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_command>
}
    113a:	1f 91       	pop	r17
    113c:	08 95       	ret

0000113e <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    113e:	28 2f       	mov	r18, r24
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	68 1b       	sub	r22, r24
    1146:	71 09       	sbc	r23, r1
    1148:	46 9f       	mul	r20, r22
    114a:	c0 01       	movw	r24, r0
    114c:	47 9f       	mul	r20, r23
    114e:	90 0d       	add	r25, r0
    1150:	56 9f       	mul	r21, r22
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	6f ef       	ldi	r22, 0xFF	; 255
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    115e:	82 2f       	mov	r24, r18
    1160:	86 0f       	add	r24, r22
    1162:	08 95       	ret

00001164 <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1164:	2f 92       	push	r2
    1166:	3f 92       	push	r3
    1168:	5f 92       	push	r5
    116a:	6f 92       	push	r6
    116c:	7f 92       	push	r7
    116e:	8f 92       	push	r8
    1170:	9f 92       	push	r9
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	88 2e       	mov	r8, r24
    118e:	b6 2e       	mov	r11, r22
    1190:	94 2e       	mov	r9, r20
    1192:	c2 2e       	mov	r12, r18
    1194:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    1196:	01 e0       	ldi	r16, 0x01	; 1
    1198:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <glcd_draw_rect>
    119c:	dd 24       	eor	r13, r13
    119e:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    11a0:	0c 2d       	mov	r16, r12
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	38 01       	movw	r6, r16
    11a6:	08 94       	sec
    11a8:	61 08       	sbc	r6, r1
    11aa:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    11ac:	29 2c       	mov	r2, r9
    11ae:	33 24       	eor	r3, r3
    11b0:	08 94       	sec
    11b2:	21 08       	sbc	r2, r1
    11b4:	31 08       	sbc	r3, r1
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    11b8:	8f 2d       	mov	r24, r15
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	6a 2d       	mov	r22, r10
    11be:	0e 94 90 0c 	call	0x1920	; 0x1920 <glcd_get_pixel>
    11c2:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    11c4:	8f 2d       	mov	r24, r15
    11c6:	6a 2d       	mov	r22, r10
    11c8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    11cc:	e3 94       	inc	r14
    11ce:	f3 94       	inc	r15
    11d0:	8e 2d       	mov	r24, r14
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	82 15       	cp	r24, r2
    11d6:	93 05       	cpc	r25, r3
    11d8:	7c f3       	brlt	.-34     	; 0x11b8 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    11da:	d3 94       	inc	r13
    11dc:	8d 2d       	mov	r24, r13
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	86 15       	cp	r24, r6
    11e2:	97 05       	cpc	r25, r7
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <glcd_scrolling_bar_graph+0x8e>
    11e6:	f8 2c       	mov	r15, r8
    11e8:	ee 24       	eor	r14, r14
    11ea:	e3 94       	inc	r14
    11ec:	ad 2c       	mov	r10, r13
    11ee:	ab 0c       	add	r10, r11
    11f0:	ee cf       	rjmp	.-36     	; 0x11ce <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    11f2:	03 50       	subi	r16, 0x03	; 3
    11f4:	10 40       	sbci	r17, 0x00	; 0
    11f6:	85 2d       	mov	r24, r5
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 01       	movw	r18, r24
    11fc:	02 9f       	mul	r16, r18
    11fe:	c0 01       	movw	r24, r0
    1200:	03 9f       	mul	r16, r19
    1202:	90 0d       	add	r25, r0
    1204:	12 9f       	mul	r17, r18
    1206:	90 0d       	add	r25, r0
    1208:	11 24       	eor	r1, r1
    120a:	6f ef       	ldi	r22, 0xFF	; 255
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    1212:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	86 2f       	mov	r24, r22
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	80 17       	cp	r24, r16
    121e:	91 07       	cpc	r25, r17
    1220:	14 f0       	brlt	.+4      	; 0x1226 <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    1222:	2c 2d       	mov	r18, r12
    1224:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1226:	6c 2d       	mov	r22, r12
    1228:	6b 0d       	add	r22, r11
    122a:	98 2d       	mov	r25, r8
    122c:	92 50       	subi	r25, 0x02	; 2
    122e:	99 0d       	add	r25, r9
    1230:	16 2f       	mov	r17, r22
    1232:	12 1b       	sub	r17, r18
    1234:	62 50       	subi	r22, 0x02	; 2
    1236:	12 50       	subi	r17, 0x02	; 2
    1238:	89 2f       	mov	r24, r25
    123a:	49 2f       	mov	r20, r25
    123c:	21 2f       	mov	r18, r17
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	0e 94 08 10 	call	0x2010	; 0x2010 <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    1246:	11 50       	subi	r17, 0x01	; 1
    1248:	b3 94       	inc	r11
    124a:	99 81       	ldd	r25, Y+1	; 0x01
    124c:	89 2f       	mov	r24, r25
    124e:	61 2f       	mov	r22, r17
    1250:	49 2f       	mov	r20, r25
    1252:	2b 2d       	mov	r18, r11
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	0e 94 08 10 	call	0x2010	; 0x2010 <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    125a:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
}
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	3f 90       	pop	r3
    1280:	2f 90       	pop	r2
    1282:	08 95       	ret

00001284 <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	78 2e       	mov	r7, r24
    129c:	86 2e       	mov	r8, r22
    129e:	94 2e       	mov	r9, r20
    12a0:	a2 2e       	mov	r10, r18
    12a2:	b0 2e       	mov	r11, r16
    12a4:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    12a6:	ee 20       	and	r14, r14
    12a8:	11 f4       	brne	.+4      	; 0x12ae <glcd_scrolling_bar_graph_timing+0x2a>
    12aa:	ff 24       	eor	r15, r15
    12ac:	f3 94       	inc	r15
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    12b2:	87 2d       	mov	r24, r7
    12b4:	68 2d       	mov	r22, r8
    12b6:	49 2d       	mov	r20, r9
    12b8:	2a 2d       	mov	r18, r10
    12ba:	0b 2d       	mov	r16, r11
    12bc:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    12c0:	1f 5f       	subi	r17, 0xFF	; 255
    12c2:	1f 15       	cp	r17, r15
    12c4:	b0 f3       	brcs	.-20     	; 0x12b2 <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    12c6:	c1 14       	cp	r12, r1
    12c8:	d1 04       	cpc	r13, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <glcd_scrolling_bar_graph_timing+0x4a>
    12cc:	41 c0       	rjmp	.+130    	; 0x1350 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    12ce:	b6 01       	movw	r22, r12
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__floatunsisf>
    12d8:	5b 01       	movw	r10, r22
    12da:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a e7       	ldi	r20, 0x7A	; 122
    12e2:	55 e4       	ldi	r21, 0x45	; 69
    12e4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__mulsf3>
    12e8:	7b 01       	movw	r14, r22
    12ea:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	1c f4       	brge	.+6      	; 0x1302 <glcd_scrolling_bar_graph_timing+0x7e>
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	24 c0       	rjmp	.+72     	; 0x134a <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1302:	c8 01       	movw	r24, r16
    1304:	b7 01       	movw	r22, r14
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__gesf2>
    1312:	18 16       	cp	r1, r24
    1314:	b4 f4       	brge	.+44     	; 0x1342 <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	c6 01       	movw	r24, r12
    1318:	b5 01       	movw	r22, r10
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__mulsf3>
    1326:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <__fixunssfsi>
    132a:	80 e9       	ldi	r24, 0x90	; 144
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	05 c0       	rjmp	.+10     	; 0x133a <glcd_scrolling_bar_graph_timing+0xb6>
    1330:	fc 01       	movw	r30, r24
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1336:	61 50       	subi	r22, 0x01	; 1
    1338:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	61 15       	cp	r22, r1
    133c:	71 05       	cpc	r23, r1
    133e:	c1 f7       	brne	.-16     	; 0x1330 <glcd_scrolling_bar_graph_timing+0xac>
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	c8 01       	movw	r24, r16
    1344:	b7 01       	movw	r22, r14
    1346:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <__fixunssfsi>
    134a:	cb 01       	movw	r24, r22
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	af 90       	pop	r10
    1360:	9f 90       	pop	r9
    1362:	8f 90       	pop	r8
    1364:	7f 90       	pop	r7
    1366:	08 95       	ret

00001368 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	e8 2e       	mov	r14, r24
    1374:	f6 2e       	mov	r15, r22
    1376:	d4 2e       	mov	r13, r20
    1378:	12 2f       	mov	r17, r18
    137a:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    137c:	62 2f       	mov	r22, r18
    137e:	62 50       	subi	r22, 0x02	; 2
    1380:	40 95       	com	r20
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 9f 08 	call	0x113e	; 0x113e <glcd_map>
    1388:	f8 0e       	add	r15, r24
    138a:	18 1b       	sub	r17, r24
    138c:	12 50       	subi	r17, 0x02	; 2
    138e:	8e 2d       	mov	r24, r14
    1390:	6f 2d       	mov	r22, r15
    1392:	4d 2d       	mov	r20, r13
    1394:	21 2f       	mov	r18, r17
    1396:	01 e0       	ldi	r16, 0x01	; 1
    1398:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <glcd_fill_rect>
}
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	08 95       	ret

000013a8 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	c8 2e       	mov	r12, r24
    13b6:	d6 2e       	mov	r13, r22
    13b8:	e4 2e       	mov	r14, r20
    13ba:	12 2f       	mov	r17, r18
    13bc:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    13be:	01 e0       	ldi	r16, 0x01	; 1
    13c0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    13c4:	61 2f       	mov	r22, r17
    13c6:	62 50       	subi	r22, 0x02	; 2
    13c8:	f0 94       	com	r15
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	4f 2d       	mov	r20, r15
    13ce:	0e 94 9f 08 	call	0x113e	; 0x113e <glcd_map>
    13d2:	68 2f       	mov	r22, r24
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	6d 0d       	add	r22, r13
    13d8:	9e ef       	ldi	r25, 0xFE	; 254
    13da:	e9 0e       	add	r14, r25
    13dc:	18 1b       	sub	r17, r24
    13de:	12 50       	subi	r17, 0x02	; 2
    13e0:	8c 2d       	mov	r24, r12
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	4e 2d       	mov	r20, r14
    13e6:	21 2f       	mov	r18, r17
    13e8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <glcd_fill_rect>
}
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	f8 2e       	mov	r15, r24
    1404:	e6 2e       	mov	r14, r22
    1406:	12 2f       	mov	r17, r18
	if (height < 3) {
    1408:	23 30       	cpi	r18, 0x03	; 3
    140a:	60 f0       	brcs	.+24     	; 0x1424 <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	64 2f       	mov	r22, r20
    1410:	40 2f       	mov	r20, r16
    1412:	0e 94 9f 08 	call	0x113e	; 0x113e <glcd_map>
    1416:	48 2f       	mov	r20, r24
    1418:	8f 2d       	mov	r24, r15
    141a:	6e 2d       	mov	r22, r14
    141c:	21 2f       	mov	r18, r17
    141e:	01 e0       	ldi	r16, 0x01	; 1
    1420:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <glcd_fill_rect>
}
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	c8 2e       	mov	r12, r24
    143c:	e6 2e       	mov	r14, r22
    143e:	14 2f       	mov	r17, r20
    1440:	f2 2e       	mov	r15, r18
    1442:	d0 2e       	mov	r13, r16
	if (height < 3) {
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	82 17       	cp	r24, r18
    1448:	a0 f4       	brcc	.+40     	; 0x1472 <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    144a:	8c 2d       	mov	r24, r12
    144c:	01 e0       	ldi	r16, 0x01	; 1
    144e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    1452:	12 50       	subi	r17, 0x02	; 2
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	61 2f       	mov	r22, r17
    1458:	4d 2d       	mov	r20, r13
    145a:	0e 94 9f 08 	call	0x113e	; 0x113e <glcd_map>
    145e:	48 2f       	mov	r20, r24
    1460:	e3 94       	inc	r14
    1462:	8e ef       	ldi	r24, 0xFE	; 254
    1464:	f8 0e       	add	r15, r24
    1466:	8c 2d       	mov	r24, r12
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	6e 2d       	mov	r22, r14
    146c:	2f 2d       	mov	r18, r15
    146e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <glcd_fill_rect>
}
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	08 95       	ret

00001480 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1480:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1482:	90 93 99 03 	sts	0x0399, r25
    1486:	80 93 98 03 	sts	0x0398, r24
	font_current.width = width;
    148a:	60 93 9a 03 	sts	0x039A, r22
	font_current.height = height;
    148e:	40 93 9b 03 	sts	0x039B, r20
	font_current.start_char = start_char;
    1492:	20 93 9c 03 	sts	0x039C, r18
	font_current.end_char = end_char;
    1496:	00 93 9d 03 	sts	0x039D, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 93 9e 03 	sts	0x039E, r24
}
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    14a4:	ef 92       	push	r14
    14a6:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    14a8:	90 93 99 03 	sts	0x0399, r25
    14ac:	80 93 98 03 	sts	0x0398, r24
	font_current.width = width;
    14b0:	60 93 9a 03 	sts	0x039A, r22
	font_current.height = height;
    14b4:	40 93 9b 03 	sts	0x039B, r20
	font_current.start_char = start_char;
    14b8:	20 93 9c 03 	sts	0x039C, r18
	font_current.end_char = end_char;
    14bc:	00 93 9d 03 	sts	0x039D, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    14c0:	e0 92 9e 03 	sts	0x039E, r14
}
    14c4:	0f 91       	pop	r16
    14c6:	ef 90       	pop	r14
    14c8:	08 95       	ret

000014ca <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    14ca:	2f 92       	push	r2
    14cc:	3f 92       	push	r3
    14ce:	4f 92       	push	r4
    14d0:	5f 92       	push	r5
    14d2:	6f 92       	push	r6
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	63 97       	sbiw	r28, 0x13	; 19
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	48 2e       	mov	r4, r24
    1500:	e6 2e       	mov	r14, r22
    1502:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    1504:	50 91 9c 03 	lds	r21, 0x039C
    1508:	45 17       	cp	r20, r21
    150a:	20 f0       	brcs	.+8      	; 0x1514 <glcd_draw_char_xy+0x4a>
    150c:	80 91 9d 03 	lds	r24, 0x039D
    1510:	84 17       	cp	r24, r20
    1512:	08 f4       	brcc	.+2      	; 0x1516 <glcd_draw_char_xy+0x4c>
    1514:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1516:	80 91 9e 03 	lds	r24, 0x039E
    151a:	88 23       	and	r24, r24
    151c:	09 f0       	breq	.+2      	; 0x1520 <glcd_draw_char_xy+0x56>
    151e:	58 c0       	rjmp	.+176    	; 0x15d0 <glcd_draw_char_xy+0x106>
    1520:	04 2d       	mov	r16, r4
    1522:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1524:	43 2e       	mov	r4, r19
    1526:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1528:	60 2e       	mov	r6, r16
    152a:	77 24       	eor	r7, r7
    152c:	8e 2c       	mov	r8, r14
    152e:	99 24       	eor	r9, r9
    1530:	49 c0       	rjmp	.+146    	; 0x15c4 <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1532:	4f 2d       	mov	r20, r15
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	80 91 9c 03 	lds	r24, 0x039C
    153a:	92 01       	movw	r18, r4
    153c:	28 1b       	sub	r18, r24
    153e:	31 09       	sbc	r19, r1
    1540:	89 2f       	mov	r24, r25
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	bc 01       	movw	r22, r24
    1546:	26 9f       	mul	r18, r22
    1548:	c0 01       	movw	r24, r0
    154a:	27 9f       	mul	r18, r23
    154c:	90 0d       	add	r25, r0
    154e:	36 9f       	mul	r19, r22
    1550:	90 0d       	add	r25, r0
    1552:	11 24       	eor	r1, r1
    1554:	84 0f       	add	r24, r20
    1556:	95 1f       	adc	r25, r21
    1558:	e0 91 98 03 	lds	r30, 0x0398
    155c:	f0 91 99 03 	lds	r31, 0x0399
    1560:	e8 0f       	add	r30, r24
    1562:	f9 1f       	adc	r31, r25
    1564:	e4 91       	lpm	r30, Z+
    1566:	1e 2d       	mov	r17, r14
    1568:	22 24       	eor	r2, r2
    156a:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    156c:	5a 01       	movw	r10, r20
    156e:	a6 0c       	add	r10, r6
    1570:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1572:	ce 2e       	mov	r12, r30
    1574:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1576:	74 e5       	ldi	r23, 0x54	; 84
    1578:	a7 16       	cp	r10, r23
    157a:	b1 04       	cpc	r11, r1
    157c:	0c f0       	brlt	.+2      	; 0x1580 <glcd_draw_char_xy+0xb6>
    157e:	70 c1       	rjmp	.+736    	; 0x1860 <glcd_draw_char_xy+0x396>
    1580:	c1 01       	movw	r24, r2
    1582:	88 0d       	add	r24, r8
    1584:	99 1d       	adc	r25, r9
    1586:	c0 97       	sbiw	r24, 0x30	; 48
    1588:	0c f0       	brlt	.+2      	; 0x158c <glcd_draw_char_xy+0xc2>
    158a:	6a c1       	rjmp	.+724    	; 0x1860 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    158c:	c6 01       	movw	r24, r12
    158e:	02 2c       	mov	r0, r2
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <glcd_draw_char_xy+0xcc>
    1592:	95 95       	asr	r25
    1594:	87 95       	ror	r24
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <glcd_draw_char_xy+0xc8>
    159a:	80 ff       	sbrs	r24, 0
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    159e:	80 2f       	mov	r24, r16
    15a0:	61 2f       	mov	r22, r17
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    15a6:	80 2f       	mov	r24, r16
    15a8:	61 2f       	mov	r22, r17
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    15b0:	08 94       	sec
    15b2:	21 1c       	adc	r2, r1
    15b4:	31 1c       	adc	r3, r1
    15b6:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    15b8:	88 e0       	ldi	r24, 0x08	; 8
    15ba:	28 16       	cp	r2, r24
    15bc:	31 04       	cpc	r3, r1
    15be:	d9 f6       	brne	.-74     	; 0x1576 <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    15c0:	f3 94       	inc	r15
    15c2:	0f 5f       	subi	r16, 0xFF	; 255
    15c4:	90 91 9a 03 	lds	r25, 0x039A
    15c8:	f9 16       	cp	r15, r25
    15ca:	08 f4       	brcc	.+2      	; 0x15ce <glcd_draw_char_xy+0x104>
    15cc:	b2 cf       	rjmp	.-156    	; 0x1532 <glcd_draw_char_xy+0x68>
    15ce:	49 c1       	rjmp	.+658    	; 0x1862 <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <glcd_draw_char_xy+0x10c>
    15d4:	9c c0       	rjmp	.+312    	; 0x170e <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    15d6:	20 91 9b 03 	lds	r18, 0x039B
    15da:	82 2f       	mov	r24, r18
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	87 70       	andi	r24, 0x07	; 7
    15e0:	90 70       	andi	r25, 0x00	; 0
    15e2:	26 95       	lsr	r18
    15e4:	26 95       	lsr	r18
    15e6:	26 95       	lsr	r18
    15e8:	89 2b       	or	r24, r25
    15ea:	09 f0       	breq	.+2      	; 0x15ee <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    15ec:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    15ee:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    15f0:	80 91 9a 03 	lds	r24, 0x039A
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	98 9f       	mul	r25, r24
    15f8:	80 2d       	mov	r24, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	23 2f       	mov	r18, r19
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	25 1b       	sub	r18, r21
    1606:	31 09       	sbc	r19, r1
    1608:	dc 01       	movw	r26, r24
    160a:	a2 9f       	mul	r26, r18
    160c:	c0 01       	movw	r24, r0
    160e:	a3 9f       	mul	r26, r19
    1610:	90 0d       	add	r25, r0
    1612:	b2 9f       	mul	r27, r18
    1614:	90 0d       	add	r25, r0
    1616:	11 24       	eor	r1, r1
    1618:	e0 91 98 03 	lds	r30, 0x0398
    161c:	f0 91 99 03 	lds	r31, 0x0399
    1620:	e8 0f       	add	r30, r24
    1622:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    1624:	b4 91       	lpm	r27, Z+
    1626:	bb 83       	std	Y+3, r27	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	23 2f       	mov	r18, r19
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3a 83       	std	Y+2, r19	; 0x02
    1630:	29 83       	std	Y+1, r18	; 0x01
    1632:	3f 01       	movw	r6, r30
    1634:	08 94       	sec
    1636:	61 1c       	adc	r6, r1
    1638:	71 1c       	adc	r7, r1
    163a:	54 2c       	mov	r5, r4
    163c:	88 24       	eor	r8, r8
    163e:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1640:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1642:	44 2d       	mov	r20, r4
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	5c 87       	std	Y+12, r21	; 0x0c
    1648:	4b 87       	std	Y+11, r20	; 0x0b
    164a:	4f c0       	rjmp	.+158    	; 0x16ea <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    164c:	f5 01       	movw	r30, r10
    164e:	84 91       	lpm	r24, Z+
    1650:	e8 86       	std	Y+8, r14	; 0x08
    1652:	86 01       	movw	r16, r12
    1654:	1b 8a       	std	Y+19, r1	; 0x13
    1656:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1658:	28 2e       	mov	r2, r24
    165a:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    165c:	29 85       	ldd	r18, Y+9	; 0x09
    165e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1660:	24 35       	cpi	r18, 0x54	; 84
    1662:	31 05       	cpc	r19, r1
    1664:	0c f0       	brlt	.+2      	; 0x1668 <glcd_draw_char_xy+0x19e>
    1666:	fc c0       	rjmp	.+504    	; 0x1860 <glcd_draw_char_xy+0x396>
    1668:	2a 89       	ldd	r18, Y+18	; 0x12
    166a:	8a 89       	ldd	r24, Y+18	; 0x12
    166c:	9b 89       	ldd	r25, Y+19	; 0x13
    166e:	8e 0d       	add	r24, r14
    1670:	9f 1d       	adc	r25, r15
    1672:	c0 97       	sbiw	r24, 0x30	; 48
    1674:	0c f0       	brlt	.+2      	; 0x1678 <glcd_draw_char_xy+0x1ae>
    1676:	f4 c0       	rjmp	.+488    	; 0x1860 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1678:	80 91 9b 03 	lds	r24, 0x039B
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	08 17       	cp	r16, r24
    1680:	19 07       	cpc	r17, r25
    1682:	94 f4       	brge	.+36     	; 0x16a8 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1684:	c1 01       	movw	r24, r2
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <glcd_draw_char_xy+0x1c4>
    168a:	95 95       	asr	r25
    168c:	87 95       	ror	r24
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <glcd_draw_char_xy+0x1c0>
    1692:	68 85       	ldd	r22, Y+8	; 0x08
    1694:	62 0f       	add	r22, r18
    1696:	80 ff       	sbrs	r24, 0
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    169a:	85 2d       	mov	r24, r5
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    16a0:	85 2d       	mov	r24, r5
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    16a8:	4a 89       	ldd	r20, Y+18	; 0x12
    16aa:	5b 89       	ldd	r21, Y+19	; 0x13
    16ac:	4f 5f       	subi	r20, 0xFF	; 255
    16ae:	5f 4f       	sbci	r21, 0xFF	; 255
    16b0:	5b 8b       	std	Y+19, r21	; 0x13
    16b2:	4a 8b       	std	Y+18, r20	; 0x12
    16b4:	0f 5f       	subi	r16, 0xFF	; 255
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    16b8:	48 30       	cpi	r20, 0x08	; 8
    16ba:	51 05       	cpc	r21, r1
    16bc:	79 f6       	brne	.-98     	; 0x165c <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    16be:	43 94       	inc	r4
    16c0:	68 e0       	ldi	r22, 0x08	; 8
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	e6 0e       	add	r14, r22
    16c6:	f7 1e       	adc	r15, r23
    16c8:	c6 0e       	add	r12, r22
    16ca:	d7 1e       	adc	r13, r23
    16cc:	08 94       	sec
    16ce:	a1 1c       	adc	r10, r1
    16d0:	b1 1c       	adc	r11, r1
    16d2:	7c 81       	ldd	r23, Y+4	; 0x04
    16d4:	47 16       	cp	r4, r23
    16d6:	08 f4       	brcc	.+2      	; 0x16da <glcd_draw_char_xy+0x210>
    16d8:	b9 cf       	rjmp	.-142    	; 0x164c <glcd_draw_char_xy+0x182>
    16da:	08 94       	sec
    16dc:	81 1c       	adc	r8, r1
    16de:	91 1c       	adc	r9, r1
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	68 0e       	add	r6, r24
    16e6:	79 1e       	adc	r7, r25
    16e8:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	89 16       	cp	r8, r25
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <glcd_draw_char_xy+0x228>
    16f0:	b8 c0       	rjmp	.+368    	; 0x1862 <glcd_draw_char_xy+0x398>
    16f2:	89 89       	ldd	r24, Y+17	; 0x11
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	7c 01       	movw	r14, r24
    16f8:	53 01       	movw	r10, r6
    16fa:	44 24       	eor	r4, r4
    16fc:	cc 24       	eor	r12, r12
    16fe:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1700:	ab 85       	ldd	r26, Y+11	; 0x0b
    1702:	bc 85       	ldd	r27, Y+12	; 0x0c
    1704:	a8 0d       	add	r26, r8
    1706:	b9 1d       	adc	r27, r9
    1708:	ba 87       	std	Y+10, r27	; 0x0a
    170a:	a9 87       	std	Y+9, r26	; 0x09
    170c:	e2 cf       	rjmp	.-60     	; 0x16d2 <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	09 f0       	breq	.+2      	; 0x1714 <glcd_draw_char_xy+0x24a>
    1712:	a6 c0       	rjmp	.+332    	; 0x1860 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    1714:	b0 90 9b 03 	lds	r11, 0x039B
    1718:	b6 94       	lsr	r11
    171a:	b6 94       	lsr	r11
    171c:	b6 94       	lsr	r11
    171e:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    1720:	40 91 9a 03 	lds	r20, 0x039A
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1724:	23 2f       	mov	r18, r19
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	25 1b       	sub	r18, r21
    172a:	31 09       	sbc	r19, r1
    172c:	b4 9e       	mul	r11, r20
    172e:	80 2d       	mov	r24, r0
    1730:	11 24       	eor	r1, r1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	fc 01       	movw	r30, r24
    1736:	2e 9f       	mul	r18, r30
    1738:	c0 01       	movw	r24, r0
    173a:	2f 9f       	mul	r18, r31
    173c:	90 0d       	add	r25, r0
    173e:	3e 9f       	mul	r19, r30
    1740:	90 0d       	add	r25, r0
    1742:	11 24       	eor	r1, r1
    1744:	80 90 98 03 	lds	r8, 0x0398
    1748:	90 90 99 03 	lds	r9, 0x0399
    174c:	88 0e       	add	r8, r24
    174e:	99 1e       	adc	r9, r25
    1750:	54 2e       	mov	r5, r20
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	41 50       	subi	r20, 0x01	; 1
    1758:	50 40       	sbci	r21, 0x00	; 0
    175a:	64 2f       	mov	r22, r20
    175c:	63 1b       	sub	r22, r19
    175e:	e0 e0       	ldi	r30, 0x00	; 0
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    1766:	89 2f       	mov	r24, r25
    1768:	86 1b       	sub	r24, r22
    176a:	f4 01       	movw	r30, r8
    176c:	e8 0f       	add	r30, r24
    176e:	f1 1d       	adc	r31, r1
    1770:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    1772:	2f 5f       	subi	r18, 0xFF	; 255
    1774:	96 0f       	add	r25, r22
    1776:	2b 15       	cp	r18, r11
    1778:	b0 f3       	brcs	.-20     	; 0x1766 <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    177a:	ee 23       	and	r30, r30
    177c:	21 f4       	brne	.+8      	; 0x1786 <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    177e:	5a 94       	dec	r5
				if (var_width == 0) {
    1780:	11 f0       	breq	.+4      	; 0x1786 <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    1782:	3f 5f       	subi	r19, 0xFF	; 255
    1784:	ea cf       	rjmp	.-44     	; 0x175a <glcd_draw_char_xy+0x290>
		}
    1786:	ff 24       	eor	r15, r15
    1788:	66 24       	eor	r6, r6
    178a:	cc 24       	eor	r12, r12
    178c:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    178e:	24 2d       	mov	r18, r4
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	38 8b       	std	Y+16, r19	; 0x10
    1794:	2f 87       	std	Y+15, r18	; 0x0f
    1796:	58 c0       	rjmp	.+176    	; 0x1848 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1798:	8a 2d       	mov	r24, r10
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	20 91 9a 03 	lds	r18, 0x039A
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4e 81       	ldd	r20, Y+6	; 0x06
    17a4:	5f 81       	ldd	r21, Y+7	; 0x07
    17a6:	42 9f       	mul	r20, r18
    17a8:	f0 01       	movw	r30, r0
    17aa:	43 9f       	mul	r20, r19
    17ac:	f0 0d       	add	r31, r0
    17ae:	52 9f       	mul	r21, r18
    17b0:	f0 0d       	add	r31, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	e8 0f       	add	r30, r24
    17b6:	f9 1f       	adc	r31, r25
    17b8:	e8 0d       	add	r30, r8
    17ba:	f9 1d       	adc	r31, r9
    17bc:	e4 91       	lpm	r30, Z+
    17be:	86 01       	movw	r16, r12
    17c0:	1b 8a       	std	Y+19, r1	; 0x13
    17c2:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    17c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c6:	78 89       	ldd	r23, Y+16	; 0x10
    17c8:	68 0f       	add	r22, r24
    17ca:	79 1f       	adc	r23, r25
    17cc:	7e 87       	std	Y+14, r23	; 0x0e
    17ce:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    17d0:	2e 2e       	mov	r2, r30
    17d2:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	84 35       	cpi	r24, 0x54	; 84
    17da:	91 05       	cpc	r25, r1
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <glcd_draw_char_xy+0x316>
    17de:	40 c0       	rjmp	.+128    	; 0x1860 <glcd_draw_char_xy+0x396>
    17e0:	2a 89       	ldd	r18, Y+18	; 0x12
    17e2:	8a 89       	ldd	r24, Y+18	; 0x12
    17e4:	9b 89       	ldd	r25, Y+19	; 0x13
    17e6:	8e 0d       	add	r24, r14
    17e8:	9f 1d       	adc	r25, r15
    17ea:	c0 97       	sbiw	r24, 0x30	; 48
    17ec:	cc f5       	brge	.+114    	; 0x1860 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    17ee:	80 91 9b 03 	lds	r24, 0x039B
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	08 17       	cp	r16, r24
    17f6:	19 07       	cpc	r17, r25
    17f8:	94 f4       	brge	.+36     	; 0x181e <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    17fa:	c1 01       	movw	r24, r2
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <glcd_draw_char_xy+0x33a>
    1800:	95 95       	asr	r25
    1802:	87 95       	ror	r24
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <glcd_draw_char_xy+0x336>
    1808:	6d 81       	ldd	r22, Y+5	; 0x05
    180a:	62 0f       	add	r22, r18
    180c:	80 ff       	sbrs	r24, 0
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1810:	87 2d       	mov	r24, r7
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	02 c0       	rjmp	.+4      	; 0x181a <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1816:	87 2d       	mov	r24, r7
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    181e:	ea 89       	ldd	r30, Y+18	; 0x12
    1820:	fb 89       	ldd	r31, Y+19	; 0x13
    1822:	31 96       	adiw	r30, 0x01	; 1
    1824:	fb 8b       	std	Y+19, r31	; 0x13
    1826:	ea 8b       	std	Y+18, r30	; 0x12
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    182c:	38 97       	sbiw	r30, 0x08	; 8
    182e:	91 f6       	brne	.-92     	; 0x17d4 <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    1830:	a3 94       	inc	r10
    1832:	73 94       	inc	r7
    1834:	a5 14       	cp	r10, r5
    1836:	08 f4       	brcc	.+2      	; 0x183a <glcd_draw_char_xy+0x370>
    1838:	af cf       	rjmp	.-162    	; 0x1798 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    183a:	63 94       	inc	r6
    183c:	28 e0       	ldi	r18, 0x08	; 8
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	e2 0e       	add	r14, r18
    1842:	f3 1e       	adc	r15, r19
    1844:	c2 0e       	add	r12, r18
    1846:	d3 1e       	adc	r13, r19
    1848:	6b 14       	cp	r6, r11
    184a:	10 f0       	brcs	.+4      	; 0x1850 <glcd_draw_char_xy+0x386>
    184c:	95 2d       	mov	r25, r5
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1850:	46 2d       	mov	r20, r6
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	5f 83       	std	Y+7, r21	; 0x07
    1856:	4e 83       	std	Y+6, r20	; 0x06
    1858:	ed 82       	std	Y+5, r14	; 0x05
    185a:	74 2c       	mov	r7, r4
    185c:	aa 24       	eor	r10, r10
    185e:	ea cf       	rjmp	.-44     	; 0x1834 <glcd_draw_char_xy+0x36a>
    1860:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    1862:	89 2f       	mov	r24, r25
    1864:	63 96       	adiw	r28, 0x13	; 19
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	bf 90       	pop	r11
    1882:	af 90       	pop	r10
    1884:	9f 90       	pop	r9
    1886:	8f 90       	pop	r8
    1888:	7f 90       	pop	r7
    188a:	6f 90       	pop	r6
    188c:	5f 90       	pop	r5
    188e:	4f 90       	pop	r4
    1890:	3f 90       	pop	r3
    1892:	2f 90       	pop	r2
    1894:	08 95       	ret

00001896 <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	18 2f       	mov	r17, r24
    18a0:	06 2f       	mov	r16, r22
    18a2:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    18a4:	86 2f       	mov	r24, r22
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	40 91 9b 03 	lds	r20, 0x039B
    18ac:	2f e2       	ldi	r18, 0x2F	; 47
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	24 1b       	sub	r18, r20
    18b2:	31 09       	sbc	r19, r1
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	64 f0       	brlt	.+24     	; 0x18d2 <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    18ba:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    18bc:	21 96       	adiw	r28, 0x01	; 1
    18be:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    18c0:	44 23       	and	r20, r20
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    18c4:	81 2f       	mov	r24, r17
    18c6:	60 2f       	mov	r22, r16
    18c8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <glcd_draw_char_xy>
		x += (width + 1);
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	18 0f       	add	r17, r24
    18d0:	f4 cf       	rjmp	.-24     	; 0x18ba <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	18 2f       	mov	r17, r24
    18e6:	06 2f       	mov	r16, r22
    18e8:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    18ea:	86 2f       	mov	r24, r22
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	40 91 9b 03 	lds	r20, 0x039B
    18f2:	2f e2       	ldi	r18, 0x2F	; 47
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	24 1b       	sub	r18, r20
    18f8:	31 09       	sbc	r19, r1
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	44 f4       	brge	.+16     	; 0x1910 <glcd_draw_string_xy+0x34>
    1900:	0a c0       	rjmp	.+20     	; 0x1916 <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    1902:	81 2f       	mov	r24, r17
    1904:	60 2f       	mov	r22, r16
    1906:	0e 94 65 0a 	call	0x14ca	; 0x14ca <glcd_draw_char_xy>
		x += (width + 1);
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	18 0f       	add	r17, r24
		c++;
    190e:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1910:	48 81       	ld	r20, Y
    1912:	44 23       	and	r20, r20
    1914:	b1 f7       	brne	.-20     	; 0x1902 <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	08 95       	ret

00001920 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    1920:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1922:	84 35       	cpi	r24, 0x54	; 84
    1924:	f0 f4       	brcc	.+60     	; 0x1962 <glcd_get_pixel+0x42>
    1926:	60 33       	cpi	r22, 0x30	; 48
    1928:	e0 f4       	brcc	.+56     	; 0x1962 <glcd_get_pixel+0x42>
    192a:	86 2f       	mov	r24, r22
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	86 95       	lsr	r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	24 e5       	ldi	r18, 0x54	; 84
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	82 9f       	mul	r24, r18
    193a:	f0 01       	movw	r30, r0
    193c:	83 9f       	mul	r24, r19
    193e:	f0 0d       	add	r31, r0
    1940:	92 9f       	mul	r25, r18
    1942:	f0 0d       	add	r31, r0
    1944:	11 24       	eor	r1, r1
    1946:	e4 0f       	add	r30, r20
    1948:	f1 1d       	adc	r31, r1
    194a:	e4 56       	subi	r30, 0x64	; 100
    194c:	fe 4f       	sbci	r31, 0xFE	; 254
    194e:	80 81       	ld	r24, Z
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	67 70       	andi	r22, 0x07	; 7
    1954:	02 c0       	rjmp	.+4      	; 0x195a <glcd_get_pixel+0x3a>
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	6a 95       	dec	r22
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <glcd_get_pixel+0x36>
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	08 95       	ret
    1962:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    1964:	08 95       	ret

00001966 <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    1966:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    1968:	80 91 94 03 	lds	r24, 0x0394
    196c:	90 91 95 03 	lds	r25, 0x0395
    1970:	48 ef       	ldi	r20, 0xF8	; 248
    1972:	51 e0       	ldi	r21, 0x01	; 1
    1974:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    1978:	0e 94 77 07 	call	0xeee	; 0xeee <glcd_bbox_refresh>
}
    197c:	08 95       	ret

0000197e <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	08 2f       	mov	r16, r24
    1984:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1986:	84 35       	cpi	r24, 0x54	; 84
    1988:	e8 f4       	brcc	.+58     	; 0x19c4 <glcd_invert_pixel+0x46>
    198a:	60 33       	cpi	r22, 0x30	; 48
    198c:	d8 f4       	brcc	.+54     	; 0x19c4 <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    198e:	40 2f       	mov	r20, r16
    1990:	21 2f       	mov	r18, r17
    1992:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    1996:	e1 2f       	mov	r30, r17
    1998:	e6 95       	lsr	r30
    199a:	e6 95       	lsr	r30
    199c:	e6 95       	lsr	r30
    199e:	84 e5       	ldi	r24, 0x54	; 84
    19a0:	e8 9f       	mul	r30, r24
    19a2:	f0 01       	movw	r30, r0
    19a4:	11 24       	eor	r1, r1
    19a6:	e0 0f       	add	r30, r16
    19a8:	f1 1d       	adc	r31, r1
    19aa:	e4 56       	subi	r30, 0x64	; 100
    19ac:	fe 4f       	sbci	r31, 0xFE	; 254
    19ae:	17 70       	andi	r17, 0x07	; 7
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <glcd_invert_pixel+0x3c>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	1a 95       	dec	r17
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <glcd_invert_pixel+0x38>
    19be:	20 81       	ld	r18, Z
    19c0:	28 27       	eor	r18, r24
    19c2:	20 83       	st	Z, r18
}
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	d6 2e       	mov	r13, r22
    19da:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    19dc:	e8 2e       	mov	r14, r24
    19de:	ff 24       	eor	r15, r15
    19e0:	e4 0e       	add	r14, r20
    19e2:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    19e4:	c6 2f       	mov	r28, r22
    19e6:	d0 e0       	ldi	r29, 0x00	; 0
    19e8:	c2 0f       	add	r28, r18
    19ea:	d1 1d       	adc	r29, r1
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    19ee:	80 2f       	mov	r24, r16
    19f0:	61 2f       	mov	r22, r17
    19f2:	0e 94 bf 0c 	call	0x197e	; 0x197e <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    19f6:	1f 5f       	subi	r17, 0xFF	; 255
    19f8:	81 2f       	mov	r24, r17
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	8c 17       	cp	r24, r28
    19fe:	9d 07       	cpc	r25, r29
    1a00:	b4 f3       	brlt	.-20     	; 0x19ee <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1a02:	0f 5f       	subi	r16, 0xFF	; 255
    1a04:	80 2f       	mov	r24, r16
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	8e 15       	cp	r24, r14
    1a0a:	9f 05       	cpc	r25, r15
    1a0c:	14 f4       	brge	.+4      	; 0x1a12 <glcd_invert_area+0x48>
    1a0e:	1d 2d       	mov	r17, r13
    1a10:	f3 cf       	rjmp	.-26     	; 0x19f8 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	08 95       	ret

00001a22 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    1a22:	a8 2f       	mov	r26, r24
    1a24:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    1a26:	84 35       	cpi	r24, 0x54	; 84
    1a28:	d0 f5       	brcc	.+116    	; 0x1a9e <glcd_set_pixel+0x7c>
    1a2a:	60 33       	cpi	r22, 0x30	; 48
    1a2c:	c0 f5       	brcc	.+112    	; 0x1a9e <glcd_set_pixel+0x7c>
    1a2e:	56 2f       	mov	r21, r22
    1a30:	56 95       	lsr	r21
    1a32:	56 95       	lsr	r21
    1a34:	56 95       	lsr	r21
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	26 2f       	mov	r18, r22
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    1a3c:	44 23       	and	r20, r20
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    1a40:	e4 e5       	ldi	r30, 0x54	; 84
    1a42:	5e 9f       	mul	r21, r30
    1a44:	f0 01       	movw	r30, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	e8 0f       	add	r30, r24
    1a4a:	f9 1f       	adc	r31, r25
    1a4c:	e4 56       	subi	r30, 0x64	; 100
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	27 70       	andi	r18, 0x07	; 7
    1a52:	30 70       	andi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <glcd_set_pixel+0x3c>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <glcd_set_pixel+0x38>
    1a62:	20 81       	ld	r18, Z
    1a64:	28 2b       	or	r18, r24
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    1a68:	e4 e5       	ldi	r30, 0x54	; 84
    1a6a:	5e 9f       	mul	r21, r30
    1a6c:	f0 01       	movw	r30, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	e8 0f       	add	r30, r24
    1a72:	f9 1f       	adc	r31, r25
    1a74:	e4 56       	subi	r30, 0x64	; 100
    1a76:	fe 4f       	sbci	r31, 0xFE	; 254
    1a78:	27 70       	andi	r18, 0x07	; 7
    1a7a:	30 70       	andi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <glcd_set_pixel+0x64>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	2a 95       	dec	r18
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <glcd_set_pixel+0x60>
    1a8a:	80 95       	com	r24
    1a8c:	20 81       	ld	r18, Z
    1a8e:	28 23       	and	r18, r24
    1a90:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    1a92:	8a 2f       	mov	r24, r26
    1a94:	67 2f       	mov	r22, r23
    1a96:	4a 2f       	mov	r20, r26
    1a98:	27 2f       	mov	r18, r23
    1a9a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
    1a9e:	08 95       	ret

00001aa0 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <glcd_fill_circle+0x24>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <glcd_fill_circle+0x26>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <glcd_fill_circle+0x28>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	b8 2e       	mov	r11, r24
    1ace:	e6 2e       	mov	r14, r22
    1ad0:	f4 2e       	mov	r15, r20
    1ad2:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1ad4:	04 2f       	mov	r16, r20
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1ad8:	64 1b       	sub	r22, r20
    1ada:	48 0f       	add	r20, r24
    1adc:	2f 2d       	mov	r18, r15
    1ade:	2e 0d       	add	r18, r14
    1ae0:	8f 19       	sub	r24, r15
    1ae2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    1ae6:	8e 2c       	mov	r8, r14
    1ae8:	99 24       	eor	r9, r9
    1aea:	24 01       	movw	r4, r8
    1aec:	40 1a       	sub	r4, r16
    1aee:	51 0a       	sbc	r5, r17
    1af0:	68 01       	movw	r12, r16
    1af2:	c8 0c       	add	r12, r8
    1af4:	d9 1c       	adc	r13, r9
    1af6:	08 c0       	rjmp	.+16     	; 0x1b08 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    1af8:	8b 2d       	mov	r24, r11
    1afa:	64 2d       	mov	r22, r4
    1afc:	46 2d       	mov	r20, r6
    1afe:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    1b02:	08 94       	sec
    1b04:	41 1c       	adc	r4, r1
    1b06:	51 1c       	adc	r5, r1
    1b08:	c4 14       	cp	r12, r4
    1b0a:	d5 04       	cpc	r13, r5
    1b0c:	ac f7       	brge	.-22     	; 0x1af8 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1b0e:	dd 24       	eor	r13, r13
    1b10:	d3 94       	inc	r13
    1b12:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1b14:	00 0f       	add	r16, r16
    1b16:	11 1f       	adc	r17, r17
    1b18:	40 2e       	mov	r4, r16
    1b1a:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1b1c:	cf 2c       	mov	r12, r15
    1b1e:	aa 24       	eor	r10, r10
    1b20:	00 e0       	ldi	r16, 0x00	; 0
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1b28:	8e 2d       	mov	r24, r14
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	21 50       	subi	r18, 0x01	; 1
    1b30:	30 40       	sbci	r19, 0x00	; 0
    1b32:	3a 83       	std	Y+2, r19	; 0x02
    1b34:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1b36:	fc 01       	movw	r30, r24
    1b38:	31 96       	adiw	r30, 0x01	; 1
    1b3a:	fc 83       	std	Y+4, r31	; 0x04
    1b3c:	eb 83       	std	Y+3, r30	; 0x03
    1b3e:	54 c0       	rjmp	.+168    	; 0x1be8 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1b40:	d7 fc       	sbrc	r13, 7
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <glcd_fill_circle+0xac>
			y--;
    1b44:	ca 94       	dec	r12
			ddF_y += 2;
    1b46:	f2 e0       	ldi	r31, 0x02	; 2
    1b48:	4f 0e       	add	r4, r31
			f += ddF_y;
    1b4a:	d4 0c       	add	r13, r4
		}
		x++;
    1b4c:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1b4e:	8c 2d       	mov	r24, r12
    1b50:	99 27       	eor	r25, r25
    1b52:	87 fd       	sbrc	r24, 7
    1b54:	90 95       	com	r25
    1b56:	94 01       	movw	r18, r8
    1b58:	28 1b       	sub	r18, r24
    1b5a:	39 0b       	sbc	r19, r25
    1b5c:	3e 83       	std	Y+6, r19	; 0x06
    1b5e:	2d 83       	std	Y+5, r18	; 0x05
    1b60:	7c 01       	movw	r14, r24
    1b62:	e8 0c       	add	r14, r8
    1b64:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    1b66:	3a 2c       	mov	r3, r10
    1b68:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1b6a:	5b 2c       	mov	r5, r11
    1b6c:	5a 18       	sub	r5, r10
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1b70:	83 2d       	mov	r24, r3
    1b72:	6d 81       	ldd	r22, Y+5	; 0x05
    1b74:	46 2d       	mov	r20, r6
    1b76:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1b7a:	85 2d       	mov	r24, r5
    1b7c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b7e:	46 2d       	mov	r20, r6
    1b80:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b90:	fe 81       	ldd	r31, Y+6	; 0x06
    1b92:	ee 16       	cp	r14, r30
    1b94:	ff 06       	cpc	r15, r31
    1b96:	64 f7       	brge	.-40     	; 0x1b70 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1b98:	29 81       	ldd	r18, Y+1	; 0x01
    1b9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9c:	20 1b       	sub	r18, r16
    1b9e:	31 0b       	sbc	r19, r17
    1ba0:	3e 83       	std	Y+6, r19	; 0x06
    1ba2:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1ba4:	eb 80       	ldd	r14, Y+3	; 0x03
    1ba6:	fc 80       	ldd	r15, Y+4	; 0x04
    1ba8:	e0 0e       	add	r14, r16
    1baa:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    1bac:	3c 2c       	mov	r3, r12
    1bae:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    1bb0:	5b 2c       	mov	r5, r11
    1bb2:	5c 18       	sub	r5, r12
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    1bb6:	83 2d       	mov	r24, r3
    1bb8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bba:	46 2d       	mov	r20, r6
    1bbc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    1bc0:	85 2d       	mov	r24, r5
    1bc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bc4:	46 2d       	mov	r20, r6
    1bc6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	ed 81       	ldd	r30, Y+5	; 0x05
    1bd6:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd8:	ee 16       	cp	r14, r30
    1bda:	ff 06       	cpc	r15, r31
    1bdc:	64 f7       	brge	.-40     	; 0x1bb6 <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    1bde:	d7 0c       	add	r13, r7
    1be0:	0f 5f       	subi	r16, 0xFF	; 255
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	f2 e0       	ldi	r31, 0x02	; 2
    1be6:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1be8:	ac 14       	cp	r10, r12
    1bea:	0c f4       	brge	.+2      	; 0x1bee <glcd_fill_circle+0x14e>
    1bec:	a9 cf       	rjmp	.-174    	; 0x1b40 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1bee:	26 96       	adiw	r28, 0x06	; 6
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	bf 90       	pop	r11
    1c0c:	af 90       	pop	r10
    1c0e:	9f 90       	pop	r9
    1c10:	8f 90       	pop	r8
    1c12:	7f 90       	pop	r7
    1c14:	6f 90       	pop	r6
    1c16:	5f 90       	pop	r5
    1c18:	4f 90       	pop	r4
    1c1a:	3f 90       	pop	r3
    1c1c:	08 95       	ret

00001c1e <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	a8 2e       	mov	r10, r24
    1c36:	b6 2e       	mov	r11, r22
    1c38:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    1c3a:	99 24       	eor	r9, r9
    1c3c:	93 94       	inc	r9
    1c3e:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1c40:	84 2f       	mov	r24, r20
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	78 2e       	mov	r7, r24
    1c4a:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1c4c:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1c4e:	ea 2c       	mov	r14, r10
    1c50:	e4 1a       	sub	r14, r20
    1c52:	06 2f       	mov	r16, r22
    1c54:	04 1b       	sub	r16, r20
    1c56:	f4 2e       	mov	r15, r20
    1c58:	fa 0c       	add	r15, r10
    1c5a:	14 2f       	mov	r17, r20
    1c5c:	16 0f       	add	r17, r22
    1c5e:	8e 2d       	mov	r24, r14
    1c60:	60 2f       	mov	r22, r16
    1c62:	4f 2d       	mov	r20, r15
    1c64:	21 2f       	mov	r18, r17
    1c66:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1c6a:	8a 2d       	mov	r24, r10
    1c6c:	61 2f       	mov	r22, r17
    1c6e:	4c 2d       	mov	r20, r12
    1c70:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1c74:	8a 2d       	mov	r24, r10
    1c76:	60 2f       	mov	r22, r16
    1c78:	4c 2d       	mov	r20, r12
    1c7a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1c7e:	8f 2d       	mov	r24, r15
    1c80:	6b 2d       	mov	r22, r11
    1c82:	4c 2d       	mov	r20, r12
    1c84:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1c88:	8e 2d       	mov	r24, r14
    1c8a:	6b 2d       	mov	r22, r11
    1c8c:	4c 2d       	mov	r20, r12
    1c8e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1c92:	ee 24       	eor	r14, r14
    1c94:	23 e0       	ldi	r18, 0x03	; 3
    1c96:	82 2e       	mov	r8, r18
    1c98:	42 c0       	rjmp	.+132    	; 0x1d1e <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1c9a:	97 fc       	sbrc	r9, 7
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <glcd_draw_circle+0x88>
			y--;
    1c9e:	da 94       	dec	r13
			ddF_y += 2;
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	78 0e       	add	r7, r24
			f += ddF_y;
    1ca4:	97 0c       	add	r9, r7
		}
		x++;
    1ca6:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1ca8:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1caa:	fe 2c       	mov	r15, r14
    1cac:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1cae:	1d 2d       	mov	r17, r13
    1cb0:	1b 0d       	add	r17, r11
    1cb2:	8f 2d       	mov	r24, r15
    1cb4:	61 2f       	mov	r22, r17
    1cb6:	4c 2d       	mov	r20, r12
    1cb8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1cbc:	0a 2d       	mov	r16, r10
    1cbe:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1cc0:	80 2f       	mov	r24, r16
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	4c 2d       	mov	r20, r12
    1cc6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1cca:	1b 2d       	mov	r17, r11
    1ccc:	1d 19       	sub	r17, r13
    1cce:	8f 2d       	mov	r24, r15
    1cd0:	61 2f       	mov	r22, r17
    1cd2:	4c 2d       	mov	r20, r12
    1cd4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1cd8:	80 2f       	mov	r24, r16
    1cda:	61 2f       	mov	r22, r17
    1cdc:	4c 2d       	mov	r20, r12
    1cde:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1ce2:	fd 2c       	mov	r15, r13
    1ce4:	fa 0c       	add	r15, r10
    1ce6:	1e 2d       	mov	r17, r14
    1ce8:	1b 0d       	add	r17, r11
    1cea:	8f 2d       	mov	r24, r15
    1cec:	61 2f       	mov	r22, r17
    1cee:	4c 2d       	mov	r20, r12
    1cf0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1cf4:	0a 2d       	mov	r16, r10
    1cf6:	0d 19       	sub	r16, r13
    1cf8:	80 2f       	mov	r24, r16
    1cfa:	61 2f       	mov	r22, r17
    1cfc:	4c 2d       	mov	r20, r12
    1cfe:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1d02:	1b 2d       	mov	r17, r11
    1d04:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1d06:	8f 2d       	mov	r24, r15
    1d08:	61 2f       	mov	r22, r17
    1d0a:	4c 2d       	mov	r20, r12
    1d0c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1d10:	80 2f       	mov	r24, r16
    1d12:	61 2f       	mov	r22, r17
    1d14:	4c 2d       	mov	r20, r12
    1d16:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1d1e:	ed 14       	cp	r14, r13
    1d20:	0c f4       	brge	.+2      	; 0x1d24 <glcd_draw_circle+0x106>
    1d22:	bb cf       	rjmp	.-138    	; 0x1c9a <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	bf 90       	pop	r11
    1d32:	af 90       	pop	r10
    1d34:	9f 90       	pop	r9
    1d36:	8f 90       	pop	r8
    1d38:	7f 90       	pop	r7
    1d3a:	08 95       	ret

00001d3c <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1d3c:	2f 92       	push	r2
    1d3e:	3f 92       	push	r3
    1d40:	4f 92       	push	r4
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <glcd_draw_rect_thick+0x26>
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	b8 2e       	mov	r11, r24
    1d6a:	a6 2e       	mov	r10, r22
    1d6c:	44 2e       	mov	r4, r20
    1d6e:	29 83       	std	Y+1, r18	; 0x01
    1d70:	90 2e       	mov	r9, r16
    1d72:	8e 2d       	mov	r24, r14
    1d74:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    1d76:	00 23       	and	r16, r16
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <glcd_draw_rect_thick+0x42>
    1d7a:	99 24       	eor	r9, r9
    1d7c:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <glcd_draw_rect_thick+0x48>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1d84:	00 e0       	ldi	r16, 0x00	; 0
    1d86:	10 e0       	ldi	r17, 0x00	; 0
    1d88:	cb 2c       	mov	r12, r11
    1d8a:	dd 24       	eor	r13, r13
    1d8c:	16 01       	movw	r2, r12
    1d8e:	24 0c       	add	r2, r4
    1d90:	31 1c       	adc	r3, r1
    1d92:	89 80       	ldd	r8, Y+1	; 0x01
    1d94:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1d96:	68 2e       	mov	r6, r24
    1d98:	77 24       	eor	r7, r7
    1d9a:	18 c0       	rjmp	.+48     	; 0x1dcc <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    1d9c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d9e:	6a 0d       	add	r22, r10
    1da0:	8e 2d       	mov	r24, r14
    1da2:	45 2d       	mov	r20, r5
    1da4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1da8:	8e 2d       	mov	r24, r14
    1daa:	6f 2d       	mov	r22, r15
    1dac:	45 2d       	mov	r20, r5
    1dae:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	9b 83       	std	Y+3, r25	; 0x03
    1dba:	8a 83       	std	Y+2, r24	; 0x02
    1dbc:	fa 94       	dec	r15
    1dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc2:	e6 15       	cp	r30, r6
    1dc4:	f7 05       	cpc	r31, r7
    1dc6:	54 f3       	brlt	.-44     	; 0x1d9c <glcd_draw_rect_thick+0x60>
    1dc8:	0f 5f       	subi	r16, 0xFF	; 255
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1dcc:	c8 01       	movw	r24, r16
    1dce:	8c 0d       	add	r24, r12
    1dd0:	9d 1d       	adc	r25, r13
    1dd2:	82 15       	cp	r24, r2
    1dd4:	93 05       	cpc	r25, r3
    1dd6:	34 f4       	brge	.+12     	; 0x1de4 <glcd_draw_rect_thick+0xa8>
    1dd8:	f8 2c       	mov	r15, r8
    1dda:	1b 82       	std	Y+3, r1	; 0x03
    1ddc:	1a 82       	std	Y+2, r1	; 0x02
    1dde:	eb 2c       	mov	r14, r11
    1de0:	e0 0e       	add	r14, r16
    1de2:	ec cf       	rjmp	.-40     	; 0x1dbc <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	ca 2c       	mov	r12, r10
    1dea:	dd 24       	eor	r13, r13
    1dec:	36 01       	movw	r6, r12
    1dee:	f9 81       	ldd	r31, Y+1	; 0x01
    1df0:	6f 0e       	add	r6, r31
    1df2:	71 1c       	adc	r7, r1
    1df4:	34 2c       	mov	r3, r4
    1df6:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1df8:	89 2c       	mov	r8, r9
    1dfa:	99 24       	eor	r9, r9
    1dfc:	18 c0       	rjmp	.+48     	; 0x1e2e <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	8b 0d       	add	r24, r11
    1e02:	6f 2d       	mov	r22, r15
    1e04:	45 2d       	mov	r20, r5
    1e06:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1e0a:	8e 2d       	mov	r24, r14
    1e0c:	6f 2d       	mov	r22, r15
    1e0e:	45 2d       	mov	r20, r5
    1e10:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	9b 83       	std	Y+3, r25	; 0x03
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
    1e1e:	ea 94       	dec	r14
    1e20:	ea 81       	ldd	r30, Y+2	; 0x02
    1e22:	fb 81       	ldd	r31, Y+3	; 0x03
    1e24:	e8 15       	cp	r30, r8
    1e26:	f9 05       	cpc	r31, r9
    1e28:	54 f3       	brlt	.-44     	; 0x1dfe <glcd_draw_rect_thick+0xc2>
    1e2a:	0f 5f       	subi	r16, 0xFF	; 255
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1e2e:	c8 01       	movw	r24, r16
    1e30:	8c 0d       	add	r24, r12
    1e32:	9d 1d       	adc	r25, r13
    1e34:	86 15       	cp	r24, r6
    1e36:	97 05       	cpc	r25, r7
    1e38:	34 f4       	brge	.+12     	; 0x1e46 <glcd_draw_rect_thick+0x10a>
    1e3a:	e3 2c       	mov	r14, r3
    1e3c:	1b 82       	std	Y+3, r1	; 0x03
    1e3e:	1a 82       	std	Y+2, r1	; 0x02
    1e40:	fa 2c       	mov	r15, r10
    1e42:	f0 0e       	add	r15, r16
    1e44:	ec cf       	rjmp	.-40     	; 0x1e1e <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1e46:	4b 2d       	mov	r20, r11
    1e48:	41 50       	subi	r20, 0x01	; 1
    1e4a:	44 0d       	add	r20, r4
    1e4c:	2a 2d       	mov	r18, r10
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	f9 81       	ldd	r31, Y+1	; 0x01
    1e52:	2f 0f       	add	r18, r31
    1e54:	8b 2d       	mov	r24, r11
    1e56:	6a 2d       	mov	r22, r10
    1e58:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	7f 90       	pop	r7
    1e7c:	6f 90       	pop	r6
    1e7e:	5f 90       	pop	r5
    1e80:	4f 90       	pop	r4
    1e82:	3f 90       	pop	r3
    1e84:	2f 90       	pop	r2
    1e86:	08 95       	ret

00001e88 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1e88:	6f 92       	push	r6
    1e8a:	7f 92       	push	r7
    1e8c:	8f 92       	push	r8
    1e8e:	9f 92       	push	r9
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	ff 92       	push	r15
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	e8 2e       	mov	r14, r24
    1ea6:	f6 2e       	mov	r15, r22
    1ea8:	a4 2e       	mov	r10, r20
    1eaa:	72 2e       	mov	r7, r18
    1eac:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1eae:	c0 e0       	ldi	r28, 0x00	; 0
    1eb0:	d0 e0       	ldi	r29, 0x00	; 0
    1eb2:	c8 2e       	mov	r12, r24
    1eb4:	dd 24       	eor	r13, r13
    1eb6:	46 01       	movw	r8, r12
    1eb8:	84 0e       	add	r8, r20
    1eba:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    1ebc:	fa 94       	dec	r15
    1ebe:	0f 2d       	mov	r16, r15
    1ec0:	02 0f       	add	r16, r18
    1ec2:	f3 94       	inc	r15
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1ec6:	1e 2d       	mov	r17, r14
    1ec8:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    1eca:	81 2f       	mov	r24, r17
    1ecc:	6f 2d       	mov	r22, r15
    1ece:	4b 2d       	mov	r20, r11
    1ed0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1ed4:	81 2f       	mov	r24, r17
    1ed6:	60 2f       	mov	r22, r16
    1ed8:	4b 2d       	mov	r20, r11
    1eda:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1ede:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	8c 0d       	add	r24, r12
    1ee4:	9d 1d       	adc	r25, r13
    1ee6:	88 15       	cp	r24, r8
    1ee8:	99 05       	cpc	r25, r9
    1eea:	6c f3       	brlt	.-38     	; 0x1ec6 <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1eec:	c0 e0       	ldi	r28, 0x00	; 0
    1eee:	d0 e0       	ldi	r29, 0x00	; 0
    1ef0:	cf 2c       	mov	r12, r15
    1ef2:	dd 24       	eor	r13, r13
    1ef4:	46 01       	movw	r8, r12
    1ef6:	87 0c       	add	r8, r7
    1ef8:	91 1c       	adc	r9, r1
    1efa:	0e 2d       	mov	r16, r14
    1efc:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    1efe:	60 2e       	mov	r6, r16
    1f00:	6a 0c       	add	r6, r10
    1f02:	0d c0       	rjmp	.+26     	; 0x1f1e <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1f04:	1f 2d       	mov	r17, r15
    1f06:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    1f08:	8e 2d       	mov	r24, r14
    1f0a:	61 2f       	mov	r22, r17
    1f0c:	4b 2d       	mov	r20, r11
    1f0e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    1f12:	86 2d       	mov	r24, r6
    1f14:	61 2f       	mov	r22, r17
    1f16:	4b 2d       	mov	r20, r11
    1f18:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1f1c:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1f1e:	ce 01       	movw	r24, r28
    1f20:	8c 0d       	add	r24, r12
    1f22:	9d 1d       	adc	r25, r13
    1f24:	88 15       	cp	r24, r8
    1f26:	99 05       	cpc	r25, r9
    1f28:	6c f3       	brlt	.-38     	; 0x1f04 <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1f2a:	0a 0d       	add	r16, r10
    1f2c:	2f 2d       	mov	r18, r15
    1f2e:	21 50       	subi	r18, 0x01	; 1
    1f30:	27 0d       	add	r18, r7
    1f32:	8e 2d       	mov	r24, r14
    1f34:	6f 2d       	mov	r22, r15
    1f36:	40 2f       	mov	r20, r16
    1f38:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
}
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	bf 90       	pop	r11
    1f4e:	af 90       	pop	r10
    1f50:	9f 90       	pop	r9
    1f52:	8f 90       	pop	r8
    1f54:	7f 90       	pop	r7
    1f56:	6f 90       	pop	r6
    1f58:	08 95       	ret

00001f5a <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1f5a:	2f 92       	push	r2
    1f5c:	3f 92       	push	r3
    1f5e:	4f 92       	push	r4
    1f60:	5f 92       	push	r5
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	d8 2e       	mov	r13, r24
    1f80:	c6 2e       	mov	r12, r22
    1f82:	44 2e       	mov	r4, r20
    1f84:	32 2e       	mov	r3, r18
    1f86:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1f88:	00 e0       	ldi	r16, 0x00	; 0
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	a8 2e       	mov	r10, r24
    1f8e:	bb 24       	eor	r11, r11
    1f90:	35 01       	movw	r6, r10
    1f92:	64 0e       	add	r6, r20
    1f94:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    1f96:	e6 2e       	mov	r14, r22
    1f98:	ff 24       	eor	r15, r15
    1f9a:	47 01       	movw	r8, r14
    1f9c:	82 0e       	add	r8, r18
    1f9e:	91 1c       	adc	r9, r1
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <glcd_fill_rect+0x70>
    1fa2:	c0 e0       	ldi	r28, 0x00	; 0
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    1fa6:	5d 2c       	mov	r5, r13
    1fa8:	50 0e       	add	r5, r16
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <glcd_fill_rect+0x60>
    1fac:	6c 2d       	mov	r22, r12
    1fae:	6c 0f       	add	r22, r28
    1fb0:	85 2d       	mov	r24, r5
    1fb2:	42 2d       	mov	r20, r2
    1fb4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
    1fb8:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    1fba:	ce 01       	movw	r24, r28
    1fbc:	8e 0d       	add	r24, r14
    1fbe:	9f 1d       	adc	r25, r15
    1fc0:	88 15       	cp	r24, r8
    1fc2:	99 05       	cpc	r25, r9
    1fc4:	9c f3       	brlt	.-26     	; 0x1fac <glcd_fill_rect+0x52>
    1fc6:	0f 5f       	subi	r16, 0xFF	; 255
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1fca:	c8 01       	movw	r24, r16
    1fcc:	8a 0d       	add	r24, r10
    1fce:	9b 1d       	adc	r25, r11
    1fd0:	86 15       	cp	r24, r6
    1fd2:	97 05       	cpc	r25, r7
    1fd4:	34 f3       	brlt	.-52     	; 0x1fa2 <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1fd6:	4d 2d       	mov	r20, r13
    1fd8:	41 50       	subi	r20, 0x01	; 1
    1fda:	44 0d       	add	r20, r4
    1fdc:	2c 2d       	mov	r18, r12
    1fde:	21 50       	subi	r18, 0x01	; 1
    1fe0:	23 0d       	add	r18, r3
    1fe2:	8d 2d       	mov	r24, r13
    1fe4:	6c 2d       	mov	r22, r12
    1fe6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	7f 90       	pop	r7
    2004:	6f 90       	pop	r6
    2006:	5f 90       	pop	r5
    2008:	4f 90       	pop	r4
    200a:	3f 90       	pop	r3
    200c:	2f 90       	pop	r2
    200e:	08 95       	ret

00002010 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	f8 2e       	mov	r15, r24
    2024:	e6 2e       	mov	r14, r22
    2026:	d4 2e       	mov	r13, r20
    2028:	12 2f       	mov	r17, r18
    202a:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    202c:	aa 24       	eor	r10, r10
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	26 1b       	sub	r18, r22
    2032:	31 09       	sbc	r19, r1
    2034:	37 ff       	sbrs	r19, 7
    2036:	03 c0       	rjmp	.+6      	; 0x203e <glcd_draw_line+0x2e>
    2038:	30 95       	com	r19
    203a:	21 95       	neg	r18
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	8d 2d       	mov	r24, r13
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	8f 19       	sub	r24, r15
    2044:	91 09       	sbc	r25, r1
    2046:	97 ff       	sbrs	r25, 7
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <glcd_draw_line+0x40>
    204a:	90 95       	com	r25
    204c:	81 95       	neg	r24
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	82 17       	cp	r24, r18
    2052:	93 07       	cpc	r25, r19
    2054:	44 f4       	brge	.+16     	; 0x2066 <glcd_draw_line+0x56>
    2056:	aa 24       	eor	r10, r10
    2058:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    205a:	8e 2d       	mov	r24, r14
    205c:	ef 2c       	mov	r14, r15
    205e:	f8 2e       	mov	r15, r24
    2060:	81 2f       	mov	r24, r17
    2062:	1d 2d       	mov	r17, r13
    2064:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    2066:	df 14       	cp	r13, r15
    2068:	30 f4       	brcc	.+12     	; 0x2076 <glcd_draw_line+0x66>
    206a:	8d 2d       	mov	r24, r13
    206c:	df 2c       	mov	r13, r15
    206e:	f8 2e       	mov	r15, r24
    2070:	81 2f       	mov	r24, r17
    2072:	1e 2d       	mov	r17, r14
    2074:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    2076:	8f 2d       	mov	r24, r15
    2078:	6e 2d       	mov	r22, r14
    207a:	4d 2d       	mov	r20, r13
    207c:	21 2f       	mov	r18, r17
    207e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>

	dx = x1 - x0;
    2082:	cd 2c       	mov	r12, r13
    2084:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    2086:	81 2f       	mov	r24, r17
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	8e 19       	sub	r24, r14
    208c:	91 09       	sbc	r25, r1
    208e:	97 ff       	sbrs	r25, 7
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <glcd_draw_line+0x88>
    2092:	90 95       	com	r25
    2094:	81 95       	neg	r24
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    209a:	e1 16       	cp	r14, r17
    209c:	10 f0       	brcs	.+4      	; 0x20a2 <glcd_draw_line+0x92>
    209e:	0f ef       	ldi	r16, 0xFF	; 255
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <glcd_draw_line+0x94>
    20a2:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    20a4:	1c 2d       	mov	r17, r12
    20a6:	16 95       	lsr	r17
    20a8:	10 c0       	rjmp	.+32     	; 0x20ca <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    20aa:	aa 20       	and	r10, r10
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    20ae:	8e 2d       	mov	r24, r14
    20b0:	6f 2d       	mov	r22, r15
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    20b4:	8f 2d       	mov	r24, r15
    20b6:	6e 2d       	mov	r22, r14
    20b8:	49 2d       	mov	r20, r9
    20ba:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
		}
		err -= dy;
    20be:	1b 19       	sub	r17, r11
		if (err < 0) {
    20c0:	17 ff       	sbrs	r17, 7
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <glcd_draw_line+0xb8>
			y0 += ystep;
    20c4:	e0 0e       	add	r14, r16
			err += dx;
    20c6:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    20c8:	f3 94       	inc	r15
    20ca:	df 14       	cp	r13, r15
    20cc:	70 f7       	brcc	.-36     	; 0x20aa <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	bf 90       	pop	r11
    20dc:	af 90       	pop	r10
    20de:	9f 90       	pop	r9
    20e0:	08 95       	ret

000020e2 <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	e8 2e       	mov	r14, r24
    20f0:	d6 2e       	mov	r13, r22
    20f2:	14 2f       	mov	r17, r20
    20f4:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    20f6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    20fa:	1e 0d       	add	r17, r14
    20fc:	fd 0c       	add	r15, r13
    20fe:	8e 2d       	mov	r24, r14
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	6f 2d       	mov	r22, r15
    2104:	41 2f       	mov	r20, r17
    2106:	2f 2d       	mov	r18, r15
    2108:	0e 94 08 10 	call	0x2010	; 0x2010 <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    210c:	d3 94       	inc	r13
    210e:	81 2f       	mov	r24, r17
    2110:	6d 2d       	mov	r22, r13
    2112:	41 2f       	mov	r20, r17
    2114:	2f 2d       	mov	r18, r15
    2116:	0e 94 08 10 	call	0x2010	; 0x2010 <glcd_draw_line>
}
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	08 95       	ret

00002128 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    2128:	88 e4       	ldi	r24, 0x48	; 72
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <glcd_draw_bitmap>
	glcd_write();	
    2130:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
	while (1) {
		DEMO_RETURN();
    2134:	80 91 90 01 	lds	r24, 0x0190
    2138:	88 23       	and	r24, r24
    213a:	e1 f3       	breq	.-8      	; 0x2134 <glcd_test_bitmap_128x64+0xc>
    213c:	10 92 90 01 	sts	0x0190, r1
	}
}
    2140:	08 95       	ret

00002142 <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
	glcd_clear();
    214a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
	glcd_write();
    214e:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2152:	40 c0       	rjmp	.+128    	; 0x21d4 <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	42 e3       	ldi	r20, 0x32	; 50
    215a:	22 e3       	ldi	r18, 0x32	; 50
    215c:	0c 2f       	mov	r16, r28
    215e:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2162:	8c e3       	ldi	r24, 0x3C	; 60
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	42 e3       	ldi	r20, 0x32	; 50
    2168:	2e e1       	ldi	r18, 0x1E	; 30
    216a:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    216e:	8c e3       	ldi	r24, 0x3C	; 60
    2170:	63 e2       	ldi	r22, 0x23	; 35
    2172:	4c e3       	ldi	r20, 0x3C	; 60
    2174:	24 e1       	ldi	r18, 0x14	; 20
    2176:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    217a:	80 91 90 01 	lds	r24, 0x0190
    217e:	88 23       	and	r24, r24
    2180:	f9 f4       	brne	.+62     	; 0x21c0 <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    2182:	64 96       	adiw	r28, 0x14	; 20
    2184:	cf 3f       	cpi	r28, 0xFF	; 255
    2186:	d1 05       	cpc	r29, r1
    2188:	29 f3       	breq	.-54     	; 0x2154 <glcd_test_scrolling_graph+0x12>
    218a:	20 f3       	brcs	.-56     	; 0x2154 <glcd_test_scrolling_graph+0x12>
    218c:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    218e:	01 2f       	mov	r16, r17
    2190:	00 95       	com	r16
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	42 e3       	ldi	r20, 0x32	; 50
    2198:	22 e3       	ldi	r18, 0x32	; 50
    219a:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    219e:	8c e3       	ldi	r24, 0x3C	; 60
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	42 e3       	ldi	r20, 0x32	; 50
    21a4:	2e e1       	ldi	r18, 0x1E	; 30
    21a6:	01 2f       	mov	r16, r17
    21a8:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    21ac:	8c e3       	ldi	r24, 0x3C	; 60
    21ae:	63 e2       	ldi	r22, 0x23	; 35
    21b0:	4c e3       	ldi	r20, 0x3C	; 60
    21b2:	24 e1       	ldi	r18, 0x14	; 20
    21b4:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    21b8:	80 91 90 01 	lds	r24, 0x0190
    21bc:	88 23       	and	r24, r24
    21be:	39 f0       	breq	.+14     	; 0x21ce <glcd_test_scrolling_graph+0x8c>
    21c0:	10 92 90 01 	sts	0x0190, r1
		}
	}	
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    21ce:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    21d0:	14 30       	cpi	r17, 0x04	; 4
    21d2:	e9 f6       	brne	.-70     	; 0x218e <glcd_test_scrolling_graph+0x4c>
    21d4:	c0 e0       	ldi	r28, 0x00	; 0
    21d6:	d0 e0       	ldi	r29, 0x00	; 0
    21d8:	d5 cf       	rjmp	.-86     	; 0x2184 <glcd_test_scrolling_graph+0x42>

000021da <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    21da:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    21dc:	80 eb       	ldi	r24, 0xB0	; 176
    21de:	97 e0       	ldi	r25, 0x07	; 7
    21e0:	65 e0       	ldi	r22, 0x05	; 5
    21e2:	47 e0       	ldi	r20, 0x07	; 7
    21e4:	20 e2       	ldi	r18, 0x20	; 32
    21e6:	0f e7       	ldi	r16, 0x7F	; 127
    21e8:	0e 94 b0 13 	call	0x2760	; 0x2760 <glcd_tiny_set_font>
	glcd_clear_buffer();
    21ec:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	4a e2       	ldi	r20, 0x2A	; 42
    21f6:	51 e0       	ldi	r21, 0x01	; 1
    21f8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
	glcd_write();
    21fc:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
	while(1) {
		DEMO_RETURN();
    2200:	80 91 90 01 	lds	r24, 0x0190
    2204:	88 23       	and	r24, r24
    2206:	e1 f3       	breq	.-8      	; 0x2200 <glcd_test_hello_world+0x26>
    2208:	10 92 90 01 	sts	0x0190, r1
	}
}
    220c:	0f 91       	pop	r16
    220e:	08 95       	ret

00002210 <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2210:	cf 92       	push	r12
    2212:	ef 92       	push	r14
    2214:	0f 93       	push	r16
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    221a:	80 eb       	ldi	r24, 0xB0	; 176
    221c:	97 e0       	ldi	r25, 0x07	; 7
    221e:	65 e0       	ldi	r22, 0x05	; 5
    2220:	47 e0       	ldi	r20, 0x07	; 7
    2222:	20 e2       	ldi	r18, 0x20	; 32
    2224:	0f e7       	ldi	r16, 0x7F	; 127
    2226:	0e 94 b0 13 	call	0x2760	; 0x2760 <glcd_tiny_set_font>
	glcd_clear_buffer();
    222a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	47 e3       	ldi	r20, 0x37	; 55
    2234:	51 e0       	ldi	r21, 0x01	; 1
    2236:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
	glcd_write();
    223a:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    223e:	80 ed       	ldi	r24, 0xD0	; 208
    2240:	97 e0       	ldi	r25, 0x07	; 7
    2242:	20 e9       	ldi	r18, 0x90	; 144
    2244:	31 e0       	ldi	r19, 0x01	; 1
    2246:	f9 01       	movw	r30, r18
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	d9 f7       	brne	.-10     	; 0x2246 <glcd_test_rectangles+0x36>
    2250:	c0 e9       	ldi	r28, 0x90	; 144
    2252:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    2254:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	44 e6       	ldi	r20, 0x64	; 100
    225e:	22 e3       	ldi	r18, 0x32	; 50
    2260:	01 e0       	ldi	r16, 0x01	; 1
    2262:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	69 e0       	ldi	r22, 0x09	; 9
    226a:	46 e4       	ldi	r20, 0x46	; 70
    226c:	51 e0       	ldi	r21, 0x01	; 1
    226e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
		glcd_write();
    2272:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2276:	88 e8       	ldi	r24, 0x88	; 136
    2278:	93 e1       	ldi	r25, 0x13	; 19
    227a:	fe 01       	movw	r30, r28
    227c:	31 97       	sbiw	r30, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	d9 f7       	brne	.-10     	; 0x227a <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2284:	80 91 90 01 	lds	r24, 0x0190
    2288:	88 23       	and	r24, r24
    228a:	09 f0       	breq	.+2      	; 0x228e <glcd_test_rectangles+0x7e>
    228c:	85 c0       	rjmp	.+266    	; 0x2398 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    228e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	69 e0       	ldi	r22, 0x09	; 9
    2296:	45 e5       	ldi	r20, 0x55	; 85
    2298:	51 e0       	ldi	r21, 0x01	; 1
    229a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
		glcd_write();
    229e:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    22a2:	85 e0       	ldi	r24, 0x05	; 5
    22a4:	65 e0       	ldi	r22, 0x05	; 5
    22a6:	40 e5       	ldi	r20, 0x50	; 80
    22a8:	2e e1       	ldi	r18, 0x1E	; 30
    22aa:	03 e0       	ldi	r16, 0x03	; 3
    22ac:	56 e0       	ldi	r21, 0x06	; 6
    22ae:	e5 2e       	mov	r14, r21
    22b0:	cc 24       	eor	r12, r12
    22b2:	c3 94       	inc	r12
    22b4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <glcd_draw_rect_thick>
		glcd_write();
    22b8:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    22bc:	88 e8       	ldi	r24, 0x88	; 136
    22be:	93 e1       	ldi	r25, 0x13	; 19
    22c0:	fe 01       	movw	r30, r28
    22c2:	31 97       	sbiw	r30, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	d9 f7       	brne	.-10     	; 0x22c0 <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    22ca:	80 91 90 01 	lds	r24, 0x0190
    22ce:	88 23       	and	r24, r24
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <glcd_test_rectangles+0xc4>
    22d2:	62 c0       	rjmp	.+196    	; 0x2398 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	44 e1       	ldi	r20, 0x14	; 20
    22da:	24 e1       	ldi	r18, 0x14	; 20
    22dc:	02 e0       	ldi	r16, 0x02	; 2
    22de:	32 e0       	ldi	r19, 0x02	; 2
    22e0:	e3 2e       	mov	r14, r19
    22e2:	cc 24       	eor	r12, r12
    22e4:	c3 94       	inc	r12
    22e6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <glcd_draw_rect_thick>
		glcd_write();
    22ea:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    22ee:	88 e8       	ldi	r24, 0x88	; 136
    22f0:	93 e1       	ldi	r25, 0x13	; 19
    22f2:	fe 01       	movw	r30, r28
    22f4:	31 97       	sbiw	r30, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	d9 f7       	brne	.-10     	; 0x22f2 <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    22fc:	80 91 90 01 	lds	r24, 0x0190
    2300:	88 23       	and	r24, r24
    2302:	09 f0       	breq	.+2      	; 0x2306 <glcd_test_rectangles+0xf6>
    2304:	49 c0       	rjmp	.+146    	; 0x2398 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2306:	84 e6       	ldi	r24, 0x64	; 100
    2308:	6a e0       	ldi	r22, 0x0A	; 10
    230a:	44 e1       	ldi	r20, 0x14	; 20
    230c:	24 e1       	ldi	r18, 0x14	; 20
    230e:	05 e0       	ldi	r16, 0x05	; 5
    2310:	95 e0       	ldi	r25, 0x05	; 5
    2312:	e9 2e       	mov	r14, r25
    2314:	cc 24       	eor	r12, r12
    2316:	c3 94       	inc	r12
    2318:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <glcd_draw_rect_thick>
		glcd_write();
    231c:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2320:	88 e8       	ldi	r24, 0x88	; 136
    2322:	93 e1       	ldi	r25, 0x13	; 19
    2324:	fe 01       	movw	r30, r28
    2326:	31 97       	sbiw	r30, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	d9 f7       	brne	.-10     	; 0x2324 <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    232e:	80 91 90 01 	lds	r24, 0x0190
    2332:	88 23       	and	r24, r24
    2334:	89 f5       	brne	.+98     	; 0x2398 <glcd_test_rectangles+0x188>

		glcd_clear();
    2336:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	69 e0       	ldi	r22, 0x09	; 9
    233e:	4a e6       	ldi	r20, 0x6A	; 106
    2340:	51 e0       	ldi	r21, 0x01	; 1
    2342:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	4d e2       	ldi	r20, 0x2D	; 45
    234c:	2e e1       	ldi	r18, 0x1E	; 30
    234e:	01 e0       	ldi	r16, 0x01	; 1
    2350:	0e 94 71 10 	call	0x20e2	; 0x20e2 <glcd_draw_rect_shadow>
		glcd_write();
    2354:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2358:	88 e8       	ldi	r24, 0x88	; 136
    235a:	93 e1       	ldi	r25, 0x13	; 19
    235c:	fe 01       	movw	r30, r28
    235e:	31 97       	sbiw	r30, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2364:	d9 f7       	brne	.-10     	; 0x235c <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    2366:	80 91 90 01 	lds	r24, 0x0190
    236a:	88 23       	and	r24, r24
    236c:	a9 f4       	brne	.+42     	; 0x2398 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    236e:	8f e5       	ldi	r24, 0x5F	; 95
    2370:	65 e0       	ldi	r22, 0x05	; 5
    2372:	4e e1       	ldi	r20, 0x1E	; 30
    2374:	2e e1       	ldi	r18, 0x1E	; 30
    2376:	01 e0       	ldi	r16, 0x01	; 1
    2378:	0e 94 71 10 	call	0x20e2	; 0x20e2 <glcd_draw_rect_shadow>
		glcd_write();
    237c:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2380:	88 e8       	ldi	r24, 0x88	; 136
    2382:	93 e1       	ldi	r25, 0x13	; 19
    2384:	fe 01       	movw	r30, r28
    2386:	31 97       	sbiw	r30, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	d9 f7       	brne	.-10     	; 0x2384 <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    238e:	80 91 90 01 	lds	r24, 0x0190
    2392:	88 23       	and	r24, r24
    2394:	09 f4       	brne	.+2      	; 0x2398 <glcd_test_rectangles+0x188>
    2396:	5e cf       	rjmp	.-324    	; 0x2254 <glcd_test_rectangles+0x44>
    2398:	10 92 90 01 	sts	0x0190, r1
		
	}
	
}
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	0f 91       	pop	r16
    23a2:	ef 90       	pop	r14
    23a4:	cf 90       	pop	r12
    23a6:	08 95       	ret

000023a8 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	2f 97       	sbiw	r28, 0x0f	; 15
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    23ca:	80 eb       	ldi	r24, 0xB0	; 176
    23cc:	97 e0       	ldi	r25, 0x07	; 7
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	47 e0       	ldi	r20, 0x07	; 7
    23d2:	20 e2       	ldi	r18, 0x20	; 32
    23d4:	0f e7       	ldi	r16, 0x7F	; 127
    23d6:	0e 94 b0 13 	call	0x2760	; 0x2760 <glcd_tiny_set_font>
    23da:	00 e2       	ldi	r16, 0x20	; 32
    23dc:	7e 01       	movw	r14, r28
    23de:	08 94       	sec
    23e0:	e1 1c       	adc	r14, r1
    23e2:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    23e4:	7f e0       	ldi	r23, 0x0F	; 15
    23e6:	a7 2e       	mov	r10, r23
    23e8:	b1 2c       	mov	r11, r1
    23ea:	ac 0e       	add	r10, r28
    23ec:	bd 1e       	adc	r11, r29
    23ee:	60 e9       	ldi	r22, 0x90	; 144
    23f0:	c6 2e       	mov	r12, r22
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    23f6:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    23f8:	00 83       	st	Z, r16
			c++;
    23fa:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    23fc:	07 fd       	sbrc	r16, 7
    23fe:	00 e2       	ldi	r16, 0x20	; 32
    2400:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2402:	ea 15       	cp	r30, r10
    2404:	fb 05       	cpc	r31, r11
    2406:	c1 f7       	brne	.-16     	; 0x23f8 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2408:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    240a:	c7 01       	movw	r24, r14
    240c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2410:	80 91 90 01 	lds	r24, 0x0190
    2414:	88 23       	and	r24, r24
    2416:	91 f0       	breq	.+36     	; 0x243c <glcd_test_tiny_text+0x94>
    2418:	10 92 90 01 	sts	0x0190, r1
		
		delay_ms(1000);
	}

}
    241c:	2f 96       	adiw	r28, 0x0f	; 15
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    243c:	80 e1       	ldi	r24, 0x10	; 16
    243e:	97 e2       	ldi	r25, 0x27	; 39
    2440:	f6 01       	movw	r30, r12
    2442:	31 97       	sbiw	r30, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	d9 f7       	brne	.-10     	; 0x2440 <glcd_test_tiny_text+0x98>
    244a:	d5 cf       	rjmp	.-86     	; 0x23f6 <glcd_test_tiny_text+0x4e>

0000244c <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2454:	80 e9       	ldi	r24, 0x90	; 144
    2456:	99 e0       	ldi	r25, 0x09	; 9
    2458:	6f e0       	ldi	r22, 0x0F	; 15
    245a:	45 e1       	ldi	r20, 0x15	; 21
    245c:	2e e2       	ldi	r18, 0x2E	; 46
    245e:	09 e3       	ldi	r16, 0x39	; 57
    2460:	0e 94 40 0a 	call	0x1480	; 0x1480 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    2464:	1e e2       	ldi	r17, 0x2E	; 46
    2466:	80 91 9b 03 	lds	r24, 0x039B
    246a:	18 1b       	sub	r17, r24
    246c:	00 e0       	ldi	r16, 0x00	; 0
    246e:	c0 e9       	ldi	r28, 0x90	; 144
    2470:	d1 e0       	ldi	r29, 0x01	; 1
    2472:	16 c0       	rjmp	.+44     	; 0x24a0 <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    2474:	80 91 90 01 	lds	r24, 0x0190
    2478:	88 23       	and	r24, r24
    247a:	d1 f4       	brne	.+52     	; 0x24b0 <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    247c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	60 2f       	mov	r22, r16
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	51 e0       	ldi	r21, 0x01	; 1
    2488:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
			glcd_write();
    248c:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	fe 01       	movw	r30, r28
    2496:	31 97       	sbiw	r30, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	d9 f7       	brne	.-10     	; 0x2494 <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    249e:	0f 5f       	subi	r16, 0xFF	; 255
    24a0:	01 17       	cp	r16, r17
    24a2:	40 f3       	brcs	.-48     	; 0x2474 <glcd_test_text_up_down+0x28>
    24a4:	01 2f       	mov	r16, r17
    24a6:	1d c0       	rjmp	.+58     	; 0x24e2 <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    24a8:	80 91 90 01 	lds	r24, 0x0190
    24ac:	88 23       	and	r24, r24
    24ae:	39 f0       	breq	.+14     	; 0x24be <glcd_test_text_up_down+0x72>
    24b0:	10 92 90 01 	sts	0x0190, r1
			delay_ms(80);
		}
		
	}

}
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    24be:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	60 2f       	mov	r22, r16
    24c6:	44 e8       	ldi	r20, 0x84	; 132
    24c8:	51 e0       	ldi	r21, 0x01	; 1
    24ca:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
			glcd_write();
    24ce:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    24d2:	80 e2       	ldi	r24, 0x20	; 32
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	fe 01       	movw	r30, r28
    24d8:	31 97       	sbiw	r30, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	d9 f7       	brne	.-10     	; 0x24d6 <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    24e0:	01 50       	subi	r16, 0x01	; 1
    24e2:	00 23       	and	r16, r16
    24e4:	09 f7       	brne	.-62     	; 0x24a8 <glcd_test_text_up_down+0x5c>
    24e6:	dc cf       	rjmp	.-72     	; 0x24a0 <glcd_test_text_up_down+0x54>

000024e8 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	0f 93       	push	r16
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	28 97       	sbiw	r28, 0x08	; 8
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	1a 82       	std	Y+2, r1	; 0x02
    2510:	1b 82       	std	Y+3, r1	; 0x03
    2512:	1c 82       	std	Y+4, r1	; 0x04
    2514:	1d 82       	std	Y+5, r1	; 0x05
    2516:	1e 82       	std	Y+6, r1	; 0x06
    2518:	1f 82       	std	Y+7, r1	; 0x07
    251a:	18 86       	std	Y+8, r1	; 0x08
    251c:	cc 24       	eor	r12, r12
    251e:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2520:	5e 01       	movw	r10, r28
    2522:	08 94       	sec
    2524:	a1 1c       	adc	r10, r1
    2526:	b1 1c       	adc	r11, r1
    2528:	f8 e8       	ldi	r31, 0x88	; 136
    252a:	8f 2e       	mov	r8, r31
    252c:	f1 e0       	ldi	r31, 0x01	; 1
    252e:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2530:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    2534:	88 e4       	ldi	r24, 0x48	; 72
    2536:	96 e0       	ldi	r25, 0x06	; 6
    2538:	6c e0       	ldi	r22, 0x0C	; 12
    253a:	43 e1       	ldi	r20, 0x13	; 19
    253c:	20 e3       	ldi	r18, 0x30	; 48
    253e:	09 e3       	ldi	r16, 0x39	; 57
    2540:	e2 e0       	ldi	r30, 0x02	; 2
    2542:	ee 2e       	mov	r14, r30
    2544:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <glcd_font>

		sprintf(string,"%d",count);
    2548:	00 d0       	rcall	.+0      	; 0x254a <glcd_test_glcdutils+0x62>
    254a:	00 d0       	rcall	.+0      	; 0x254c <glcd_test_glcdutils+0x64>
    254c:	00 d0       	rcall	.+0      	; 0x254e <glcd_test_glcdutils+0x66>
    254e:	ed b7       	in	r30, 0x3d	; 61
    2550:	fe b7       	in	r31, 0x3e	; 62
    2552:	31 96       	adiw	r30, 0x01	; 1
    2554:	ad b7       	in	r26, 0x3d	; 61
    2556:	be b7       	in	r27, 0x3e	; 62
    2558:	12 96       	adiw	r26, 0x02	; 2
    255a:	bc 92       	st	X, r11
    255c:	ae 92       	st	-X, r10
    255e:	11 97       	sbiw	r26, 0x01	; 1
    2560:	93 82       	std	Z+3, r9	; 0x03
    2562:	82 82       	std	Z+2, r8	; 0x02
    2564:	d5 82       	std	Z+5, r13	; 0x05
    2566:	c4 82       	std	Z+4, r12	; 0x04
    2568:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sprintf>
		glcd_draw_string_xy(0,0,string);
    256c:	8d b7       	in	r24, 0x3d	; 61
    256e:	9e b7       	in	r25, 0x3e	; 62
    2570:	06 96       	adiw	r24, 0x06	; 6
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	9e bf       	out	0x3e, r25	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	8d bf       	out	0x3d, r24	; 61
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	a5 01       	movw	r20, r10
    2582:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
		glcd_write();
    2586:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
		
		count += 1;
    258a:	08 94       	sec
    258c:	c1 1c       	adc	r12, r1
    258e:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    2590:	80 91 90 01 	lds	r24, 0x0190
    2594:	88 23       	and	r24, r24
    2596:	61 f2       	breq	.-104    	; 0x2530 <glcd_test_glcdutils+0x48>
    2598:	10 92 90 01 	sts	0x0190, r1
	}
}
    259c:	28 96       	adiw	r28, 0x08	; 8
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	0f 91       	pop	r16
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	08 95       	ret

000025be <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    25be:	8f 92       	push	r8
    25c0:	9f 92       	push	r9
    25c2:	af 92       	push	r10
    25c4:	bf 92       	push	r11
    25c6:	df 92       	push	r13
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	28 97       	sbiw	r28, 0x08	; 8
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    25e4:	19 82       	std	Y+1, r1	; 0x01
    25e6:	1a 82       	std	Y+2, r1	; 0x02
    25e8:	1b 82       	std	Y+3, r1	; 0x03
    25ea:	1c 82       	std	Y+4, r1	; 0x04
    25ec:	1d 82       	std	Y+5, r1	; 0x05
    25ee:	1e 82       	std	Y+6, r1	; 0x06
    25f0:	1f 82       	std	Y+7, r1	; 0x07
    25f2:	18 86       	std	Y+8, r1	; 0x08
    25f4:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    25f6:	5e 01       	movw	r10, r28
    25f8:	08 94       	sec
    25fa:	a1 1c       	adc	r10, r1
    25fc:	b1 1c       	adc	r11, r1
    25fe:	18 e8       	ldi	r17, 0x88	; 136
    2600:	81 2e       	mov	r8, r17
    2602:	11 e0       	ldi	r17, 0x01	; 1
    2604:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2606:	0e 94 bd 07 	call	0xf7a	; 0xf7a <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    260a:	80 e9       	ldi	r24, 0x90	; 144
    260c:	99 e0       	ldi	r25, 0x09	; 9
    260e:	6f e0       	ldi	r22, 0x0F	; 15
    2610:	45 e1       	ldi	r20, 0x15	; 21
    2612:	2e e2       	ldi	r18, 0x2E	; 46
    2614:	09 e3       	ldi	r16, 0x39	; 57
    2616:	0e 94 40 0a 	call	0x1480	; 0x1480 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    261a:	ed 2c       	mov	r14, r13
    261c:	ff 24       	eor	r15, r15
    261e:	00 d0       	rcall	.+0      	; 0x2620 <glcd_test_counter_and_graph+0x62>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <glcd_test_counter_and_graph+0x64>
    2622:	00 d0       	rcall	.+0      	; 0x2624 <glcd_test_counter_and_graph+0x66>
    2624:	ed b7       	in	r30, 0x3d	; 61
    2626:	fe b7       	in	r31, 0x3e	; 62
    2628:	31 96       	adiw	r30, 0x01	; 1
    262a:	ad b7       	in	r26, 0x3d	; 61
    262c:	be b7       	in	r27, 0x3e	; 62
    262e:	12 96       	adiw	r26, 0x02	; 2
    2630:	bc 92       	st	X, r11
    2632:	ae 92       	st	-X, r10
    2634:	11 97       	sbiw	r26, 0x01	; 1
    2636:	93 82       	std	Z+3, r9	; 0x03
    2638:	82 82       	std	Z+2, r8	; 0x02
    263a:	f5 82       	std	Z+5, r15	; 0x05
    263c:	e4 82       	std	Z+4, r14	; 0x04
    263e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sprintf>
		glcd_draw_string_xy(0,0,string);
    2642:	8d b7       	in	r24, 0x3d	; 61
    2644:	9e b7       	in	r25, 0x3e	; 62
    2646:	06 96       	adiw	r24, 0x06	; 6
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	9e bf       	out	0x3e, r25	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	8d bf       	out	0x3d, r24	; 61
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	a5 01       	movw	r20, r10
    2658:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    265c:	87 01       	movw	r16, r14
    265e:	00 0f       	add	r16, r16
    2660:	11 1f       	adc	r17, r17
    2662:	00 0f       	add	r16, r16
    2664:	11 1f       	adc	r17, r17
    2666:	8a e0       	ldi	r24, 0x0A	; 10
    2668:	66 e2       	ldi	r22, 0x26	; 38
    266a:	4e e1       	ldi	r20, 0x1E	; 30
    266c:	26 e0       	ldi	r18, 0x06	; 6
    266e:	0e 94 17 0a 	call	0x142e	; 0x142e <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    2672:	ee 0c       	add	r14, r14
    2674:	ff 1c       	adc	r15, r15
    2676:	86 e4       	ldi	r24, 0x46	; 70
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	48 e0       	ldi	r20, 0x08	; 8
    267c:	2e e1       	ldi	r18, 0x1E	; 30
    267e:	0e 2d       	mov	r16, r14
    2680:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <glcd_bar_graph_vertical>

		glcd_write();
    2684:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
		count += 1;
    2688:	d3 94       	inc	r13

		DEMO_RETURN();
    268a:	80 91 90 01 	lds	r24, 0x0190
    268e:	88 23       	and	r24, r24
    2690:	09 f4       	brne	.+2      	; 0x2694 <glcd_test_counter_and_graph+0xd6>
    2692:	b9 cf       	rjmp	.-142    	; 0x2606 <glcd_test_counter_and_graph+0x48>
    2694:	10 92 90 01 	sts	0x0190, r1
	}

}
    2698:	28 96       	adiw	r28, 0x08	; 8
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	1f 91       	pop	r17
    26aa:	0f 91       	pop	r16
    26ac:	ff 90       	pop	r15
    26ae:	ef 90       	pop	r14
    26b0:	df 90       	pop	r13
    26b2:	bf 90       	pop	r11
    26b4:	af 90       	pop	r10
    26b6:	9f 90       	pop	r9
    26b8:	8f 90       	pop	r8
    26ba:	08 95       	ret

000026bc <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	00 e4       	ldi	r16, 0x40	; 64
    26ce:	c0 2e       	mov	r12, r16
    26d0:	0f e1       	ldi	r16, 0x1F	; 31
    26d2:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    26d4:	c0 ea       	ldi	r28, 0xA0	; 160
    26d6:	df e0       	ldi	r29, 0x0F	; 15
    26d8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    26dc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <rand>
    26e0:	64 e5       	ldi	r22, 0x54	; 84
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    26e8:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    26ea:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <rand>
    26ee:	60 e3       	ldi	r22, 0x30	; 48
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    26f6:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    26f8:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <rand>
    26fc:	62 e3       	ldi	r22, 0x32	; 50
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    2704:	08 2f       	mov	r16, r24
    2706:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2708:	8e 2d       	mov	r24, r14
    270a:	6f 2d       	mov	r22, r15
    270c:	41 2f       	mov	r20, r17
    270e:	21 e0       	ldi	r18, 0x01	; 1
    2710:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <glcd_fill_circle>
			glcd_write();
    2714:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2718:	c6 01       	movw	r24, r12
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    271e:	1f 5f       	subi	r17, 0xFF	; 255
    2720:	01 17       	cp	r16, r17
    2722:	90 f7       	brcc	.-28     	; 0x2708 <glcd_test_circles+0x4c>
    2724:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    2726:	8e 2d       	mov	r24, r14
    2728:	6f 2d       	mov	r22, r15
    272a:	41 2f       	mov	r20, r17
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <glcd_fill_circle>
			glcd_write();
    2732:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
    2736:	ce 01       	movw	r24, r28
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    273c:	1f 5f       	subi	r17, 0xFF	; 255
    273e:	01 17       	cp	r16, r17
    2740:	90 f7       	brcc	.-28     	; 0x2726 <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    2742:	80 91 90 01 	lds	r24, 0x0190
    2746:	88 23       	and	r24, r24
    2748:	39 f2       	breq	.-114    	; 0x26d8 <glcd_test_circles+0x1c>
    274a:	10 92 90 01 	sts	0x0190, r1
	}
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	08 95       	ret

00002760 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    2760:	0f 93       	push	r16
	font_current.font_table = font_table;
    2762:	90 93 99 03 	sts	0x0399, r25
    2766:	80 93 98 03 	sts	0x0398, r24
	font_current.width = width;
    276a:	60 93 9a 03 	sts	0x039A, r22
	font_current.height = height;
    276e:	40 93 9b 03 	sts	0x039B, r20
	font_current.start_char = start_char;
    2772:	20 93 9c 03 	sts	0x039C, r18
	font_current.end_char = end_char;
    2776:	00 93 9d 03 	sts	0x039D, r16
	font_current.table_type = STANG;
    277a:	10 92 9e 03 	sts	0x039E, r1
}
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    2782:	bf 92       	push	r11
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	f8 2e       	mov	r15, r24
    2796:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    2798:	5f e2       	ldi	r21, 0x2F	; 47
    279a:	56 17       	cp	r21, r22
    279c:	08 f4       	brcc	.+2      	; 0x27a0 <glcd_tiny_draw_char_xy+0x1e>
    279e:	5d c0       	rjmp	.+186    	; 0x285a <glcd_tiny_draw_char_xy+0xd8>
    27a0:	80 91 9a 03 	lds	r24, 0x039A
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	8f 0d       	add	r24, r15
    27a8:	91 1d       	adc	r25, r1
    27aa:	84 35       	cpi	r24, 0x54	; 84
    27ac:	91 05       	cpc	r25, r1
    27ae:	0c f0       	brlt	.+2      	; 0x27b2 <glcd_tiny_draw_char_xy+0x30>
    27b0:	54 c0       	rjmp	.+168    	; 0x285a <glcd_tiny_draw_char_xy+0xd8>
    27b2:	80 91 9b 03 	lds	r24, 0x039B
    27b6:	88 30       	cpi	r24, 0x08	; 8
    27b8:	08 f0       	brcs	.+2      	; 0x27bc <glcd_tiny_draw_char_xy+0x3a>
    27ba:	4f c0       	rjmp	.+158    	; 0x285a <glcd_tiny_draw_char_xy+0xd8>
    27bc:	80 91 9e 03 	lds	r24, 0x039E
    27c0:	88 23       	and	r24, r24
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <glcd_tiny_draw_char_xy+0x44>
    27c4:	4a c0       	rjmp	.+148    	; 0x285a <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    27c6:	80 91 9c 03 	lds	r24, 0x039C
    27ca:	48 17       	cp	r20, r24
    27cc:	20 f0       	brcs	.+8      	; 0x27d6 <glcd_tiny_draw_char_xy+0x54>
    27ce:	80 91 9d 03 	lds	r24, 0x039D
    27d2:	84 17       	cp	r24, r20
    27d4:	08 f4       	brcc	.+2      	; 0x27d8 <glcd_tiny_draw_char_xy+0x56>
    27d6:	4e e2       	ldi	r20, 0x2E	; 46
    27d8:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    27da:	c4 2e       	mov	r12, r20
    27dc:	dd 24       	eor	r13, r13
    27de:	2f c0       	rjmp	.+94     	; 0x283e <glcd_tiny_draw_char_xy+0xbc>
    27e0:	80 91 9c 03 	lds	r24, 0x039C
    27e4:	96 01       	movw	r18, r12
    27e6:	28 1b       	sub	r18, r24
    27e8:	31 09       	sbc	r19, r1
    27ea:	84 2f       	mov	r24, r20
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	ac 01       	movw	r20, r24
    27f0:	24 9f       	mul	r18, r20
    27f2:	c0 01       	movw	r24, r0
    27f4:	25 9f       	mul	r18, r21
    27f6:	90 0d       	add	r25, r0
    27f8:	34 9f       	mul	r19, r20
    27fa:	90 0d       	add	r25, r0
    27fc:	11 24       	eor	r1, r1
    27fe:	80 0f       	add	r24, r16
    2800:	91 1d       	adc	r25, r1
    2802:	e0 91 98 03 	lds	r30, 0x0398
    2806:	f0 91 99 03 	lds	r31, 0x0399
    280a:	e8 0f       	add	r30, r24
    280c:	f9 1f       	adc	r31, r25
    280e:	e4 91       	lpm	r30, Z+
    2810:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    2812:	ce 2f       	mov	r28, r30
    2814:	d0 e0       	ldi	r29, 0x00	; 0
    2816:	0e c0       	rjmp	.+28     	; 0x2834 <glcd_tiny_draw_char_xy+0xb2>
    2818:	61 2f       	mov	r22, r17
    281a:	6e 0d       	add	r22, r14
    281c:	ae 01       	movw	r20, r28
    281e:	01 2e       	mov	r0, r17
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <glcd_tiny_draw_char_xy+0xa4>
    2822:	55 95       	asr	r21
    2824:	47 95       	ror	r20
    2826:	0a 94       	dec	r0
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <glcd_tiny_draw_char_xy+0xa0>
    282a:	41 70       	andi	r20, 0x01	; 1
    282c:	8b 2d       	mov	r24, r11
    282e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    2832:	1f 5f       	subi	r17, 0xFF	; 255
    2834:	80 91 9b 03 	lds	r24, 0x039B
    2838:	18 17       	cp	r17, r24
    283a:	70 f3       	brcs	.-36     	; 0x2818 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    283c:	0f 5f       	subi	r16, 0xFF	; 255
    283e:	b0 2e       	mov	r11, r16
    2840:	bf 0c       	add	r11, r15
    2842:	40 91 9a 03 	lds	r20, 0x039A
    2846:	04 17       	cp	r16, r20
    2848:	58 f2       	brcs	.-106    	; 0x27e0 <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    284a:	4f 0d       	add	r20, r15
    284c:	20 91 9b 03 	lds	r18, 0x039B
    2850:	2e 0d       	add	r18, r14
    2852:	8f 2d       	mov	r24, r15
    2854:	6e 2d       	mov	r22, r14
    2856:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	
}
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	bf 90       	pop	r11
    286c:	08 95       	ret

0000286e <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	08 2f       	mov	r16, r24
    2878:	26 2f       	mov	r18, r22
    287a:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    287c:	60 91 9b 03 	lds	r22, 0x039B
    2880:	68 30       	cpi	r22, 0x08	; 8
    2882:	08 f0       	brcs	.+2      	; 0x2886 <glcd_tiny_draw_char+0x18>
    2884:	6a c0       	rjmp	.+212    	; 0x295a <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    2886:	80 91 9c 03 	lds	r24, 0x039C
    288a:	48 17       	cp	r20, r24
    288c:	20 f0       	brcs	.+8      	; 0x2896 <glcd_tiny_draw_char+0x28>
    288e:	80 91 9d 03 	lds	r24, 0x039D
    2892:	84 17       	cp	r24, r20
    2894:	08 f4       	brcc	.+2      	; 0x2898 <glcd_tiny_draw_char+0x2a>
    2896:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    2898:	c2 2f       	mov	r28, r18
    289a:	d0 e0       	ldi	r29, 0x00	; 0
    289c:	e6 2f       	mov	r30, r22
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	31 96       	adiw	r30, 0x01	; 1
    28a2:	80 e3       	ldi	r24, 0x30	; 48
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	bf 01       	movw	r22, r30
    28a8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    28ac:	c6 17       	cp	r28, r22
    28ae:	d7 07       	cpc	r29, r23
    28b0:	0c f0       	brlt	.+2      	; 0x28b4 <glcd_tiny_draw_char+0x46>
    28b2:	53 c0       	rjmp	.+166    	; 0x295a <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    28b4:	40 91 9a 03 	lds	r20, 0x039A
    28b8:	84 2f       	mov	r24, r20
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	80 0f       	add	r24, r16
    28be:	91 1d       	adc	r25, r1
    28c0:	84 35       	cpi	r24, 0x54	; 84
    28c2:	91 05       	cpc	r25, r1
    28c4:	0c f0       	brlt	.+2      	; 0x28c8 <glcd_tiny_draw_char+0x5a>
    28c6:	49 c0       	rjmp	.+146    	; 0x295a <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    28c8:	ce 9f       	mul	r28, r30
    28ca:	b0 01       	movw	r22, r0
    28cc:	cf 9f       	mul	r28, r31
    28ce:	70 0d       	add	r23, r0
    28d0:	de 9f       	mul	r29, r30
    28d2:	70 0d       	add	r23, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	40 0f       	add	r20, r16
    28d8:	21 96       	adiw	r28, 0x01	; 1
    28da:	ce 9f       	mul	r28, r30
    28dc:	90 01       	movw	r18, r0
    28de:	cf 9f       	mul	r28, r31
    28e0:	30 0d       	add	r19, r0
    28e2:	de 9f       	mul	r29, r30
    28e4:	30 0d       	add	r19, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	21 97       	sbiw	r28, 0x01	; 1
    28ea:	80 2f       	mov	r24, r16
    28ec:	0e 94 3f 07 	call	0xe7e	; 0xe7e <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    28f0:	84 e5       	ldi	r24, 0x54	; 84
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	c8 9f       	mul	r28, r24
    28f6:	d0 01       	movw	r26, r0
    28f8:	c9 9f       	mul	r28, r25
    28fa:	b0 0d       	add	r27, r0
    28fc:	d8 9f       	mul	r29, r24
    28fe:	b0 0d       	add	r27, r0
    2900:	11 24       	eor	r1, r1
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	61 2f       	mov	r22, r17
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	22 c0       	rjmp	.+68     	; 0x294e <glcd_tiny_draw_char+0xe0>
    290a:	80 91 9c 03 	lds	r24, 0x039C
    290e:	9b 01       	movw	r18, r22
    2910:	28 1b       	sub	r18, r24
    2912:	31 09       	sbc	r19, r1
    2914:	89 2f       	mov	r24, r25
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	fc 01       	movw	r30, r24
    291a:	2e 9f       	mul	r18, r30
    291c:	c0 01       	movw	r24, r0
    291e:	2f 9f       	mul	r18, r31
    2920:	90 0d       	add	r25, r0
    2922:	3e 9f       	mul	r19, r30
    2924:	90 0d       	add	r25, r0
    2926:	11 24       	eor	r1, r1
    2928:	85 0f       	add	r24, r21
    292a:	91 1d       	adc	r25, r1
    292c:	e0 91 98 03 	lds	r30, 0x0398
    2930:	f0 91 99 03 	lds	r31, 0x0399
    2934:	e8 0f       	add	r30, r24
    2936:	f9 1f       	adc	r31, r25
    2938:	84 91       	lpm	r24, Z+
    293a:	e0 91 94 03 	lds	r30, 0x0394
    293e:	f0 91 95 03 	lds	r31, 0x0395
    2942:	ea 0f       	add	r30, r26
    2944:	fb 1f       	adc	r31, r27
    2946:	e4 0f       	add	r30, r20
    2948:	f1 1d       	adc	r31, r1
    294a:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    294c:	5f 5f       	subi	r21, 0xFF	; 255
    294e:	45 2f       	mov	r20, r21
    2950:	40 0f       	add	r20, r16
    2952:	90 91 9a 03 	lds	r25, 0x039A
    2956:	59 17       	cp	r21, r25
    2958:	c0 f2       	brcs	.-80     	; 0x290a <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	18 2f       	mov	r17, r24
    296e:	06 2f       	mov	r16, r22
    2970:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2972:	80 91 9b 03 	lds	r24, 0x039B
    2976:	88 30       	cpi	r24, 0x08	; 8
    2978:	20 f5       	brcc	.+72     	; 0x29c2 <glcd_tiny_draw_string_P+0x5e>
		return;
    297a:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    297c:	21 96       	adiw	r28, 0x01	; 1
    297e:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    2980:	44 23       	and	r20, r20
    2982:	f9 f0       	breq	.+62     	; 0x29c2 <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    2984:	81 2f       	mov	r24, r17
    2986:	60 2f       	mov	r22, r16
    2988:	0e 94 37 14 	call	0x286e	; 0x286e <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    298c:	80 91 9a 03 	lds	r24, 0x039A
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	18 0f       	add	r17, r24
    2994:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	81 0f       	add	r24, r17
    299a:	91 1d       	adc	r25, r1
    299c:	84 35       	cpi	r24, 0x54	; 84
    299e:	91 05       	cpc	r25, r1
    29a0:	14 f0       	brlt	.+4      	; 0x29a6 <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    29a2:	0f 5f       	subi	r16, 0xFF	; 255
    29a4:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    29a6:	20 2f       	mov	r18, r16
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	60 91 9b 03 	lds	r22, 0x039B
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	6f 5f       	subi	r22, 0xFF	; 255
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	80 e3       	ldi	r24, 0x30	; 48
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    29bc:	26 17       	cp	r18, r22
    29be:	37 07       	cpc	r19, r23
    29c0:	e4 f2       	brlt	.-72     	; 0x297a <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	18 2f       	mov	r17, r24
    29d6:	06 2f       	mov	r16, r22
    29d8:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    29da:	80 91 9b 03 	lds	r24, 0x039B
    29de:	88 30       	cpi	r24, 0x08	; 8
    29e0:	08 f1       	brcs	.+66     	; 0x2a24 <glcd_tiny_draw_string+0x58>
    29e2:	23 c0       	rjmp	.+70     	; 0x2a2a <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    29e4:	81 2f       	mov	r24, r17
    29e6:	60 2f       	mov	r22, r16
    29e8:	0e 94 37 14 	call	0x286e	; 0x286e <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    29ec:	80 91 9a 03 	lds	r24, 0x039A
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	18 0f       	add	r17, r24
    29f4:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	81 0f       	add	r24, r17
    29fa:	91 1d       	adc	r25, r1
    29fc:	84 35       	cpi	r24, 0x54	; 84
    29fe:	91 05       	cpc	r25, r1
    2a00:	14 f0       	brlt	.+4      	; 0x2a06 <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    2a02:	0f 5f       	subi	r16, 0xFF	; 255
    2a04:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2a06:	20 2f       	mov	r18, r16
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	60 91 9b 03 	lds	r22, 0x039B
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	6f 5f       	subi	r22, 0xFF	; 255
    2a12:	7f 4f       	sbci	r23, 0xFF	; 255
    2a14:	80 e3       	ldi	r24, 0x30	; 48
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__divmodhi4>
    2a1c:	26 17       	cp	r18, r22
    2a1e:	37 07       	cpc	r19, r23
    2a20:	24 f4       	brge	.+8      	; 0x2a2a <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2a22:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    2a24:	48 81       	ld	r20, Y
    2a26:	44 23       	and	r20, r20
    2a28:	e9 f6       	brne	.-70     	; 0x29e4 <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	08 95       	ret

00002a34 <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    2a34:	68 2f       	mov	r22, r24
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	83 e0       	ldi	r24, 0x03	; 3
    2a3a:	66 0f       	add	r22, r22
    2a3c:	77 1f       	adc	r23, r23
    2a3e:	8a 95       	dec	r24
    2a40:	e1 f7       	brne	.-8      	; 0x2a3a <glcd_tiny_invert_line+0x6>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	43 e5       	ldi	r20, 0x53	; 83
    2a46:	28 e0       	ldi	r18, 0x08	; 8
    2a48:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <glcd_invert_area>
}
    2a4c:	08 95       	ret

00002a4e <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2a54:	0e 94 8c 07 	call	0xf18	; 0xf18 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	65 e0       	ldi	r22, 0x05	; 5
    2a5c:	a8 01       	movw	r20, r16
    2a5e:	0e 94 b2 14 	call	0x2964	; 0x2964 <glcd_tiny_draw_string_P>
	glcd_write();
    2a62:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
}
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	08 95       	ret

00002a6c <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2a72:	0e 94 8c 07 	call	0xf18	; 0xf18 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	65 e0       	ldi	r22, 0x05	; 5
    2a7a:	a8 01       	movw	r20, r16
    2a7c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <glcd_tiny_draw_string>
	glcd_write();
    2a80:	0e 94 25 08 	call	0x104a	; 0x104a <glcd_write>
}
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <EERead1Byte>:
	
	return 0;
}


uint8_t EERead1Byte ( uint16_t u16addr ){
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
    2a8e:	18 2f       	mov	r17, r24
    2a90:	09 2f       	mov	r16, r25
	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	uint8_t u8data = 0;
	
    TWIStart();
    2a92:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWIStart>
	TWIWrite( EEWRITE );
    2a96:	80 ea       	ldi	r24, 0xA0	; 160
    2a98:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIWrite( addr_l );
    2a9c:	81 2f       	mov	r24, r17
    2a9e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIWrite( addr_h );
    2aa2:	80 2f       	mov	r24, r16
    2aa4:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
    TWIStart();
    2aa8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWIStart>
	TWIWrite( EEREAD );
    2aac:	81 ea       	ldi	r24, 0xA1	; 161
    2aae:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	u8data = TWIReadNACK();
    2ab2:	0e 94 d7 15 	call	0x2bae	; 0x2bae <TWIReadNACK>
    2ab6:	18 2f       	mov	r17, r24
    TWIStop();
    2ab8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <TWIStop>
	
    return u8data;
}
    2abc:	81 2f       	mov	r24, r17
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	08 95       	ret

00002ac4 <EERead2Bytes>:
	_delay_ms(50);								// for write
	
	return 0;
}

uint16_t EERead2Bytes ( uint16_t u16addr ){
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	8c 01       	movw	r16, r24
	
	uint16_t data_lsb, data_msb;
	
	data_lsb = EERead1Byte ( u16addr );			// read LSB register
    2acc:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <EERead1Byte>
    2ad0:	f8 2e       	mov	r15, r24
	data_msb = EERead1Byte ( u16addr + 0x01 );	// read MSB register
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <EERead1Byte>
    2ada:	38 2f       	mov	r19, r24
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	2f 0d       	add	r18, r15
    2ae0:	31 1d       	adc	r19, r1
	
    return ( data_lsb + ( data_msb << 8 ));	// 16 Bit
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	08 95       	ret

00002aec <EEWrite1Byte>:

#define EEWRITE		0b10100000
#define EEREAD		0b10100001

// 8 Bit data
uint8_t EEWrite1Byte ( uint16_t u16addr, uint8_t u8data ){
    2aec:	ff 92       	push	r15
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	18 2f       	mov	r17, r24
    2af4:	09 2f       	mov	r16, r25
    2af6:	f6 2e       	mov	r15, r22

	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	
    TWIStart();
    2af8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWIStart>
	TWIWrite( EEWRITE );  
    2afc:	80 ea       	ldi	r24, 0xA0	; 160
    2afe:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIWrite( addr_l );
    2b02:	81 2f       	mov	r24, r17
    2b04:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIWrite( addr_h );
    2b08:	80 2f       	mov	r24, r16
    2b0a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIWrite( u8data );
    2b0e:	8f 2d       	mov	r24, r15
    2b10:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWIWrite>
	TWIStop();
    2b14:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <TWIStop>
	
	return 0;
}
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	08 95       	ret

00002b22 <EEWrite2Bytes>:
	
    return u8data;
}
//
// 16 Bit data
uint8_t EEWrite2Bytes ( uint16_t u16addr, uint16_t u16data ){
    2b22:	df 92       	push	r13
    2b24:	ef 92       	push	r14
    2b26:	ff 92       	push	r15
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	7c 01       	movw	r14, r24
    2b2e:	d7 2e       	mov	r13, r23
	uint8_t data_lsb, data_msb;
	
	data_lsb = u16data;							// LSB data
	data_msb = ( u16data >> 8 );				// MSB data
	
	EEWrite1Byte ( u16addr, data_lsb );			// write LSB register
    2b30:	0e 94 76 15 	call	0x2aec	; 0x2aec <EEWrite1Byte>
    2b34:	04 ed       	ldi	r16, 0xD4	; 212
    2b36:	10 e3       	ldi	r17, 0x30	; 48
    2b38:	c8 01       	movw	r24, r16
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <EEWrite2Bytes+0x18>
	_delay_ms(50);								// for write
	EEWrite1Byte (( u16addr + 1 ),  data_msb );// Write MSB register
    2b3e:	c7 01       	movw	r24, r14
    2b40:	01 96       	adiw	r24, 0x01	; 1
    2b42:	6d 2d       	mov	r22, r13
    2b44:	0e 94 76 15 	call	0x2aec	; 0x2aec <EEWrite1Byte>
    2b48:	c8 01       	movw	r24, r16
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <EEWrite2Bytes+0x28>
	_delay_ms(50);								// for write
	
	return 0;
}
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	08 95       	ret

00002b5c <TWIInit>:
#include "twi.h"

// Initial TWI
void TWIInit ( void ){
	// set SCL to 400kHz
	TWSR = 0x00;
    2b5c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
    2b60:	8c e0       	ldi	r24, 0x0C	; 12
    2b62:	80 93 b8 00 	sts	0x00B8, r24
	// enable TWI
	TWCR = ( 1 << TWEN );
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	80 93 bc 00 	sts	0x00BC, r24
}
    2b6c:	08 95       	ret

00002b6e <TWIStart>:
//
// Start read/write
void TWIStart ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA ) | ( 1 << TWEN );
    2b6e:	84 ea       	ldi	r24, 0xA4	; 164
    2b70:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2b74:	80 91 bc 00 	lds	r24, 0x00BC
    2b78:	87 ff       	sbrs	r24, 7
    2b7a:	fc cf       	rjmp	.-8      	; 0x2b74 <TWIStart+0x6>
}
    2b7c:	08 95       	ret

00002b7e <TWIStop>:
//
// Stop read/ write
void TWIStop ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTO ) | ( 1 << TWEN );
    2b7e:	84 e9       	ldi	r24, 0x94	; 148
    2b80:	80 93 bc 00 	sts	0x00BC, r24
}
    2b84:	08 95       	ret

00002b86 <TWIWrite>:
//
// Write
void TWIWrite ( uint8_t u8data ){

	TWDR = u8data;
    2b86:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    2b8a:	84 e8       	ldi	r24, 0x84	; 132
    2b8c:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2b90:	80 91 bc 00 	lds	r24, 0x00BC
    2b94:	87 ff       	sbrs	r24, 7
    2b96:	fc cf       	rjmp	.-8      	; 0x2b90 <TWIWrite+0xa>
}
    2b98:	08 95       	ret

00002b9a <TWIReadACK>:
//
// Read
uint8_t TWIReadACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN )|( 1 << TWEA );
    2b9a:	84 ec       	ldi	r24, 0xC4	; 196
    2b9c:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2ba0:	80 91 bc 00 	lds	r24, 0x00BC
    2ba4:	87 ff       	sbrs	r24, 7
    2ba6:	fc cf       	rjmp	.-8      	; 0x2ba0 <TWIReadACK+0x6>
	return TWDR;
    2ba8:	80 91 bb 00 	lds	r24, 0x00BB
}
    2bac:	08 95       	ret

00002bae <TWIReadNACK>:
//
//
uint8_t TWIReadNACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    2bae:	84 e8       	ldi	r24, 0x84	; 132
    2bb0:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2bb4:	80 91 bc 00 	lds	r24, 0x00BC
    2bb8:	87 ff       	sbrs	r24, 7
    2bba:	fc cf       	rjmp	.-8      	; 0x2bb4 <TWIReadNACK+0x6>
	return TWDR;
    2bbc:	80 91 bb 00 	lds	r24, 0x00BB
}
    2bc0:	08 95       	ret

00002bc2 <TWIGetStatus>:
// Status
uint8_t TWIGetStatus( void ){

	uint8_t status;
	// mask status
	status = TWSR & 0xF8;
    2bc2:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
    2bc6:	88 7f       	andi	r24, 0xF8	; 248
    2bc8:	08 95       	ret

00002bca <__cmpsf2>:
    2bca:	6c d0       	rcall	.+216    	; 0x2ca4 <__fp_cmp>
    2bcc:	08 f4       	brcc	.+2      	; 0x2bd0 <__cmpsf2+0x6>
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	08 95       	ret

00002bd2 <__fixunssfsi>:
    2bd2:	94 d0       	rcall	.+296    	; 0x2cfc <__fp_splitA>
    2bd4:	88 f0       	brcs	.+34     	; 0x2bf8 <__fixunssfsi+0x26>
    2bd6:	9f 57       	subi	r25, 0x7F	; 127
    2bd8:	90 f0       	brcs	.+36     	; 0x2bfe <__fixunssfsi+0x2c>
    2bda:	b9 2f       	mov	r27, r25
    2bdc:	99 27       	eor	r25, r25
    2bde:	b7 51       	subi	r27, 0x17	; 23
    2be0:	a0 f0       	brcs	.+40     	; 0x2c0a <__fixunssfsi+0x38>
    2be2:	d1 f0       	breq	.+52     	; 0x2c18 <__fixunssfsi+0x46>
    2be4:	66 0f       	add	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	1a f0       	brmi	.+6      	; 0x2bf4 <__fixunssfsi+0x22>
    2bee:	ba 95       	dec	r27
    2bf0:	c9 f7       	brne	.-14     	; 0x2be4 <__fixunssfsi+0x12>
    2bf2:	12 c0       	rjmp	.+36     	; 0x2c18 <__fixunssfsi+0x46>
    2bf4:	b1 30       	cpi	r27, 0x01	; 1
    2bf6:	81 f0       	breq	.+32     	; 0x2c18 <__fixunssfsi+0x46>
    2bf8:	9b d0       	rcall	.+310    	; 0x2d30 <__fp_zero>
    2bfa:	b1 e0       	ldi	r27, 0x01	; 1
    2bfc:	08 95       	ret
    2bfe:	98 c0       	rjmp	.+304    	; 0x2d30 <__fp_zero>
    2c00:	67 2f       	mov	r22, r23
    2c02:	78 2f       	mov	r23, r24
    2c04:	88 27       	eor	r24, r24
    2c06:	b8 5f       	subi	r27, 0xF8	; 248
    2c08:	39 f0       	breq	.+14     	; 0x2c18 <__fixunssfsi+0x46>
    2c0a:	b9 3f       	cpi	r27, 0xF9	; 249
    2c0c:	cc f3       	brlt	.-14     	; 0x2c00 <__fixunssfsi+0x2e>
    2c0e:	86 95       	lsr	r24
    2c10:	77 95       	ror	r23
    2c12:	67 95       	ror	r22
    2c14:	b3 95       	inc	r27
    2c16:	d9 f7       	brne	.-10     	; 0x2c0e <__fixunssfsi+0x3c>
    2c18:	3e f4       	brtc	.+14     	; 0x2c28 <__fixunssfsi+0x56>
    2c1a:	90 95       	com	r25
    2c1c:	80 95       	com	r24
    2c1e:	70 95       	com	r23
    2c20:	61 95       	neg	r22
    2c22:	7f 4f       	sbci	r23, 0xFF	; 255
    2c24:	8f 4f       	sbci	r24, 0xFF	; 255
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	08 95       	ret

00002c2a <__floatunsisf>:
    2c2a:	e8 94       	clt
    2c2c:	09 c0       	rjmp	.+18     	; 0x2c40 <__floatsisf+0x12>

00002c2e <__floatsisf>:
    2c2e:	97 fb       	bst	r25, 7
    2c30:	3e f4       	brtc	.+14     	; 0x2c40 <__floatsisf+0x12>
    2c32:	90 95       	com	r25
    2c34:	80 95       	com	r24
    2c36:	70 95       	com	r23
    2c38:	61 95       	neg	r22
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c40:	99 23       	and	r25, r25
    2c42:	a9 f0       	breq	.+42     	; 0x2c6e <__floatsisf+0x40>
    2c44:	f9 2f       	mov	r31, r25
    2c46:	96 e9       	ldi	r25, 0x96	; 150
    2c48:	bb 27       	eor	r27, r27
    2c4a:	93 95       	inc	r25
    2c4c:	f6 95       	lsr	r31
    2c4e:	87 95       	ror	r24
    2c50:	77 95       	ror	r23
    2c52:	67 95       	ror	r22
    2c54:	b7 95       	ror	r27
    2c56:	f1 11       	cpse	r31, r1
    2c58:	f8 cf       	rjmp	.-16     	; 0x2c4a <__floatsisf+0x1c>
    2c5a:	fa f4       	brpl	.+62     	; 0x2c9a <__floatsisf+0x6c>
    2c5c:	bb 0f       	add	r27, r27
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <__floatsisf+0x36>
    2c60:	60 ff       	sbrs	r22, 0
    2c62:	1b c0       	rjmp	.+54     	; 0x2c9a <__floatsisf+0x6c>
    2c64:	6f 5f       	subi	r22, 0xFF	; 255
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	8f 4f       	sbci	r24, 0xFF	; 255
    2c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6c:	16 c0       	rjmp	.+44     	; 0x2c9a <__floatsisf+0x6c>
    2c6e:	88 23       	and	r24, r24
    2c70:	11 f0       	breq	.+4      	; 0x2c76 <__floatsisf+0x48>
    2c72:	96 e9       	ldi	r25, 0x96	; 150
    2c74:	11 c0       	rjmp	.+34     	; 0x2c98 <__floatsisf+0x6a>
    2c76:	77 23       	and	r23, r23
    2c78:	21 f0       	breq	.+8      	; 0x2c82 <__floatsisf+0x54>
    2c7a:	9e e8       	ldi	r25, 0x8E	; 142
    2c7c:	87 2f       	mov	r24, r23
    2c7e:	76 2f       	mov	r23, r22
    2c80:	05 c0       	rjmp	.+10     	; 0x2c8c <__floatsisf+0x5e>
    2c82:	66 23       	and	r22, r22
    2c84:	71 f0       	breq	.+28     	; 0x2ca2 <__floatsisf+0x74>
    2c86:	96 e8       	ldi	r25, 0x86	; 134
    2c88:	86 2f       	mov	r24, r22
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	2a f0       	brmi	.+10     	; 0x2c9a <__floatsisf+0x6c>
    2c90:	9a 95       	dec	r25
    2c92:	66 0f       	add	r22, r22
    2c94:	77 1f       	adc	r23, r23
    2c96:	88 1f       	adc	r24, r24
    2c98:	da f7       	brpl	.-10     	; 0x2c90 <__floatsisf+0x62>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	96 95       	lsr	r25
    2c9e:	87 95       	ror	r24
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	08 95       	ret

00002ca4 <__fp_cmp>:
    2ca4:	99 0f       	add	r25, r25
    2ca6:	00 08       	sbc	r0, r0
    2ca8:	55 0f       	add	r21, r21
    2caa:	aa 0b       	sbc	r26, r26
    2cac:	e0 e8       	ldi	r30, 0x80	; 128
    2cae:	fe ef       	ldi	r31, 0xFE	; 254
    2cb0:	16 16       	cp	r1, r22
    2cb2:	17 06       	cpc	r1, r23
    2cb4:	e8 07       	cpc	r30, r24
    2cb6:	f9 07       	cpc	r31, r25
    2cb8:	c0 f0       	brcs	.+48     	; 0x2cea <__fp_cmp+0x46>
    2cba:	12 16       	cp	r1, r18
    2cbc:	13 06       	cpc	r1, r19
    2cbe:	e4 07       	cpc	r30, r20
    2cc0:	f5 07       	cpc	r31, r21
    2cc2:	98 f0       	brcs	.+38     	; 0x2cea <__fp_cmp+0x46>
    2cc4:	62 1b       	sub	r22, r18
    2cc6:	73 0b       	sbc	r23, r19
    2cc8:	84 0b       	sbc	r24, r20
    2cca:	95 0b       	sbc	r25, r21
    2ccc:	39 f4       	brne	.+14     	; 0x2cdc <__fp_cmp+0x38>
    2cce:	0a 26       	eor	r0, r26
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <__fp_cmp+0x46>
    2cd2:	23 2b       	or	r18, r19
    2cd4:	24 2b       	or	r18, r20
    2cd6:	25 2b       	or	r18, r21
    2cd8:	21 f4       	brne	.+8      	; 0x2ce2 <__fp_cmp+0x3e>
    2cda:	08 95       	ret
    2cdc:	0a 26       	eor	r0, r26
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <__fp_cmp+0x3e>
    2ce0:	a1 40       	sbci	r26, 0x01	; 1
    2ce2:	a6 95       	lsr	r26
    2ce4:	8f ef       	ldi	r24, 0xFF	; 255
    2ce6:	81 1d       	adc	r24, r1
    2ce8:	81 1d       	adc	r24, r1
    2cea:	08 95       	ret

00002cec <__fp_split3>:
    2cec:	57 fd       	sbrc	r21, 7
    2cee:	90 58       	subi	r25, 0x80	; 128
    2cf0:	44 0f       	add	r20, r20
    2cf2:	55 1f       	adc	r21, r21
    2cf4:	59 f0       	breq	.+22     	; 0x2d0c <__fp_splitA+0x10>
    2cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf8:	71 f0       	breq	.+28     	; 0x2d16 <__fp_splitA+0x1a>
    2cfa:	47 95       	ror	r20

00002cfc <__fp_splitA>:
    2cfc:	88 0f       	add	r24, r24
    2cfe:	97 fb       	bst	r25, 7
    2d00:	99 1f       	adc	r25, r25
    2d02:	61 f0       	breq	.+24     	; 0x2d1c <__fp_splitA+0x20>
    2d04:	9f 3f       	cpi	r25, 0xFF	; 255
    2d06:	79 f0       	breq	.+30     	; 0x2d26 <__fp_splitA+0x2a>
    2d08:	87 95       	ror	r24
    2d0a:	08 95       	ret
    2d0c:	12 16       	cp	r1, r18
    2d0e:	13 06       	cpc	r1, r19
    2d10:	14 06       	cpc	r1, r20
    2d12:	55 1f       	adc	r21, r21
    2d14:	f2 cf       	rjmp	.-28     	; 0x2cfa <__fp_split3+0xe>
    2d16:	46 95       	lsr	r20
    2d18:	f1 df       	rcall	.-30     	; 0x2cfc <__fp_splitA>
    2d1a:	08 c0       	rjmp	.+16     	; 0x2d2c <__fp_splitA+0x30>
    2d1c:	16 16       	cp	r1, r22
    2d1e:	17 06       	cpc	r1, r23
    2d20:	18 06       	cpc	r1, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	f1 cf       	rjmp	.-30     	; 0x2d08 <__fp_splitA+0xc>
    2d26:	86 95       	lsr	r24
    2d28:	71 05       	cpc	r23, r1
    2d2a:	61 05       	cpc	r22, r1
    2d2c:	08 94       	sec
    2d2e:	08 95       	ret

00002d30 <__fp_zero>:
    2d30:	e8 94       	clt

00002d32 <__fp_szero>:
    2d32:	bb 27       	eor	r27, r27
    2d34:	66 27       	eor	r22, r22
    2d36:	77 27       	eor	r23, r23
    2d38:	cb 01       	movw	r24, r22
    2d3a:	97 f9       	bld	r25, 7
    2d3c:	08 95       	ret

00002d3e <__gesf2>:
    2d3e:	b2 df       	rcall	.-156    	; 0x2ca4 <__fp_cmp>
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <__gesf2+0x6>
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	08 95       	ret

00002d46 <__mulsf3>:
    2d46:	0b d0       	rcall	.+22     	; 0x2d5e <__mulsf3x>
    2d48:	78 c0       	rjmp	.+240    	; 0x2e3a <__fp_round>
    2d4a:	69 d0       	rcall	.+210    	; 0x2e1e <__fp_pscA>
    2d4c:	28 f0       	brcs	.+10     	; 0x2d58 <__mulsf3+0x12>
    2d4e:	6e d0       	rcall	.+220    	; 0x2e2c <__fp_pscB>
    2d50:	18 f0       	brcs	.+6      	; 0x2d58 <__mulsf3+0x12>
    2d52:	95 23       	and	r25, r21
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <__mulsf3+0x12>
    2d56:	5a c0       	rjmp	.+180    	; 0x2e0c <__fp_inf>
    2d58:	5f c0       	rjmp	.+190    	; 0x2e18 <__fp_nan>
    2d5a:	11 24       	eor	r1, r1
    2d5c:	ea cf       	rjmp	.-44     	; 0x2d32 <__fp_szero>

00002d5e <__mulsf3x>:
    2d5e:	c6 df       	rcall	.-116    	; 0x2cec <__fp_split3>
    2d60:	a0 f3       	brcs	.-24     	; 0x2d4a <__mulsf3+0x4>

00002d62 <__mulsf3_pse>:
    2d62:	95 9f       	mul	r25, r21
    2d64:	d1 f3       	breq	.-12     	; 0x2d5a <__mulsf3+0x14>
    2d66:	95 0f       	add	r25, r21
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	55 1f       	adc	r21, r21
    2d6c:	62 9f       	mul	r22, r18
    2d6e:	f0 01       	movw	r30, r0
    2d70:	72 9f       	mul	r23, r18
    2d72:	bb 27       	eor	r27, r27
    2d74:	f0 0d       	add	r31, r0
    2d76:	b1 1d       	adc	r27, r1
    2d78:	63 9f       	mul	r22, r19
    2d7a:	aa 27       	eor	r26, r26
    2d7c:	f0 0d       	add	r31, r0
    2d7e:	b1 1d       	adc	r27, r1
    2d80:	aa 1f       	adc	r26, r26
    2d82:	64 9f       	mul	r22, r20
    2d84:	66 27       	eor	r22, r22
    2d86:	b0 0d       	add	r27, r0
    2d88:	a1 1d       	adc	r26, r1
    2d8a:	66 1f       	adc	r22, r22
    2d8c:	82 9f       	mul	r24, r18
    2d8e:	22 27       	eor	r18, r18
    2d90:	b0 0d       	add	r27, r0
    2d92:	a1 1d       	adc	r26, r1
    2d94:	62 1f       	adc	r22, r18
    2d96:	73 9f       	mul	r23, r19
    2d98:	b0 0d       	add	r27, r0
    2d9a:	a1 1d       	adc	r26, r1
    2d9c:	62 1f       	adc	r22, r18
    2d9e:	83 9f       	mul	r24, r19
    2da0:	a0 0d       	add	r26, r0
    2da2:	61 1d       	adc	r22, r1
    2da4:	22 1f       	adc	r18, r18
    2da6:	74 9f       	mul	r23, r20
    2da8:	33 27       	eor	r19, r19
    2daa:	a0 0d       	add	r26, r0
    2dac:	61 1d       	adc	r22, r1
    2dae:	23 1f       	adc	r18, r19
    2db0:	84 9f       	mul	r24, r20
    2db2:	60 0d       	add	r22, r0
    2db4:	21 1d       	adc	r18, r1
    2db6:	82 2f       	mov	r24, r18
    2db8:	76 2f       	mov	r23, r22
    2dba:	6a 2f       	mov	r22, r26
    2dbc:	11 24       	eor	r1, r1
    2dbe:	9f 57       	subi	r25, 0x7F	; 127
    2dc0:	50 40       	sbci	r21, 0x00	; 0
    2dc2:	8a f0       	brmi	.+34     	; 0x2de6 <__mulsf3_pse+0x84>
    2dc4:	e1 f0       	breq	.+56     	; 0x2dfe <__mulsf3_pse+0x9c>
    2dc6:	88 23       	and	r24, r24
    2dc8:	4a f0       	brmi	.+18     	; 0x2ddc <__mulsf3_pse+0x7a>
    2dca:	ee 0f       	add	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	bb 1f       	adc	r27, r27
    2dd0:	66 1f       	adc	r22, r22
    2dd2:	77 1f       	adc	r23, r23
    2dd4:	88 1f       	adc	r24, r24
    2dd6:	91 50       	subi	r25, 0x01	; 1
    2dd8:	50 40       	sbci	r21, 0x00	; 0
    2dda:	a9 f7       	brne	.-22     	; 0x2dc6 <__mulsf3_pse+0x64>
    2ddc:	9e 3f       	cpi	r25, 0xFE	; 254
    2dde:	51 05       	cpc	r21, r1
    2de0:	70 f0       	brcs	.+28     	; 0x2dfe <__mulsf3_pse+0x9c>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <__fp_inf>
    2de4:	a6 cf       	rjmp	.-180    	; 0x2d32 <__fp_szero>
    2de6:	5f 3f       	cpi	r21, 0xFF	; 255
    2de8:	ec f3       	brlt	.-6      	; 0x2de4 <__mulsf3_pse+0x82>
    2dea:	98 3e       	cpi	r25, 0xE8	; 232
    2dec:	dc f3       	brlt	.-10     	; 0x2de4 <__mulsf3_pse+0x82>
    2dee:	86 95       	lsr	r24
    2df0:	77 95       	ror	r23
    2df2:	67 95       	ror	r22
    2df4:	b7 95       	ror	r27
    2df6:	f7 95       	ror	r31
    2df8:	e7 95       	ror	r30
    2dfa:	9f 5f       	subi	r25, 0xFF	; 255
    2dfc:	c1 f7       	brne	.-16     	; 0x2dee <__mulsf3_pse+0x8c>
    2dfe:	fe 2b       	or	r31, r30
    2e00:	88 0f       	add	r24, r24
    2e02:	91 1d       	adc	r25, r1
    2e04:	96 95       	lsr	r25
    2e06:	87 95       	ror	r24
    2e08:	97 f9       	bld	r25, 7
    2e0a:	08 95       	ret

00002e0c <__fp_inf>:
    2e0c:	97 f9       	bld	r25, 7
    2e0e:	9f 67       	ori	r25, 0x7F	; 127
    2e10:	80 e8       	ldi	r24, 0x80	; 128
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	08 95       	ret

00002e18 <__fp_nan>:
    2e18:	9f ef       	ldi	r25, 0xFF	; 255
    2e1a:	80 ec       	ldi	r24, 0xC0	; 192
    2e1c:	08 95       	ret

00002e1e <__fp_pscA>:
    2e1e:	00 24       	eor	r0, r0
    2e20:	0a 94       	dec	r0
    2e22:	16 16       	cp	r1, r22
    2e24:	17 06       	cpc	r1, r23
    2e26:	18 06       	cpc	r1, r24
    2e28:	09 06       	cpc	r0, r25
    2e2a:	08 95       	ret

00002e2c <__fp_pscB>:
    2e2c:	00 24       	eor	r0, r0
    2e2e:	0a 94       	dec	r0
    2e30:	12 16       	cp	r1, r18
    2e32:	13 06       	cpc	r1, r19
    2e34:	14 06       	cpc	r1, r20
    2e36:	05 06       	cpc	r0, r21
    2e38:	08 95       	ret

00002e3a <__fp_round>:
    2e3a:	09 2e       	mov	r0, r25
    2e3c:	03 94       	inc	r0
    2e3e:	00 0c       	add	r0, r0
    2e40:	11 f4       	brne	.+4      	; 0x2e46 <__fp_round+0xc>
    2e42:	88 23       	and	r24, r24
    2e44:	52 f0       	brmi	.+20     	; 0x2e5a <__fp_round+0x20>
    2e46:	bb 0f       	add	r27, r27
    2e48:	40 f4       	brcc	.+16     	; 0x2e5a <__fp_round+0x20>
    2e4a:	bf 2b       	or	r27, r31
    2e4c:	11 f4       	brne	.+4      	; 0x2e52 <__fp_round+0x18>
    2e4e:	60 ff       	sbrs	r22, 0
    2e50:	04 c0       	rjmp	.+8      	; 0x2e5a <__fp_round+0x20>
    2e52:	6f 5f       	subi	r22, 0xFF	; 255
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255
    2e56:	8f 4f       	sbci	r24, 0xFF	; 255
    2e58:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5a:	08 95       	ret

00002e5c <__divmodhi4>:
    2e5c:	97 fb       	bst	r25, 7
    2e5e:	09 2e       	mov	r0, r25
    2e60:	07 26       	eor	r0, r23
    2e62:	0a d0       	rcall	.+20     	; 0x2e78 <__divmodhi4_neg1>
    2e64:	77 fd       	sbrc	r23, 7
    2e66:	04 d0       	rcall	.+8      	; 0x2e70 <__divmodhi4_neg2>
    2e68:	0c d0       	rcall	.+24     	; 0x2e82 <__udivmodhi4>
    2e6a:	06 d0       	rcall	.+12     	; 0x2e78 <__divmodhi4_neg1>
    2e6c:	00 20       	and	r0, r0
    2e6e:	1a f4       	brpl	.+6      	; 0x2e76 <__divmodhi4_exit>

00002e70 <__divmodhi4_neg2>:
    2e70:	70 95       	com	r23
    2e72:	61 95       	neg	r22
    2e74:	7f 4f       	sbci	r23, 0xFF	; 255

00002e76 <__divmodhi4_exit>:
    2e76:	08 95       	ret

00002e78 <__divmodhi4_neg1>:
    2e78:	f6 f7       	brtc	.-4      	; 0x2e76 <__divmodhi4_exit>
    2e7a:	90 95       	com	r25
    2e7c:	81 95       	neg	r24
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	08 95       	ret

00002e82 <__udivmodhi4>:
    2e82:	aa 1b       	sub	r26, r26
    2e84:	bb 1b       	sub	r27, r27
    2e86:	51 e1       	ldi	r21, 0x11	; 17
    2e88:	07 c0       	rjmp	.+14     	; 0x2e98 <__udivmodhi4_ep>

00002e8a <__udivmodhi4_loop>:
    2e8a:	aa 1f       	adc	r26, r26
    2e8c:	bb 1f       	adc	r27, r27
    2e8e:	a6 17       	cp	r26, r22
    2e90:	b7 07       	cpc	r27, r23
    2e92:	10 f0       	brcs	.+4      	; 0x2e98 <__udivmodhi4_ep>
    2e94:	a6 1b       	sub	r26, r22
    2e96:	b7 0b       	sbc	r27, r23

00002e98 <__udivmodhi4_ep>:
    2e98:	88 1f       	adc	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	5a 95       	dec	r21
    2e9e:	a9 f7       	brne	.-22     	; 0x2e8a <__udivmodhi4_loop>
    2ea0:	80 95       	com	r24
    2ea2:	90 95       	com	r25
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	08 95       	ret

00002eaa <do_rand>:
    2eaa:	a0 e0       	ldi	r26, 0x00	; 0
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	eb e5       	ldi	r30, 0x5B	; 91
    2eb0:	f7 e1       	ldi	r31, 0x17	; 23
    2eb2:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x10>
    2eb6:	ec 01       	movw	r28, r24
    2eb8:	a8 80       	ld	r10, Y
    2eba:	b9 80       	ldd	r11, Y+1	; 0x01
    2ebc:	ca 80       	ldd	r12, Y+2	; 0x02
    2ebe:	db 80       	ldd	r13, Y+3	; 0x03
    2ec0:	a1 14       	cp	r10, r1
    2ec2:	b1 04       	cpc	r11, r1
    2ec4:	c1 04       	cpc	r12, r1
    2ec6:	d1 04       	cpc	r13, r1
    2ec8:	41 f4       	brne	.+16     	; 0x2eda <do_rand+0x30>
    2eca:	84 e2       	ldi	r24, 0x24	; 36
    2ecc:	a8 2e       	mov	r10, r24
    2ece:	89 ed       	ldi	r24, 0xD9	; 217
    2ed0:	b8 2e       	mov	r11, r24
    2ed2:	8b e5       	ldi	r24, 0x5B	; 91
    2ed4:	c8 2e       	mov	r12, r24
    2ed6:	87 e0       	ldi	r24, 0x07	; 7
    2ed8:	d8 2e       	mov	r13, r24
    2eda:	c6 01       	movw	r24, r12
    2edc:	b5 01       	movw	r22, r10
    2ede:	2d e1       	ldi	r18, 0x1D	; 29
    2ee0:	33 ef       	ldi	r19, 0xF3	; 243
    2ee2:	41 e0       	ldi	r20, 0x01	; 1
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	0e 94 86 1a 	call	0x350c	; 0x350c <__divmodsi4>
    2eea:	27 ea       	ldi	r18, 0xA7	; 167
    2eec:	31 e4       	ldi	r19, 0x41	; 65
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsi3>
    2ef6:	7b 01       	movw	r14, r22
    2ef8:	8c 01       	movw	r16, r24
    2efa:	c6 01       	movw	r24, r12
    2efc:	b5 01       	movw	r22, r10
    2efe:	2d e1       	ldi	r18, 0x1D	; 29
    2f00:	33 ef       	ldi	r19, 0xF3	; 243
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	0e 94 86 1a 	call	0x350c	; 0x350c <__divmodsi4>
    2f0a:	ca 01       	movw	r24, r20
    2f0c:	b9 01       	movw	r22, r18
    2f0e:	2c ee       	ldi	r18, 0xEC	; 236
    2f10:	34 ef       	ldi	r19, 0xF4	; 244
    2f12:	4f ef       	ldi	r20, 0xFF	; 255
    2f14:	5f ef       	ldi	r21, 0xFF	; 255
    2f16:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsi3>
    2f1a:	6e 0d       	add	r22, r14
    2f1c:	7f 1d       	adc	r23, r15
    2f1e:	80 1f       	adc	r24, r16
    2f20:	91 1f       	adc	r25, r17
    2f22:	97 ff       	sbrs	r25, 7
    2f24:	04 c0       	rjmp	.+8      	; 0x2f2e <do_rand+0x84>
    2f26:	61 50       	subi	r22, 0x01	; 1
    2f28:	70 40       	sbci	r23, 0x00	; 0
    2f2a:	80 40       	sbci	r24, 0x00	; 0
    2f2c:	90 48       	sbci	r25, 0x80	; 128
    2f2e:	68 83       	st	Y, r22
    2f30:	79 83       	std	Y+1, r23	; 0x01
    2f32:	8a 83       	std	Y+2, r24	; 0x02
    2f34:	9b 83       	std	Y+3, r25	; 0x03
    2f36:	9b 01       	movw	r18, r22
    2f38:	3f 77       	andi	r19, 0x7F	; 127
    2f3a:	c9 01       	movw	r24, r18
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	ea e0       	ldi	r30, 0x0A	; 10
    2f42:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x10>

00002f46 <rand_r>:
    2f46:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <do_rand>
    2f4a:	08 95       	ret

00002f4c <rand>:
    2f4c:	8b e8       	ldi	r24, 0x8B	; 139
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <do_rand>
    2f54:	08 95       	ret

00002f56 <srand>:
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	80 93 8b 01 	sts	0x018B, r24
    2f5e:	90 93 8c 01 	sts	0x018C, r25
    2f62:	a0 93 8d 01 	sts	0x018D, r26
    2f66:	b0 93 8e 01 	sts	0x018E, r27
    2f6a:	08 95       	ret

00002f6c <memcpy_P>:
    2f6c:	fb 01       	movw	r30, r22
    2f6e:	dc 01       	movw	r26, r24
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <memcpy_P+0xa>
    2f72:	05 90       	lpm	r0, Z+
    2f74:	0d 92       	st	X+, r0
    2f76:	41 50       	subi	r20, 0x01	; 1
    2f78:	50 40       	sbci	r21, 0x00	; 0
    2f7a:	d8 f7       	brcc	.-10     	; 0x2f72 <memcpy_P+0x6>
    2f7c:	08 95       	ret

00002f7e <strcpy>:
    2f7e:	fb 01       	movw	r30, r22
    2f80:	dc 01       	movw	r26, r24
    2f82:	01 90       	ld	r0, Z+
    2f84:	0d 92       	st	X+, r0
    2f86:	00 20       	and	r0, r0
    2f88:	e1 f7       	brne	.-8      	; 0x2f82 <strcpy+0x4>
    2f8a:	08 95       	ret

00002f8c <sprintf>:
    2f8c:	ae e0       	ldi	r26, 0x0E	; 14
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	ec ec       	ldi	r30, 0xCC	; 204
    2f92:	f7 e1       	ldi	r31, 0x17	; 23
    2f94:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__prologue_saves__+0x1c>
    2f98:	0d 89       	ldd	r16, Y+21	; 0x15
    2f9a:	1e 89       	ldd	r17, Y+22	; 0x16
    2f9c:	86 e0       	ldi	r24, 0x06	; 6
    2f9e:	8c 83       	std	Y+4, r24	; 0x04
    2fa0:	1a 83       	std	Y+2, r17	; 0x02
    2fa2:	09 83       	std	Y+1, r16	; 0x01
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	9f e7       	ldi	r25, 0x7F	; 127
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	9e 01       	movw	r18, r28
    2fae:	27 5e       	subi	r18, 0xE7	; 231
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	6f 89       	ldd	r22, Y+23	; 0x17
    2fb8:	78 8d       	ldd	r23, Y+24	; 0x18
    2fba:	a9 01       	movw	r20, r18
    2fbc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <vfprintf>
    2fc0:	2f 81       	ldd	r18, Y+7	; 0x07
    2fc2:	38 85       	ldd	r19, Y+8	; 0x08
    2fc4:	02 0f       	add	r16, r18
    2fc6:	13 1f       	adc	r17, r19
    2fc8:	f8 01       	movw	r30, r16
    2fca:	10 82       	st	Z, r1
    2fcc:	2e 96       	adiw	r28, 0x0e	; 14
    2fce:	e4 e0       	ldi	r30, 0x04	; 4
    2fd0:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__epilogue_restores__+0x1c>

00002fd4 <vfprintf>:
    2fd4:	ab e0       	ldi	r26, 0x0B	; 11
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    2fda:	f7 e1       	ldi	r31, 0x17	; 23
    2fdc:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__>
    2fe0:	3c 01       	movw	r6, r24
    2fe2:	2b 01       	movw	r4, r22
    2fe4:	5a 01       	movw	r10, r20
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	17 82       	std	Z+7, r1	; 0x07
    2fea:	16 82       	std	Z+6, r1	; 0x06
    2fec:	83 81       	ldd	r24, Z+3	; 0x03
    2fee:	81 fd       	sbrc	r24, 1
    2ff0:	03 c0       	rjmp	.+6      	; 0x2ff8 <vfprintf+0x24>
    2ff2:	6f ef       	ldi	r22, 0xFF	; 255
    2ff4:	7f ef       	ldi	r23, 0xFF	; 255
    2ff6:	c6 c1       	rjmp	.+908    	; 0x3384 <vfprintf+0x3b0>
    2ff8:	9a e0       	ldi	r25, 0x0A	; 10
    2ffa:	89 2e       	mov	r8, r25
    2ffc:	1e 01       	movw	r2, r28
    2ffe:	08 94       	sec
    3000:	21 1c       	adc	r2, r1
    3002:	31 1c       	adc	r3, r1
    3004:	f3 01       	movw	r30, r6
    3006:	23 81       	ldd	r18, Z+3	; 0x03
    3008:	f2 01       	movw	r30, r4
    300a:	23 fd       	sbrc	r18, 3
    300c:	85 91       	lpm	r24, Z+
    300e:	23 ff       	sbrs	r18, 3
    3010:	81 91       	ld	r24, Z+
    3012:	2f 01       	movw	r4, r30
    3014:	88 23       	and	r24, r24
    3016:	09 f4       	brne	.+2      	; 0x301a <vfprintf+0x46>
    3018:	b2 c1       	rjmp	.+868    	; 0x337e <vfprintf+0x3aa>
    301a:	85 32       	cpi	r24, 0x25	; 37
    301c:	39 f4       	brne	.+14     	; 0x302c <vfprintf+0x58>
    301e:	23 fd       	sbrc	r18, 3
    3020:	85 91       	lpm	r24, Z+
    3022:	23 ff       	sbrs	r18, 3
    3024:	81 91       	ld	r24, Z+
    3026:	2f 01       	movw	r4, r30
    3028:	85 32       	cpi	r24, 0x25	; 37
    302a:	29 f4       	brne	.+10     	; 0x3036 <vfprintf+0x62>
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	b3 01       	movw	r22, r6
    3030:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3034:	e7 cf       	rjmp	.-50     	; 0x3004 <vfprintf+0x30>
    3036:	98 2f       	mov	r25, r24
    3038:	ff 24       	eor	r15, r15
    303a:	ee 24       	eor	r14, r14
    303c:	99 24       	eor	r9, r9
    303e:	ff e1       	ldi	r31, 0x1F	; 31
    3040:	ff 15       	cp	r31, r15
    3042:	d0 f0       	brcs	.+52     	; 0x3078 <vfprintf+0xa4>
    3044:	9b 32       	cpi	r25, 0x2B	; 43
    3046:	69 f0       	breq	.+26     	; 0x3062 <vfprintf+0x8e>
    3048:	9c 32       	cpi	r25, 0x2C	; 44
    304a:	28 f4       	brcc	.+10     	; 0x3056 <vfprintf+0x82>
    304c:	90 32       	cpi	r25, 0x20	; 32
    304e:	59 f0       	breq	.+22     	; 0x3066 <vfprintf+0x92>
    3050:	93 32       	cpi	r25, 0x23	; 35
    3052:	91 f4       	brne	.+36     	; 0x3078 <vfprintf+0xa4>
    3054:	0e c0       	rjmp	.+28     	; 0x3072 <vfprintf+0x9e>
    3056:	9d 32       	cpi	r25, 0x2D	; 45
    3058:	49 f0       	breq	.+18     	; 0x306c <vfprintf+0x98>
    305a:	90 33       	cpi	r25, 0x30	; 48
    305c:	69 f4       	brne	.+26     	; 0x3078 <vfprintf+0xa4>
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	24 c0       	rjmp	.+72     	; 0x30aa <vfprintf+0xd6>
    3062:	52 e0       	ldi	r21, 0x02	; 2
    3064:	f5 2a       	or	r15, r21
    3066:	84 e0       	ldi	r24, 0x04	; 4
    3068:	f8 2a       	or	r15, r24
    306a:	28 c0       	rjmp	.+80     	; 0x30bc <vfprintf+0xe8>
    306c:	98 e0       	ldi	r25, 0x08	; 8
    306e:	f9 2a       	or	r15, r25
    3070:	25 c0       	rjmp	.+74     	; 0x30bc <vfprintf+0xe8>
    3072:	e0 e1       	ldi	r30, 0x10	; 16
    3074:	fe 2a       	or	r15, r30
    3076:	22 c0       	rjmp	.+68     	; 0x30bc <vfprintf+0xe8>
    3078:	f7 fc       	sbrc	r15, 7
    307a:	29 c0       	rjmp	.+82     	; 0x30ce <vfprintf+0xfa>
    307c:	89 2f       	mov	r24, r25
    307e:	80 53       	subi	r24, 0x30	; 48
    3080:	8a 30       	cpi	r24, 0x0A	; 10
    3082:	70 f4       	brcc	.+28     	; 0x30a0 <vfprintf+0xcc>
    3084:	f6 fe       	sbrs	r15, 6
    3086:	05 c0       	rjmp	.+10     	; 0x3092 <vfprintf+0xbe>
    3088:	98 9c       	mul	r9, r8
    308a:	90 2c       	mov	r9, r0
    308c:	11 24       	eor	r1, r1
    308e:	98 0e       	add	r9, r24
    3090:	15 c0       	rjmp	.+42     	; 0x30bc <vfprintf+0xe8>
    3092:	e8 9c       	mul	r14, r8
    3094:	e0 2c       	mov	r14, r0
    3096:	11 24       	eor	r1, r1
    3098:	e8 0e       	add	r14, r24
    309a:	f0 e2       	ldi	r31, 0x20	; 32
    309c:	ff 2a       	or	r15, r31
    309e:	0e c0       	rjmp	.+28     	; 0x30bc <vfprintf+0xe8>
    30a0:	9e 32       	cpi	r25, 0x2E	; 46
    30a2:	29 f4       	brne	.+10     	; 0x30ae <vfprintf+0xda>
    30a4:	f6 fc       	sbrc	r15, 6
    30a6:	6b c1       	rjmp	.+726    	; 0x337e <vfprintf+0x3aa>
    30a8:	40 e4       	ldi	r20, 0x40	; 64
    30aa:	f4 2a       	or	r15, r20
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <vfprintf+0xe8>
    30ae:	9c 36       	cpi	r25, 0x6C	; 108
    30b0:	19 f4       	brne	.+6      	; 0x30b8 <vfprintf+0xe4>
    30b2:	50 e8       	ldi	r21, 0x80	; 128
    30b4:	f5 2a       	or	r15, r21
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <vfprintf+0xe8>
    30b8:	98 36       	cpi	r25, 0x68	; 104
    30ba:	49 f4       	brne	.+18     	; 0x30ce <vfprintf+0xfa>
    30bc:	f2 01       	movw	r30, r4
    30be:	23 fd       	sbrc	r18, 3
    30c0:	95 91       	lpm	r25, Z+
    30c2:	23 ff       	sbrs	r18, 3
    30c4:	91 91       	ld	r25, Z+
    30c6:	2f 01       	movw	r4, r30
    30c8:	99 23       	and	r25, r25
    30ca:	09 f0       	breq	.+2      	; 0x30ce <vfprintf+0xfa>
    30cc:	b8 cf       	rjmp	.-144    	; 0x303e <vfprintf+0x6a>
    30ce:	89 2f       	mov	r24, r25
    30d0:	85 54       	subi	r24, 0x45	; 69
    30d2:	83 30       	cpi	r24, 0x03	; 3
    30d4:	18 f0       	brcs	.+6      	; 0x30dc <vfprintf+0x108>
    30d6:	80 52       	subi	r24, 0x20	; 32
    30d8:	83 30       	cpi	r24, 0x03	; 3
    30da:	38 f4       	brcc	.+14     	; 0x30ea <vfprintf+0x116>
    30dc:	44 e0       	ldi	r20, 0x04	; 4
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	a4 0e       	add	r10, r20
    30e2:	b5 1e       	adc	r11, r21
    30e4:	5f e3       	ldi	r21, 0x3F	; 63
    30e6:	59 83       	std	Y+1, r21	; 0x01
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <vfprintf+0x134>
    30ea:	93 36       	cpi	r25, 0x63	; 99
    30ec:	31 f0       	breq	.+12     	; 0x30fa <vfprintf+0x126>
    30ee:	93 37       	cpi	r25, 0x73	; 115
    30f0:	79 f0       	breq	.+30     	; 0x3110 <vfprintf+0x13c>
    30f2:	93 35       	cpi	r25, 0x53	; 83
    30f4:	09 f0       	breq	.+2      	; 0x30f8 <vfprintf+0x124>
    30f6:	56 c0       	rjmp	.+172    	; 0x31a4 <vfprintf+0x1d0>
    30f8:	20 c0       	rjmp	.+64     	; 0x313a <vfprintf+0x166>
    30fa:	f5 01       	movw	r30, r10
    30fc:	80 81       	ld	r24, Z
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	42 e0       	ldi	r20, 0x02	; 2
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	a4 0e       	add	r10, r20
    3106:	b5 1e       	adc	r11, r21
    3108:	61 01       	movw	r12, r2
    310a:	01 e0       	ldi	r16, 0x01	; 1
    310c:	10 e0       	ldi	r17, 0x00	; 0
    310e:	12 c0       	rjmp	.+36     	; 0x3134 <vfprintf+0x160>
    3110:	f5 01       	movw	r30, r10
    3112:	c0 80       	ld	r12, Z
    3114:	d1 80       	ldd	r13, Z+1	; 0x01
    3116:	f6 fc       	sbrc	r15, 6
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <vfprintf+0x14c>
    311a:	6f ef       	ldi	r22, 0xFF	; 255
    311c:	7f ef       	ldi	r23, 0xFF	; 255
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <vfprintf+0x150>
    3120:	69 2d       	mov	r22, r9
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	42 e0       	ldi	r20, 0x02	; 2
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	a4 0e       	add	r10, r20
    312a:	b5 1e       	adc	r11, r21
    312c:	c6 01       	movw	r24, r12
    312e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <strnlen>
    3132:	8c 01       	movw	r16, r24
    3134:	5f e7       	ldi	r21, 0x7F	; 127
    3136:	f5 22       	and	r15, r21
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <vfprintf+0x18e>
    313a:	f5 01       	movw	r30, r10
    313c:	c0 80       	ld	r12, Z
    313e:	d1 80       	ldd	r13, Z+1	; 0x01
    3140:	f6 fc       	sbrc	r15, 6
    3142:	03 c0       	rjmp	.+6      	; 0x314a <vfprintf+0x176>
    3144:	6f ef       	ldi	r22, 0xFF	; 255
    3146:	7f ef       	ldi	r23, 0xFF	; 255
    3148:	02 c0       	rjmp	.+4      	; 0x314e <vfprintf+0x17a>
    314a:	69 2d       	mov	r22, r9
    314c:	70 e0       	ldi	r23, 0x00	; 0
    314e:	42 e0       	ldi	r20, 0x02	; 2
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	a4 0e       	add	r10, r20
    3154:	b5 1e       	adc	r11, r21
    3156:	c6 01       	movw	r24, r12
    3158:	0e 94 c7 19 	call	0x338e	; 0x338e <strnlen_P>
    315c:	8c 01       	movw	r16, r24
    315e:	50 e8       	ldi	r21, 0x80	; 128
    3160:	f5 2a       	or	r15, r21
    3162:	f3 fe       	sbrs	r15, 3
    3164:	07 c0       	rjmp	.+14     	; 0x3174 <vfprintf+0x1a0>
    3166:	1a c0       	rjmp	.+52     	; 0x319c <vfprintf+0x1c8>
    3168:	80 e2       	ldi	r24, 0x20	; 32
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	b3 01       	movw	r22, r6
    316e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3172:	ea 94       	dec	r14
    3174:	8e 2d       	mov	r24, r14
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	08 17       	cp	r16, r24
    317a:	19 07       	cpc	r17, r25
    317c:	a8 f3       	brcs	.-22     	; 0x3168 <vfprintf+0x194>
    317e:	0e c0       	rjmp	.+28     	; 0x319c <vfprintf+0x1c8>
    3180:	f6 01       	movw	r30, r12
    3182:	f7 fc       	sbrc	r15, 7
    3184:	85 91       	lpm	r24, Z+
    3186:	f7 fe       	sbrs	r15, 7
    3188:	81 91       	ld	r24, Z+
    318a:	6f 01       	movw	r12, r30
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	b3 01       	movw	r22, r6
    3190:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3194:	e1 10       	cpse	r14, r1
    3196:	ea 94       	dec	r14
    3198:	01 50       	subi	r16, 0x01	; 1
    319a:	10 40       	sbci	r17, 0x00	; 0
    319c:	01 15       	cp	r16, r1
    319e:	11 05       	cpc	r17, r1
    31a0:	79 f7       	brne	.-34     	; 0x3180 <vfprintf+0x1ac>
    31a2:	ea c0       	rjmp	.+468    	; 0x3378 <vfprintf+0x3a4>
    31a4:	94 36       	cpi	r25, 0x64	; 100
    31a6:	11 f0       	breq	.+4      	; 0x31ac <vfprintf+0x1d8>
    31a8:	99 36       	cpi	r25, 0x69	; 105
    31aa:	69 f5       	brne	.+90     	; 0x3206 <vfprintf+0x232>
    31ac:	f7 fe       	sbrs	r15, 7
    31ae:	08 c0       	rjmp	.+16     	; 0x31c0 <vfprintf+0x1ec>
    31b0:	f5 01       	movw	r30, r10
    31b2:	20 81       	ld	r18, Z
    31b4:	31 81       	ldd	r19, Z+1	; 0x01
    31b6:	42 81       	ldd	r20, Z+2	; 0x02
    31b8:	53 81       	ldd	r21, Z+3	; 0x03
    31ba:	84 e0       	ldi	r24, 0x04	; 4
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0a c0       	rjmp	.+20     	; 0x31d4 <vfprintf+0x200>
    31c0:	f5 01       	movw	r30, r10
    31c2:	80 81       	ld	r24, Z
    31c4:	91 81       	ldd	r25, Z+1	; 0x01
    31c6:	9c 01       	movw	r18, r24
    31c8:	44 27       	eor	r20, r20
    31ca:	37 fd       	sbrc	r19, 7
    31cc:	40 95       	com	r20
    31ce:	54 2f       	mov	r21, r20
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a8 0e       	add	r10, r24
    31d6:	b9 1e       	adc	r11, r25
    31d8:	9f e6       	ldi	r25, 0x6F	; 111
    31da:	f9 22       	and	r15, r25
    31dc:	57 ff       	sbrs	r21, 7
    31de:	09 c0       	rjmp	.+18     	; 0x31f2 <vfprintf+0x21e>
    31e0:	50 95       	com	r21
    31e2:	40 95       	com	r20
    31e4:	30 95       	com	r19
    31e6:	21 95       	neg	r18
    31e8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ea:	4f 4f       	sbci	r20, 0xFF	; 255
    31ec:	5f 4f       	sbci	r21, 0xFF	; 255
    31ee:	e0 e8       	ldi	r30, 0x80	; 128
    31f0:	fe 2a       	or	r15, r30
    31f2:	ca 01       	movw	r24, r20
    31f4:	b9 01       	movw	r22, r18
    31f6:	a1 01       	movw	r20, r2
    31f8:	2a e0       	ldi	r18, 0x0A	; 10
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	0e 94 09 1a 	call	0x3412	; 0x3412 <__ultoa_invert>
    3200:	d8 2e       	mov	r13, r24
    3202:	d2 18       	sub	r13, r2
    3204:	40 c0       	rjmp	.+128    	; 0x3286 <vfprintf+0x2b2>
    3206:	95 37       	cpi	r25, 0x75	; 117
    3208:	29 f4       	brne	.+10     	; 0x3214 <vfprintf+0x240>
    320a:	1f 2d       	mov	r17, r15
    320c:	1f 7e       	andi	r17, 0xEF	; 239
    320e:	2a e0       	ldi	r18, 0x0A	; 10
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	1d c0       	rjmp	.+58     	; 0x324e <vfprintf+0x27a>
    3214:	1f 2d       	mov	r17, r15
    3216:	19 7f       	andi	r17, 0xF9	; 249
    3218:	9f 36       	cpi	r25, 0x6F	; 111
    321a:	61 f0       	breq	.+24     	; 0x3234 <vfprintf+0x260>
    321c:	90 37       	cpi	r25, 0x70	; 112
    321e:	20 f4       	brcc	.+8      	; 0x3228 <vfprintf+0x254>
    3220:	98 35       	cpi	r25, 0x58	; 88
    3222:	09 f0       	breq	.+2      	; 0x3226 <vfprintf+0x252>
    3224:	ac c0       	rjmp	.+344    	; 0x337e <vfprintf+0x3aa>
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <vfprintf+0x272>
    3228:	90 37       	cpi	r25, 0x70	; 112
    322a:	39 f0       	breq	.+14     	; 0x323a <vfprintf+0x266>
    322c:	98 37       	cpi	r25, 0x78	; 120
    322e:	09 f0       	breq	.+2      	; 0x3232 <vfprintf+0x25e>
    3230:	a6 c0       	rjmp	.+332    	; 0x337e <vfprintf+0x3aa>
    3232:	04 c0       	rjmp	.+8      	; 0x323c <vfprintf+0x268>
    3234:	28 e0       	ldi	r18, 0x08	; 8
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	0a c0       	rjmp	.+20     	; 0x324e <vfprintf+0x27a>
    323a:	10 61       	ori	r17, 0x10	; 16
    323c:	14 fd       	sbrc	r17, 4
    323e:	14 60       	ori	r17, 0x04	; 4
    3240:	20 e1       	ldi	r18, 0x10	; 16
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	04 c0       	rjmp	.+8      	; 0x324e <vfprintf+0x27a>
    3246:	14 fd       	sbrc	r17, 4
    3248:	16 60       	ori	r17, 0x06	; 6
    324a:	20 e1       	ldi	r18, 0x10	; 16
    324c:	32 e0       	ldi	r19, 0x02	; 2
    324e:	17 ff       	sbrs	r17, 7
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <vfprintf+0x28e>
    3252:	f5 01       	movw	r30, r10
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	44 e0       	ldi	r20, 0x04	; 4
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	08 c0       	rjmp	.+16     	; 0x3272 <vfprintf+0x29e>
    3262:	f5 01       	movw	r30, r10
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	bc 01       	movw	r22, r24
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	42 e0       	ldi	r20, 0x02	; 2
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	a4 0e       	add	r10, r20
    3274:	b5 1e       	adc	r11, r21
    3276:	a1 01       	movw	r20, r2
    3278:	0e 94 09 1a 	call	0x3412	; 0x3412 <__ultoa_invert>
    327c:	d8 2e       	mov	r13, r24
    327e:	d2 18       	sub	r13, r2
    3280:	8f e7       	ldi	r24, 0x7F	; 127
    3282:	f8 2e       	mov	r15, r24
    3284:	f1 22       	and	r15, r17
    3286:	f6 fe       	sbrs	r15, 6
    3288:	0b c0       	rjmp	.+22     	; 0x32a0 <vfprintf+0x2cc>
    328a:	5e ef       	ldi	r21, 0xFE	; 254
    328c:	f5 22       	and	r15, r21
    328e:	d9 14       	cp	r13, r9
    3290:	38 f4       	brcc	.+14     	; 0x32a0 <vfprintf+0x2cc>
    3292:	f4 fe       	sbrs	r15, 4
    3294:	07 c0       	rjmp	.+14     	; 0x32a4 <vfprintf+0x2d0>
    3296:	f2 fc       	sbrc	r15, 2
    3298:	05 c0       	rjmp	.+10     	; 0x32a4 <vfprintf+0x2d0>
    329a:	8f ee       	ldi	r24, 0xEF	; 239
    329c:	f8 22       	and	r15, r24
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <vfprintf+0x2d0>
    32a0:	1d 2d       	mov	r17, r13
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <vfprintf+0x2d2>
    32a4:	19 2d       	mov	r17, r9
    32a6:	f4 fe       	sbrs	r15, 4
    32a8:	0d c0       	rjmp	.+26     	; 0x32c4 <vfprintf+0x2f0>
    32aa:	fe 01       	movw	r30, r28
    32ac:	ed 0d       	add	r30, r13
    32ae:	f1 1d       	adc	r31, r1
    32b0:	80 81       	ld	r24, Z
    32b2:	80 33       	cpi	r24, 0x30	; 48
    32b4:	19 f4       	brne	.+6      	; 0x32bc <vfprintf+0x2e8>
    32b6:	99 ee       	ldi	r25, 0xE9	; 233
    32b8:	f9 22       	and	r15, r25
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <vfprintf+0x2f8>
    32bc:	1f 5f       	subi	r17, 0xFF	; 255
    32be:	f2 fe       	sbrs	r15, 2
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <vfprintf+0x2f8>
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <vfprintf+0x2f6>
    32c4:	8f 2d       	mov	r24, r15
    32c6:	86 78       	andi	r24, 0x86	; 134
    32c8:	09 f0       	breq	.+2      	; 0x32cc <vfprintf+0x2f8>
    32ca:	1f 5f       	subi	r17, 0xFF	; 255
    32cc:	0f 2d       	mov	r16, r15
    32ce:	f3 fc       	sbrc	r15, 3
    32d0:	14 c0       	rjmp	.+40     	; 0x32fa <vfprintf+0x326>
    32d2:	f0 fe       	sbrs	r15, 0
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <vfprintf+0x320>
    32d6:	1e 15       	cp	r17, r14
    32d8:	10 f0       	brcs	.+4      	; 0x32de <vfprintf+0x30a>
    32da:	9d 2c       	mov	r9, r13
    32dc:	0b c0       	rjmp	.+22     	; 0x32f4 <vfprintf+0x320>
    32de:	9d 2c       	mov	r9, r13
    32e0:	9e 0c       	add	r9, r14
    32e2:	91 1a       	sub	r9, r17
    32e4:	1e 2d       	mov	r17, r14
    32e6:	06 c0       	rjmp	.+12     	; 0x32f4 <vfprintf+0x320>
    32e8:	80 e2       	ldi	r24, 0x20	; 32
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	b3 01       	movw	r22, r6
    32ee:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    32f2:	1f 5f       	subi	r17, 0xFF	; 255
    32f4:	1e 15       	cp	r17, r14
    32f6:	c0 f3       	brcs	.-16     	; 0x32e8 <vfprintf+0x314>
    32f8:	04 c0       	rjmp	.+8      	; 0x3302 <vfprintf+0x32e>
    32fa:	1e 15       	cp	r17, r14
    32fc:	10 f4       	brcc	.+4      	; 0x3302 <vfprintf+0x32e>
    32fe:	e1 1a       	sub	r14, r17
    3300:	01 c0       	rjmp	.+2      	; 0x3304 <vfprintf+0x330>
    3302:	ee 24       	eor	r14, r14
    3304:	04 ff       	sbrs	r16, 4
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <vfprintf+0x352>
    3308:	80 e3       	ldi	r24, 0x30	; 48
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	b3 01       	movw	r22, r6
    330e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3312:	02 ff       	sbrs	r16, 2
    3314:	1d c0       	rjmp	.+58     	; 0x3350 <vfprintf+0x37c>
    3316:	01 fd       	sbrc	r16, 1
    3318:	03 c0       	rjmp	.+6      	; 0x3320 <vfprintf+0x34c>
    331a:	88 e7       	ldi	r24, 0x78	; 120
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	0e c0       	rjmp	.+28     	; 0x333c <vfprintf+0x368>
    3320:	88 e5       	ldi	r24, 0x58	; 88
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0b c0       	rjmp	.+22     	; 0x333c <vfprintf+0x368>
    3326:	80 2f       	mov	r24, r16
    3328:	86 78       	andi	r24, 0x86	; 134
    332a:	91 f0       	breq	.+36     	; 0x3350 <vfprintf+0x37c>
    332c:	01 ff       	sbrs	r16, 1
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <vfprintf+0x360>
    3330:	8b e2       	ldi	r24, 0x2B	; 43
    3332:	01 c0       	rjmp	.+2      	; 0x3336 <vfprintf+0x362>
    3334:	80 e2       	ldi	r24, 0x20	; 32
    3336:	f7 fc       	sbrc	r15, 7
    3338:	8d e2       	ldi	r24, 0x2D	; 45
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	b3 01       	movw	r22, r6
    333e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <vfprintf+0x37c>
    3344:	80 e3       	ldi	r24, 0x30	; 48
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	b3 01       	movw	r22, r6
    334a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    334e:	9a 94       	dec	r9
    3350:	d9 14       	cp	r13, r9
    3352:	c0 f3       	brcs	.-16     	; 0x3344 <vfprintf+0x370>
    3354:	da 94       	dec	r13
    3356:	f1 01       	movw	r30, r2
    3358:	ed 0d       	add	r30, r13
    335a:	f1 1d       	adc	r31, r1
    335c:	80 81       	ld	r24, Z
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	b3 01       	movw	r22, r6
    3362:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3366:	dd 20       	and	r13, r13
    3368:	a9 f7       	brne	.-22     	; 0x3354 <vfprintf+0x380>
    336a:	06 c0       	rjmp	.+12     	; 0x3378 <vfprintf+0x3a4>
    336c:	80 e2       	ldi	r24, 0x20	; 32
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	b3 01       	movw	r22, r6
    3372:	0e 94 dd 19 	call	0x33ba	; 0x33ba <fputc>
    3376:	ea 94       	dec	r14
    3378:	ee 20       	and	r14, r14
    337a:	c1 f7       	brne	.-16     	; 0x336c <vfprintf+0x398>
    337c:	43 ce       	rjmp	.-890    	; 0x3004 <vfprintf+0x30>
    337e:	f3 01       	movw	r30, r6
    3380:	66 81       	ldd	r22, Z+6	; 0x06
    3382:	77 81       	ldd	r23, Z+7	; 0x07
    3384:	cb 01       	movw	r24, r22
    3386:	2b 96       	adiw	r28, 0x0b	; 11
    3388:	e2 e1       	ldi	r30, 0x12	; 18
    338a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__>

0000338e <strnlen_P>:
    338e:	fc 01       	movw	r30, r24
    3390:	05 90       	lpm	r0, Z+
    3392:	61 50       	subi	r22, 0x01	; 1
    3394:	70 40       	sbci	r23, 0x00	; 0
    3396:	01 10       	cpse	r0, r1
    3398:	d8 f7       	brcc	.-10     	; 0x3390 <strnlen_P+0x2>
    339a:	80 95       	com	r24
    339c:	90 95       	com	r25
    339e:	8e 0f       	add	r24, r30
    33a0:	9f 1f       	adc	r25, r31
    33a2:	08 95       	ret

000033a4 <strnlen>:
    33a4:	fc 01       	movw	r30, r24
    33a6:	61 50       	subi	r22, 0x01	; 1
    33a8:	70 40       	sbci	r23, 0x00	; 0
    33aa:	01 90       	ld	r0, Z+
    33ac:	01 10       	cpse	r0, r1
    33ae:	d8 f7       	brcc	.-10     	; 0x33a6 <strnlen+0x2>
    33b0:	80 95       	com	r24
    33b2:	90 95       	com	r25
    33b4:	8e 0f       	add	r24, r30
    33b6:	9f 1f       	adc	r25, r31
    33b8:	08 95       	ret

000033ba <fputc>:
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	8c 01       	movw	r16, r24
    33c4:	eb 01       	movw	r28, r22
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	81 ff       	sbrs	r24, 1
    33ca:	1b c0       	rjmp	.+54     	; 0x3402 <fputc+0x48>
    33cc:	82 ff       	sbrs	r24, 2
    33ce:	0d c0       	rjmp	.+26     	; 0x33ea <fputc+0x30>
    33d0:	2e 81       	ldd	r18, Y+6	; 0x06
    33d2:	3f 81       	ldd	r19, Y+7	; 0x07
    33d4:	8c 81       	ldd	r24, Y+4	; 0x04
    33d6:	9d 81       	ldd	r25, Y+5	; 0x05
    33d8:	28 17       	cp	r18, r24
    33da:	39 07       	cpc	r19, r25
    33dc:	64 f4       	brge	.+24     	; 0x33f6 <fputc+0x3c>
    33de:	e8 81       	ld	r30, Y
    33e0:	f9 81       	ldd	r31, Y+1	; 0x01
    33e2:	01 93       	st	Z+, r16
    33e4:	f9 83       	std	Y+1, r31	; 0x01
    33e6:	e8 83       	st	Y, r30
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <fputc+0x3c>
    33ea:	e8 85       	ldd	r30, Y+8	; 0x08
    33ec:	f9 85       	ldd	r31, Y+9	; 0x09
    33ee:	80 2f       	mov	r24, r16
    33f0:	09 95       	icall
    33f2:	89 2b       	or	r24, r25
    33f4:	31 f4       	brne	.+12     	; 0x3402 <fputc+0x48>
    33f6:	8e 81       	ldd	r24, Y+6	; 0x06
    33f8:	9f 81       	ldd	r25, Y+7	; 0x07
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	9f 83       	std	Y+7, r25	; 0x07
    33fe:	8e 83       	std	Y+6, r24	; 0x06
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <fputc+0x4c>
    3402:	0f ef       	ldi	r16, 0xFF	; 255
    3404:	1f ef       	ldi	r17, 0xFF	; 255
    3406:	c8 01       	movw	r24, r16
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	08 95       	ret

00003412 <__ultoa_invert>:
    3412:	fa 01       	movw	r30, r20
    3414:	aa 27       	eor	r26, r26
    3416:	28 30       	cpi	r18, 0x08	; 8
    3418:	51 f1       	breq	.+84     	; 0x346e <__ultoa_invert+0x5c>
    341a:	20 31       	cpi	r18, 0x10	; 16
    341c:	81 f1       	breq	.+96     	; 0x347e <__ultoa_invert+0x6c>
    341e:	e8 94       	clt
    3420:	6f 93       	push	r22
    3422:	6e 7f       	andi	r22, 0xFE	; 254
    3424:	6e 5f       	subi	r22, 0xFE	; 254
    3426:	7f 4f       	sbci	r23, 0xFF	; 255
    3428:	8f 4f       	sbci	r24, 0xFF	; 255
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	af 4f       	sbci	r26, 0xFF	; 255
    342e:	b1 e0       	ldi	r27, 0x01	; 1
    3430:	3e d0       	rcall	.+124    	; 0x34ae <__ultoa_invert+0x9c>
    3432:	b4 e0       	ldi	r27, 0x04	; 4
    3434:	3c d0       	rcall	.+120    	; 0x34ae <__ultoa_invert+0x9c>
    3436:	67 0f       	add	r22, r23
    3438:	78 1f       	adc	r23, r24
    343a:	89 1f       	adc	r24, r25
    343c:	9a 1f       	adc	r25, r26
    343e:	a1 1d       	adc	r26, r1
    3440:	68 0f       	add	r22, r24
    3442:	79 1f       	adc	r23, r25
    3444:	8a 1f       	adc	r24, r26
    3446:	91 1d       	adc	r25, r1
    3448:	a1 1d       	adc	r26, r1
    344a:	6a 0f       	add	r22, r26
    344c:	71 1d       	adc	r23, r1
    344e:	81 1d       	adc	r24, r1
    3450:	91 1d       	adc	r25, r1
    3452:	a1 1d       	adc	r26, r1
    3454:	20 d0       	rcall	.+64     	; 0x3496 <__ultoa_invert+0x84>
    3456:	09 f4       	brne	.+2      	; 0x345a <__ultoa_invert+0x48>
    3458:	68 94       	set
    345a:	3f 91       	pop	r19
    345c:	2a e0       	ldi	r18, 0x0A	; 10
    345e:	26 9f       	mul	r18, r22
    3460:	11 24       	eor	r1, r1
    3462:	30 19       	sub	r19, r0
    3464:	30 5d       	subi	r19, 0xD0	; 208
    3466:	31 93       	st	Z+, r19
    3468:	de f6       	brtc	.-74     	; 0x3420 <__ultoa_invert+0xe>
    346a:	cf 01       	movw	r24, r30
    346c:	08 95       	ret
    346e:	46 2f       	mov	r20, r22
    3470:	47 70       	andi	r20, 0x07	; 7
    3472:	40 5d       	subi	r20, 0xD0	; 208
    3474:	41 93       	st	Z+, r20
    3476:	b3 e0       	ldi	r27, 0x03	; 3
    3478:	0f d0       	rcall	.+30     	; 0x3498 <__ultoa_invert+0x86>
    347a:	c9 f7       	brne	.-14     	; 0x346e <__ultoa_invert+0x5c>
    347c:	f6 cf       	rjmp	.-20     	; 0x346a <__ultoa_invert+0x58>
    347e:	46 2f       	mov	r20, r22
    3480:	4f 70       	andi	r20, 0x0F	; 15
    3482:	40 5d       	subi	r20, 0xD0	; 208
    3484:	4a 33       	cpi	r20, 0x3A	; 58
    3486:	18 f0       	brcs	.+6      	; 0x348e <__ultoa_invert+0x7c>
    3488:	49 5d       	subi	r20, 0xD9	; 217
    348a:	31 fd       	sbrc	r19, 1
    348c:	40 52       	subi	r20, 0x20	; 32
    348e:	41 93       	st	Z+, r20
    3490:	02 d0       	rcall	.+4      	; 0x3496 <__ultoa_invert+0x84>
    3492:	a9 f7       	brne	.-22     	; 0x347e <__ultoa_invert+0x6c>
    3494:	ea cf       	rjmp	.-44     	; 0x346a <__ultoa_invert+0x58>
    3496:	b4 e0       	ldi	r27, 0x04	; 4
    3498:	a6 95       	lsr	r26
    349a:	97 95       	ror	r25
    349c:	87 95       	ror	r24
    349e:	77 95       	ror	r23
    34a0:	67 95       	ror	r22
    34a2:	ba 95       	dec	r27
    34a4:	c9 f7       	brne	.-14     	; 0x3498 <__ultoa_invert+0x86>
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	61 05       	cpc	r22, r1
    34aa:	71 05       	cpc	r23, r1
    34ac:	08 95       	ret
    34ae:	9b 01       	movw	r18, r22
    34b0:	ac 01       	movw	r20, r24
    34b2:	0a 2e       	mov	r0, r26
    34b4:	06 94       	lsr	r0
    34b6:	57 95       	ror	r21
    34b8:	47 95       	ror	r20
    34ba:	37 95       	ror	r19
    34bc:	27 95       	ror	r18
    34be:	ba 95       	dec	r27
    34c0:	c9 f7       	brne	.-14     	; 0x34b4 <__ultoa_invert+0xa2>
    34c2:	62 0f       	add	r22, r18
    34c4:	73 1f       	adc	r23, r19
    34c6:	84 1f       	adc	r24, r20
    34c8:	95 1f       	adc	r25, r21
    34ca:	a0 1d       	adc	r26, r0
    34cc:	08 95       	ret

000034ce <__mulsi3>:
    34ce:	62 9f       	mul	r22, r18
    34d0:	d0 01       	movw	r26, r0
    34d2:	73 9f       	mul	r23, r19
    34d4:	f0 01       	movw	r30, r0
    34d6:	82 9f       	mul	r24, r18
    34d8:	e0 0d       	add	r30, r0
    34da:	f1 1d       	adc	r31, r1
    34dc:	64 9f       	mul	r22, r20
    34de:	e0 0d       	add	r30, r0
    34e0:	f1 1d       	adc	r31, r1
    34e2:	92 9f       	mul	r25, r18
    34e4:	f0 0d       	add	r31, r0
    34e6:	83 9f       	mul	r24, r19
    34e8:	f0 0d       	add	r31, r0
    34ea:	74 9f       	mul	r23, r20
    34ec:	f0 0d       	add	r31, r0
    34ee:	65 9f       	mul	r22, r21
    34f0:	f0 0d       	add	r31, r0
    34f2:	99 27       	eor	r25, r25
    34f4:	72 9f       	mul	r23, r18
    34f6:	b0 0d       	add	r27, r0
    34f8:	e1 1d       	adc	r30, r1
    34fa:	f9 1f       	adc	r31, r25
    34fc:	63 9f       	mul	r22, r19
    34fe:	b0 0d       	add	r27, r0
    3500:	e1 1d       	adc	r30, r1
    3502:	f9 1f       	adc	r31, r25
    3504:	bd 01       	movw	r22, r26
    3506:	cf 01       	movw	r24, r30
    3508:	11 24       	eor	r1, r1
    350a:	08 95       	ret

0000350c <__divmodsi4>:
    350c:	97 fb       	bst	r25, 7
    350e:	09 2e       	mov	r0, r25
    3510:	05 26       	eor	r0, r21
    3512:	0e d0       	rcall	.+28     	; 0x3530 <__divmodsi4_neg1>
    3514:	57 fd       	sbrc	r21, 7
    3516:	04 d0       	rcall	.+8      	; 0x3520 <__divmodsi4_neg2>
    3518:	4b d0       	rcall	.+150    	; 0x35b0 <__udivmodsi4>
    351a:	0a d0       	rcall	.+20     	; 0x3530 <__divmodsi4_neg1>
    351c:	00 1c       	adc	r0, r0
    351e:	38 f4       	brcc	.+14     	; 0x352e <__divmodsi4_exit>

00003520 <__divmodsi4_neg2>:
    3520:	50 95       	com	r21
    3522:	40 95       	com	r20
    3524:	30 95       	com	r19
    3526:	21 95       	neg	r18
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	4f 4f       	sbci	r20, 0xFF	; 255
    352c:	5f 4f       	sbci	r21, 0xFF	; 255

0000352e <__divmodsi4_exit>:
    352e:	08 95       	ret

00003530 <__divmodsi4_neg1>:
    3530:	f6 f7       	brtc	.-4      	; 0x352e <__divmodsi4_exit>
    3532:	90 95       	com	r25
    3534:	80 95       	com	r24
    3536:	70 95       	com	r23
    3538:	61 95       	neg	r22
    353a:	7f 4f       	sbci	r23, 0xFF	; 255
    353c:	8f 4f       	sbci	r24, 0xFF	; 255
    353e:	9f 4f       	sbci	r25, 0xFF	; 255
    3540:	08 95       	ret

00003542 <__prologue_saves__>:
    3542:	2f 92       	push	r2
    3544:	3f 92       	push	r3
    3546:	4f 92       	push	r4
    3548:	5f 92       	push	r5
    354a:	6f 92       	push	r6
    354c:	7f 92       	push	r7
    354e:	8f 92       	push	r8
    3550:	9f 92       	push	r9
    3552:	af 92       	push	r10
    3554:	bf 92       	push	r11
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	ff 92       	push	r15
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	ca 1b       	sub	r28, r26
    356c:	db 0b       	sbc	r29, r27
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	09 94       	ijmp

0000357a <__epilogue_restores__>:
    357a:	2a 88       	ldd	r2, Y+18	; 0x12
    357c:	39 88       	ldd	r3, Y+17	; 0x11
    357e:	48 88       	ldd	r4, Y+16	; 0x10
    3580:	5f 84       	ldd	r5, Y+15	; 0x0f
    3582:	6e 84       	ldd	r6, Y+14	; 0x0e
    3584:	7d 84       	ldd	r7, Y+13	; 0x0d
    3586:	8c 84       	ldd	r8, Y+12	; 0x0c
    3588:	9b 84       	ldd	r9, Y+11	; 0x0b
    358a:	aa 84       	ldd	r10, Y+10	; 0x0a
    358c:	b9 84       	ldd	r11, Y+9	; 0x09
    358e:	c8 84       	ldd	r12, Y+8	; 0x08
    3590:	df 80       	ldd	r13, Y+7	; 0x07
    3592:	ee 80       	ldd	r14, Y+6	; 0x06
    3594:	fd 80       	ldd	r15, Y+5	; 0x05
    3596:	0c 81       	ldd	r16, Y+4	; 0x04
    3598:	1b 81       	ldd	r17, Y+3	; 0x03
    359a:	aa 81       	ldd	r26, Y+2	; 0x02
    359c:	b9 81       	ldd	r27, Y+1	; 0x01
    359e:	ce 0f       	add	r28, r30
    35a0:	d1 1d       	adc	r29, r1
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	ed 01       	movw	r28, r26
    35ae:	08 95       	ret

000035b0 <__udivmodsi4>:
    35b0:	a1 e2       	ldi	r26, 0x21	; 33
    35b2:	1a 2e       	mov	r1, r26
    35b4:	aa 1b       	sub	r26, r26
    35b6:	bb 1b       	sub	r27, r27
    35b8:	fd 01       	movw	r30, r26
    35ba:	0d c0       	rjmp	.+26     	; 0x35d6 <__udivmodsi4_ep>

000035bc <__udivmodsi4_loop>:
    35bc:	aa 1f       	adc	r26, r26
    35be:	bb 1f       	adc	r27, r27
    35c0:	ee 1f       	adc	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	a2 17       	cp	r26, r18
    35c6:	b3 07       	cpc	r27, r19
    35c8:	e4 07       	cpc	r30, r20
    35ca:	f5 07       	cpc	r31, r21
    35cc:	20 f0       	brcs	.+8      	; 0x35d6 <__udivmodsi4_ep>
    35ce:	a2 1b       	sub	r26, r18
    35d0:	b3 0b       	sbc	r27, r19
    35d2:	e4 0b       	sbc	r30, r20
    35d4:	f5 0b       	sbc	r31, r21

000035d6 <__udivmodsi4_ep>:
    35d6:	66 1f       	adc	r22, r22
    35d8:	77 1f       	adc	r23, r23
    35da:	88 1f       	adc	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	1a 94       	dec	r1
    35e0:	69 f7       	brne	.-38     	; 0x35bc <__udivmodsi4_loop>
    35e2:	60 95       	com	r22
    35e4:	70 95       	com	r23
    35e6:	80 95       	com	r24
    35e8:	90 95       	com	r25
    35ea:	9b 01       	movw	r18, r22
    35ec:	ac 01       	movw	r20, r24
    35ee:	bd 01       	movw	r22, r26
    35f0:	cf 01       	movw	r24, r30
    35f2:	08 95       	ret

000035f4 <_exit>:
    35f4:	f8 94       	cli

000035f6 <__stop_program>:
    35f6:	ff cf       	rjmp	.-2      	; 0x35f6 <__stop_program>
