
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00003ff2  00004086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  0080020a  0080020a  00004190  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007f5  00000000  00000000  000042f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030fc  00000000  00000000  00004ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e4f  00000000  00000000  00007be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c35  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  0000b668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000995  00000000  00000000  0000bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002fb7  00000000  00000000  0000c57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000f534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	12 e0       	ldi	r17, 0x02	; 2
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	e2 ef       	ldi	r30, 0xF2	; 242
     bcc:	ff e3       	ldi	r31, 0x3F	; 63
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	aa 30       	cpi	r26, 0x0A	; 10
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	14 e0       	ldi	r17, 0x04	; 4
     bdc:	aa e0       	ldi	r26, 0x0A	; 10
     bde:	b2 e0       	ldi	r27, 0x02	; 2
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	a9 31       	cpi	r26, 0x19	; 25
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 6f 06 	call	0xcde	; 0xcde <main>
     bee:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <__vector_11>:
}

uint8_t ms, ms10,ms100,sec,min,entprell, state;

ISR (TIMER1_COMPA_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
	ms10++;
     c04:	90 91 0d 02 	lds	r25, 0x020D
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 0d 02 	sts	0x020D, r25
	
	if(entprell != 0){
     c0e:	80 91 0e 02 	lds	r24, 0x020E
     c12:	88 23       	and	r24, r24
     c14:	19 f0       	breq	.+6      	; 0xc1c <__vector_11+0x26>
		entprell--;
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 0e 02 	sts	0x020E, r24
	}
	
	//10ms
	if(ms10 == 10){
     c1c:	9a 30       	cpi	r25, 0x0A	; 10
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__vector_11+0x38>
		ms10 = 0;
     c20:	10 92 0d 02 	sts	0x020D, r1
		ms100++;
     c24:	80 91 10 02 	lds	r24, 0x0210
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 10 02 	sts	0x0210, r24
	}
	
	//100ms
    if(ms100 == 10){
     c2e:	80 91 10 02 	lds	r24, 0x0210
     c32:	8a 30       	cpi	r24, 0x0A	; 10
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_11+0x4e>
		ms100 = 0;
     c36:	10 92 10 02 	sts	0x0210, r1
		sec++;
     c3a:	80 91 11 02 	lds	r24, 0x0211
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	80 93 11 02 	sts	0x0211, r24
	}
	
	//Minute
	if(sec == 10){
     c44:	90 91 11 02 	lds	r25, 0x0211
     c48:	9a 30       	cpi	r25, 0x0A	; 10
     c4a:	69 f4       	brne	.+26     	; 0xc66 <__vector_11+0x70>
		sec = 0;
     c4c:	10 92 11 02 	sts	0x0211, r1
		min++;
     c50:	80 91 0f 02 	lds	r24, 0x020F
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 0f 02 	sts	0x020F, r24
		if(state == 11){
     c5a:	80 91 0c 02 	lds	r24, 0x020C
     c5e:	8b 30       	cpi	r24, 0x0B	; 11
     c60:	11 f4       	brne	.+4      	; 0xc66 <__vector_11+0x70>
			state = 10;
     c62:	90 93 0c 02 	sts	0x020C, r25
		}
	}
}
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <RTCWriteByte.1939>:
		TWIStop();
		
		return u8data;
	}
	
	uint8_t RTCWriteByte ( uint8_t u8addr, uint8_t u8data ){
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	18 2f       	mov	r17, r24
     c7a:	06 2f       	mov	r16, r22
		
		TWIStart();
     c7c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
		TWIWrite( RTCWRITE );  
     c80:	8e ed       	ldi	r24, 0xDE	; 222
     c82:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		TWIWrite( u8addr );
     c86:	81 2f       	mov	r24, r17
     c88:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		TWIWrite( u8data );
     c8c:	80 2f       	mov	r24, r16
     c8e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		TWIStop();
     c92:	0e 94 bc 1a 	call	0x3578	; 0x3578 <TWIStop>
     c96:	84 ef       	ldi	r24, 0xF4	; 244
     c98:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9a:	20 e9       	ldi	r18, 0x90	; 144
     c9c:	31 e0       	ldi	r19, 0x01	; 1
     c9e:	f9 01       	movw	r30, r18
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <RTCWriteByte.1939+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	d9 f7       	brne	.-10     	; 0xc9e <RTCWriteByte.1939+0x2a>
		
		_delay_ms(50);
		
		return 0;
	}
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <RTCReadByte.1934>:
	
	min = 1;
	
	TWIInit();
	
	uint8_t RTCReadByte ( uint8_t u8addr ){
     cb0:	1f 93       	push	r17
     cb2:	18 2f       	mov	r17, r24
		
		uint8_t u8data = 0;
		
		TWIStart();
     cb4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
		TWIWrite( RTCWRITE );
     cb8:	8e ed       	ldi	r24, 0xDE	; 222
     cba:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		TWIWrite( u8addr );
     cbe:	81 2f       	mov	r24, r17
     cc0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		TWIStart();
     cc4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
		TWIWrite( RTCREAD );
     cc8:	8f ed       	ldi	r24, 0xDF	; 223
     cca:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
		u8data = TWIReadNACK();
     cce:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <TWIReadNACK>
     cd2:	18 2f       	mov	r17, r24
		TWIStop();
     cd4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <TWIStop>
		
		return u8data;
	}
     cd8:	81 2f       	mov	r24, r17
     cda:	1f 91       	pop	r17
     cdc:	08 95       	ret

00000cde <main>:
}


	
int main(void)
{	
     cde:	2f 92       	push	r2
     ce0:	3f 92       	push	r3
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	a4 97       	sbiw	r28, 0x24	; 36
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
	char string[30] = " ";
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	ab 83       	std	Y+3, r26	; 0x03
     d20:	bc 83       	std	Y+4, r27	; 0x04
     d22:	fe 01       	movw	r30, r28
     d24:	35 96       	adiw	r30, 0x05	; 5
     d26:	8a e1       	ldi	r24, 0x1A	; 26
     d28:	df 01       	movw	r26, r30
     d2a:	1d 92       	st	X+, r1
     d2c:	8a 95       	dec	r24
     d2e:	e9 f7       	brne	.-6      	; 0xd2a <main+0x4c>
	uint8_t month_ten	= 0;
	uint8_t year_one	= 0;
	uint8_t year_ten	= 0;
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
     d30:	22 9a       	sbi	0x04, 2	; 4
	//PORTB |= (1<<PB2);
	PORTB &= ~(1<<PB2);
     d32:	2a 98       	cbi	0x05, 2	; 5
	
	DDRC &= ~(1<<PC0); //Eingang Hallsensor
     d34:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PC0);	//Pullup Hallsensor einschalten
     d36:	40 9a       	sbi	0x08, 0	; 8
	
	DDRC |=(1<<PC1); 	//Eingang Hallsensor
     d38:	39 9a       	sbi	0x07, 1	; 7
	PORTC |= (1<<PC1);	//Pullup Hallsensor einschalten
     d3a:	41 9a       	sbi	0x08, 1	; 8
	
	
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     d3c:	8a b1       	in	r24, 0x0a	; 10
     d3e:	8b 79       	andi	r24, 0x9B	; 155
     d40:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     d42:	8b b1       	in	r24, 0x0b	; 11
     d44:	84 66       	ori	r24, 0x64	; 100
     d46:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<PD4); //T0 Counter Input
     d48:	54 98       	cbi	0x0a, 4	; 10
	TCCR0B |= (1<<CS02) | (1<<CS01) | (1<<CS00);//Counter 0 enabled clock on rising edge
     d4a:	85 b5       	in	r24, 0x25	; 37
     d4c:	87 60       	ori	r24, 0x07	; 7
     d4e:	85 bd       	out	0x25, r24	; 37
	
	//Timer 1 Configuration
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
     d50:	8c e9       	ldi	r24, 0x9C	; 156
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 89 00 	sts	0x0089, r25
     d58:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     d5c:	80 91 81 00 	lds	r24, 0x0081
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     d66:	80 91 6f 00 	lds	r24, 0x006F
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
     d70:	80 91 81 00 	lds	r24, 0x0081
     d74:	85 60       	ori	r24, 0x05	; 5
     d76:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 1024 and start the timer

    sei();
     d7a:	78 94       	sei
static void setup(void);

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     d7c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <glcd_init>
    sei();
    // enable interrupts
	
	setup();
	
	glcd_clear();
     d80:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
	glcd_write();
     d84:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
     d88:	88 e6       	ldi	r24, 0x68	; 104
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	47 e0       	ldi	r20, 0x07	; 7
     d90:	20 e2       	ldi	r18, 0x20	; 32
     d92:	0f e7       	ldi	r16, 0x7F	; 127
     d94:	0e 94 ad 18 	call	0x315a	; 0x315a <glcd_tiny_set_font>
	glcd_clear_buffer();
     d98:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
	
	min = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 0f 02 	sts	0x020F, r24
	
	TWIInit();
     da2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <TWIInit>
		
		return 0;
	}
	
	void InitRTC( void ){
		RTCWriteByte(0x00, 0b10000000);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	60 e8       	ldi	r22, 0x80	; 128
     daa:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
     dae:	84 ef       	ldi	r24, 0xF4	; 244
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	20 e9       	ldi	r18, 0x90	; 144
     db4:	31 e0       	ldi	r19, 0x01	; 1
     db6:	f9 01       	movw	r30, r18
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbe:	d9 f7       	brne	.-10     	; 0xdb6 <main+0xd8>
     dc0:	b1 e0       	ldi	r27, 0x01	; 1
     dc2:	bc a3       	std	Y+36, r27	; 0x24
     dc4:	ff 24       	eor	r15, r15
     dc6:	1b a2       	std	Y+35, r1	; 0x23
     dc8:	88 24       	eor	r8, r8
     dca:	1a a2       	std	Y+34, r1	; 0x22
     dcc:	19 a2       	std	Y+33, r1	; 0x21
     dce:	18 a2       	std	Y+32, r1	; 0x20
     dd0:	99 24       	eor	r9, r9
     dd2:	33 24       	eor	r3, r3
     dd4:	ee 24       	eor	r14, r14
     dd6:	e3 94       	inc	r14
     dd8:	aa 24       	eor	r10, r10
     dda:	a3 94       	inc	r10
     ddc:	44 24       	eor	r4, r4
     dde:	bb 24       	eor	r11, r11
     de0:	b3 94       	inc	r11
     de2:	55 24       	eor	r5, r5
     de4:	22 24       	eor	r2, r2
     de6:	1f 8e       	std	Y+31, r1	; 0x1f
     de8:	70 e9       	ldi	r23, 0x90	; 144
     dea:	c7 2e       	mov	r12, r23
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	d7 2e       	mov	r13, r23
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <main+0x118>
     df2:	ff 24       	eor	r15, r15
     df4:	f3 94       	inc	r15
	}
	
	InitRTC();
	
	while( 1 ){
		if(!(PIND & (1<<PD6))){
     df6:	4e 99       	sbic	0x09, 6	; 9
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <main+0x140>
			choice--;
     dfa:	8c a1       	ldd	r24, Y+36	; 0x24
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	8c a3       	std	Y+36, r24	; 0x24
			if( choice == 0 ){
     e00:	88 23       	and	r24, r24
     e02:	11 f4       	brne	.+4      	; 0xe08 <main+0x12a>
     e04:	93 e0       	ldi	r25, 0x03	; 3
     e06:	9c a3       	std	Y+36, r25	; 0x24
     e08:	84 e8       	ldi	r24, 0x84	; 132
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	f6 01       	movw	r30, r12
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <main+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	d9 f7       	brne	.-10     	; 0xe0c <main+0x12e>
				choice = 3;
			}
			_delay_ms(time);
			glcd_clear();
     e16:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
			glcd_clear_buffer();
     e1a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
		}
		
		if(!(PIND & (1<<PD5))){
     e1e:	4d 99       	sbic	0x09, 5	; 9
     e20:	12 c0       	rjmp	.+36     	; 0xe46 <main+0x168>
			choice++;
     e22:	ac a1       	ldd	r26, Y+36	; 0x24
     e24:	af 5f       	subi	r26, 0xFF	; 255
     e26:	ac a3       	std	Y+36, r26	; 0x24
			if( choice == 4 ){
     e28:	a4 30       	cpi	r26, 0x04	; 4
     e2a:	11 f4       	brne	.+4      	; 0xe30 <main+0x152>
     e2c:	b1 e0       	ldi	r27, 0x01	; 1
     e2e:	bc a3       	std	Y+36, r27	; 0x24
     e30:	84 e8       	ldi	r24, 0x84	; 132
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	f6 01       	movw	r30, r12
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <main+0x158>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	d9 f7       	brne	.-10     	; 0xe34 <main+0x156>
				choice = 1;
			}
			_delay_ms(time);
			glcd_clear();
     e3e:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
			glcd_clear_buffer();
     e42:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
		}
		
		// Inhaltsverzeichnis
		
		sprintf(string,"OFF");
     e46:	8e 01       	movw	r16, r28
     e48:	0f 5f       	subi	r16, 0xFF	; 255
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	c8 01       	movw	r24, r16
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
		glcd_draw_string_xy(0,0,string);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	a8 01       	movw	r20, r16
     e5c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
		glcd_write();
     e60:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		sprintf(string,"Time");
     e64:	c8 01       	movw	r24, r16
     e66:	64 e0       	ldi	r22, 0x04	; 4
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
		glcd_draw_string_xy(0,8,string);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	68 e0       	ldi	r22, 0x08	; 8
     e72:	a8 01       	movw	r20, r16
     e74:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
		glcd_write();
     e78:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		sprintf(string,"Settings");
     e7c:	c8 01       	movw	r24, r16
     e7e:	69 e0       	ldi	r22, 0x09	; 9
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
		glcd_draw_string_xy(0,16,string);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	60 e1       	ldi	r22, 0x10	; 16
     e8a:	a8 01       	movw	r20, r16
     e8c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
		glcd_write();
     e90:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		sprintf(string,"<");
     e94:	c8 01       	movw	r24, r16
     e96:	62 e1       	ldi	r22, 0x12	; 18
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
		
		// Auswahl von Inhaltsverzeichnis
		
		switch ( choice ){
     e9e:	8c a1       	ldd	r24, Y+36	; 0x24
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	a1 f0       	breq	.+40     	; 0xecc <main+0x1ee>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	19 f1       	breq	.+70     	; 0xeee <main+0x210>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	89 f5       	brne	.+98     	; 0xf0e <main+0x230>
			case 1:
				glcd_draw_string_xy(78,0,string);
     eac:	8e e4       	ldi	r24, 0x4E	; 78
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	a8 01       	movw	r20, r16
     eb2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
				if(!(PIND & (1<<PD2))){
     eb6:	4a 99       	sbic	0x09, 2	; 9
     eb8:	2a c0       	rjmp	.+84     	; 0xf0e <main+0x230>
     eba:	84 e8       	ldi	r24, 0x84	; 132
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	f6 01       	movw	r30, r12
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <main+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	d9 f7       	brne	.-10     	; 0xebe <main+0x1e0>
     ec8:	ff 24       	eor	r15, r15
     eca:	21 c0       	rjmp	.+66     	; 0xf0e <main+0x230>
					state = off;
					_delay_ms(time);
				}
			break;
			case 2:
				glcd_draw_string_xy(78,8,string);
     ecc:	8e e4       	ldi	r24, 0x4E	; 78
     ece:	68 e0       	ldi	r22, 0x08	; 8
     ed0:	a8 01       	movw	r20, r16
     ed2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
				if(!(PIND & (1<<PD2))){
     ed6:	4a 99       	sbic	0x09, 2	; 9
     ed8:	1a c0       	rjmp	.+52     	; 0xf0e <main+0x230>
     eda:	84 e8       	ldi	r24, 0x84	; 132
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	f6 01       	movw	r30, r12
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <main+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	d9 f7       	brne	.-10     	; 0xede <main+0x200>
     ee8:	63 e0       	ldi	r22, 0x03	; 3
     eea:	f6 2e       	mov	r15, r22
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <main+0x230>
					state = act_time;
					_delay_ms(time);
				}
			break;
			case 3:
				glcd_draw_string_xy(78,16,string);
     eee:	8e e4       	ldi	r24, 0x4E	; 78
     ef0:	60 e1       	ldi	r22, 0x10	; 16
     ef2:	a8 01       	movw	r20, r16
     ef4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
				if(!(PIND & (1<<PD2))){
     ef8:	4a 99       	sbic	0x09, 2	; 9
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <main+0x230>
     efc:	84 e8       	ldi	r24, 0x84	; 132
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	f6 01       	movw	r30, r12
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <main+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f08:	d9 f7       	brne	.-10     	; 0xf00 <main+0x222>
     f0a:	52 e0       	ldi	r21, 0x02	; 2
     f0c:	f5 2e       	mov	r15, r21
					_delay_ms(time);
				}
			break;
		}
		
		glcd_write();
     f0e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		
		// Modus
		
		switch( state ){
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	f9 16       	cp	r15, r25
     f16:	b9 f0       	breq	.+46     	; 0xf46 <main+0x268>
     f18:	a3 e0       	ldi	r26, 0x03	; 3
     f1a:	fa 16       	cp	r15, r26
     f1c:	09 f4       	brne	.+2      	; 0xf20 <main+0x242>
     f1e:	45 c3       	rjmp	.+1674   	; 0x15aa <main+0x8cc>
     f20:	ff 20       	and	r15, r15
     f22:	09 f0       	breq	.+2      	; 0xf26 <main+0x248>
     f24:	68 cf       	rjmp	.-304    	; 0xdf6 <main+0x118>
			
			case menu:
			
			break;
			case off:
				glcd_clear();
     f26:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_write();
     f2a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
				glcd_clear_buffer();
     f2e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
				while((PIND & (1<<PD2)));
     f32:	4a 99       	sbic	0x09, 2	; 9
     f34:	fe cf       	rjmp	.-4      	; 0xf32 <main+0x254>
     f36:	84 e8       	ldi	r24, 0x84	; 132
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	f6 01       	movw	r30, r12
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <main+0x25e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	d9 f7       	brne	.-10     	; 0xf3a <main+0x25c>
     f44:	56 cf       	rjmp	.-340    	; 0xdf2 <main+0x114>
			break;
			case settings:
				
				// Date
				
				glcd_clear();
     f46:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_clear_buffer();
     f4a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
				sprintf(string,"Date:");
     f4e:	8e 01       	movw	r16, r28
     f50:	0f 5f       	subi	r16, 0xFF	; 255
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	c8 01       	movw	r24, r16
     f56:	64 e1       	ldi	r22, 0x14	; 20
     f58:	71 e0       	ldi	r23, 0x01	; 1
     f5a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
				glcd_draw_string_xy(0,0,string);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	a8 01       	movw	r20, r16
     f64:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
						year_ten--;
						if( year_ten == 255 ){
							year_ten = 9;
						}
					}
					sprintf(string,"%d%d", year_ten, year_one);
     f68:	f0 2e       	mov	r15, r16
     f6a:	01 2f       	mov	r16, r17
				glcd_clear();
				glcd_clear_buffer();
				sprintf(string,"Date:");
				glcd_draw_string_xy(0,0,string);
				for( circle = 0; circle < 1; ){		// Year
					if(!(PIND & (1<<PD2))){
     f6c:	4a 99       	sbic	0x09, 2	; 9
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <main+0x296>
     f70:	12 e0       	ldi	r17, 0x02	; 2
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <main+0x298>
     f74:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
     f76:	4e 99       	sbic	0x09, 6	; 9
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <main+0x2ac>
     f7a:	88 ee       	ldi	r24, 0xE8	; 232
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	f6 01       	movw	r30, r12
     f80:	31 97       	sbiw	r30, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <main+0x2a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	d9 f7       	brne	.-10     	; 0xf7e <main+0x2a0>
						year_one--;
     f88:	2a 94       	dec	r2
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
     f8a:	4d 99       	sbic	0x09, 5	; 9
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <main+0x2c0>
     f8e:	88 ee       	ldi	r24, 0xE8	; 232
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	f6 01       	movw	r30, r12
     f94:	31 97       	sbiw	r30, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <main+0x2b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	d9 f7       	brne	.-10     	; 0xf92 <main+0x2b4>
						year_one++;
     f9c:	23 94       	inc	r2
						_delay_ms(100);
					}
					if( year_one == 10 ){
     f9e:	ba e0       	ldi	r27, 0x0A	; 10
     fa0:	2b 16       	cp	r2, r27
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <main+0x2d4>
						year_one = 0;
						year_ten++;
     fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	8f 8f       	std	Y+31, r24	; 0x1f
						if( year_ten == 10 ){
     faa:	8a 30       	cpi	r24, 0x0A	; 10
     fac:	09 f0       	breq	.+2      	; 0xfb0 <main+0x2d2>
     fae:	3e c4       	rjmp	.+2172   	; 0x182c <main+0xb4e>
     fb0:	3c c4       	rjmp	.+2168   	; 0x182a <main+0xb4c>
							year_ten = 0;
						}
					}
					if( year_one == 255 ){
     fb2:	9f ef       	ldi	r25, 0xFF	; 255
     fb4:	29 16       	cp	r2, r25
     fb6:	61 f4       	brne	.+24     	; 0xfd0 <main+0x2f2>
						year_one = 9;
						year_ten--;
     fb8:	af 8d       	ldd	r26, Y+31	; 0x1f
     fba:	a1 50       	subi	r26, 0x01	; 1
     fbc:	af 8f       	std	Y+31, r26	; 0x1f
						if( year_ten == 255 ){
     fbe:	af 3f       	cpi	r26, 0xFF	; 255
     fc0:	29 f4       	brne	.+10     	; 0xfcc <main+0x2ee>
     fc2:	49 e0       	ldi	r20, 0x09	; 9
     fc4:	24 2e       	mov	r2, r20
     fc6:	b9 e0       	ldi	r27, 0x09	; 9
     fc8:	bf 8f       	std	Y+31, r27	; 0x1f
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <main+0x2f2>
     fcc:	39 e0       	ldi	r19, 0x09	; 9
     fce:	23 2e       	mov	r2, r19
							year_ten = 9;
						}
					}
					sprintf(string,"%d%d", year_ten, year_one);
     fd0:	8d b7       	in	r24, 0x3d	; 61
     fd2:	9e b7       	in	r25, 0x3e	; 62
     fd4:	08 97       	sbiw	r24, 0x08	; 8
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	9e bf       	out	0x3e, r25	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	8d bf       	out	0x3d, r24	; 61
     fe0:	ed b7       	in	r30, 0x3d	; 61
     fe2:	fe b7       	in	r31, 0x3e	; 62
     fe4:	31 96       	adiw	r30, 0x01	; 1
     fe6:	ad b7       	in	r26, 0x3d	; 61
     fe8:	be b7       	in	r27, 0x3e	; 62
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	fc 92       	st	X, r15
     fee:	11 97       	sbiw	r26, 0x01	; 1
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	0c 93       	st	X, r16
     ff4:	8a e1       	ldi	r24, 0x1A	; 26
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	93 83       	std	Z+3, r25	; 0x03
     ffa:	82 83       	std	Z+2, r24	; 0x02
     ffc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffe:	94 83       	std	Z+4, r25	; 0x04
    1000:	15 82       	std	Z+5, r1	; 0x05
    1002:	26 82       	std	Z+6, r2	; 0x06
    1004:	17 82       	std	Z+7, r1	; 0x07
    1006:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(64,0,string);
    100a:	ad b7       	in	r26, 0x3d	; 61
    100c:	be b7       	in	r27, 0x3e	; 62
    100e:	18 96       	adiw	r26, 0x08	; 8
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	be bf       	out	0x3e, r27	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	ad bf       	out	0x3d, r26	; 61
    101a:	80 e4       	ldi	r24, 0x40	; 64
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	4f 2d       	mov	r20, r15
    1020:	50 2f       	mov	r21, r16
    1022:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    1026:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
				
				glcd_clear();
				glcd_clear_buffer();
				sprintf(string,"Date:");
				glcd_draw_string_xy(0,0,string);
				for( circle = 0; circle < 1; ){		// Year
    102a:	11 23       	and	r17, r17
    102c:	09 f4       	brne	.+2      	; 0x1030 <main+0x352>
    102e:	9e cf       	rjmp	.-196    	; 0xf6c <main+0x28e>
					}
					sprintf(string,"%d%d", year_ten, year_one);
					glcd_draw_string_xy(64,0,string);
					glcd_write();
				}
				RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
    1030:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1032:	62 95       	swap	r22
    1034:	60 7f       	andi	r22, 0xF0	; 240
    1036:	62 0d       	add	r22, r2
    1038:	86 e0       	ldi	r24, 0x06	; 6
    103a:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    103e:	84 e8       	ldi	r24, 0x84	; 132
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	f6 01       	movw	r30, r12
    1044:	31 97       	sbiw	r30, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <main+0x366>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1048:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	d9 f7       	brne	.-10     	; 0x1042 <main+0x364>
					}
					if(( month_ten == 1 ) && ( month_one == 9 )){
						month_ten	= 1;
						month_one	= 2;
					}
					sprintf(string,"%d%d.", month_ten, month_one);
    104c:	3e 01       	movw	r6, r28
    104e:	08 94       	sec
    1050:	61 1c       	adc	r6, r1
    1052:	71 1c       	adc	r7, r1
					glcd_write();
				}
				RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Month
					if(!(PIND & (1<<PD2))){
    1054:	4a 99       	sbic	0x09, 2	; 9
    1056:	02 c0       	rjmp	.+4      	; 0x105c <main+0x37e>
    1058:	12 e0       	ldi	r17, 0x02	; 2
    105a:	01 c0       	rjmp	.+2      	; 0x105e <main+0x380>
    105c:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    105e:	4e 99       	sbic	0x09, 6	; 9
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <main+0x394>
    1062:	88 ee       	ldi	r24, 0xE8	; 232
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	f6 01       	movw	r30, r12
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <main+0x38a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	d9 f7       	brne	.-10     	; 0x1066 <main+0x388>
						month_one--;
    1070:	ba 94       	dec	r11
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    1072:	4d 99       	sbic	0x09, 5	; 9
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <main+0x3a8>
    1076:	88 ee       	ldi	r24, 0xE8	; 232
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	f6 01       	movw	r30, r12
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <main+0x39e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1080:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	d9 f7       	brne	.-10     	; 0x107a <main+0x39c>
						month_one++;
    1084:	b3 94       	inc	r11
						_delay_ms(100);
					}
					if( month_one == 10 ){
    1086:	ba e0       	ldi	r27, 0x0A	; 10
    1088:	bb 16       	cp	r11, r27
    108a:	31 f4       	brne	.+12     	; 0x1098 <main+0x3ba>
						month_one = 0;
						month_ten++;
    108c:	53 94       	inc	r5
						if( month_ten == 4 ){
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	58 16       	cp	r5, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <main+0x3b8>
    1094:	ce c3       	rjmp	.+1948   	; 0x1832 <main+0xb54>
    1096:	cc c3       	rjmp	.+1944   	; 0x1830 <main+0xb52>
							month_ten = 0;
						}
					}
					if( month_one == 255 ){
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	b9 16       	cp	r11, r25
    109c:	51 f4       	brne	.+20     	; 0x10b2 <main+0x3d4>
						month_one = 9;
						month_ten--;
    109e:	5a 94       	dec	r5
						if( month_ten == 255 ){
    10a0:	59 16       	cp	r5, r25
    10a2:	29 f4       	brne	.+10     	; 0x10ae <main+0x3d0>
    10a4:	22 e0       	ldi	r18, 0x02	; 2
    10a6:	b2 2e       	mov	r11, r18
    10a8:	55 24       	eor	r5, r5
    10aa:	53 94       	inc	r5
    10ac:	0c c0       	rjmp	.+24     	; 0x10c6 <main+0x3e8>
    10ae:	99 e0       	ldi	r25, 0x09	; 9
    10b0:	b9 2e       	mov	r11, r25
							month_ten = 1;
						}
					}
					if(( month_ten == 1 ) && ( month_one == 3 )){
    10b2:	a1 e0       	ldi	r26, 0x01	; 1
    10b4:	5a 16       	cp	r5, r26
    10b6:	39 f4       	brne	.+14     	; 0x10c6 <main+0x3e8>
    10b8:	b3 e0       	ldi	r27, 0x03	; 3
    10ba:	bb 16       	cp	r11, r27
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0x3e2>
    10be:	bb c3       	rjmp	.+1910   	; 0x1836 <main+0xb58>
    10c0:	bb 24       	eor	r11, r11
    10c2:	b3 94       	inc	r11
    10c4:	55 24       	eor	r5, r5
					}
					if(( month_ten == 1 ) && ( month_one == 9 )){
						month_ten	= 1;
						month_one	= 2;
					}
					sprintf(string,"%d%d.", month_ten, month_one);
    10c6:	8d b7       	in	r24, 0x3d	; 61
    10c8:	9e b7       	in	r25, 0x3e	; 62
    10ca:	08 97       	sbiw	r24, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	9e bf       	out	0x3e, r25	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	8d bf       	out	0x3d, r24	; 61
    10d6:	ed b7       	in	r30, 0x3d	; 61
    10d8:	fe b7       	in	r31, 0x3e	; 62
    10da:	31 96       	adiw	r30, 0x01	; 1
    10dc:	ad b7       	in	r26, 0x3d	; 61
    10de:	be b7       	in	r27, 0x3e	; 62
    10e0:	12 96       	adiw	r26, 0x02	; 2
    10e2:	7c 92       	st	X, r7
    10e4:	6e 92       	st	-X, r6
    10e6:	11 97       	sbiw	r26, 0x01	; 1
    10e8:	8f e1       	ldi	r24, 0x1F	; 31
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	93 83       	std	Z+3, r25	; 0x03
    10ee:	82 83       	std	Z+2, r24	; 0x02
    10f0:	54 82       	std	Z+4, r5	; 0x04
    10f2:	15 82       	std	Z+5, r1	; 0x05
    10f4:	b6 82       	std	Z+6, r11	; 0x06
    10f6:	17 82       	std	Z+7, r1	; 0x07
    10f8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(47,0,string);
    10fc:	ad b7       	in	r26, 0x3d	; 61
    10fe:	be b7       	in	r27, 0x3e	; 62
    1100:	18 96       	adiw	r26, 0x08	; 8
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	be bf       	out	0x3e, r27	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	ad bf       	out	0x3d, r26	; 61
    110c:	8f e2       	ldi	r24, 0x2F	; 47
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	a3 01       	movw	r20, r6
    1112:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    1116:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					glcd_draw_string_xy(64,0,string);
					glcd_write();
				}
				RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Month
    111a:	11 23       	and	r17, r17
    111c:	09 f4       	brne	.+2      	; 0x1120 <main+0x442>
    111e:	9a cf       	rjmp	.-204    	; 0x1054 <main+0x376>
					}
					sprintf(string,"%d%d.", month_ten, month_one);
					glcd_draw_string_xy(47,0,string);
					glcd_write();
				}
				RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
    1120:	65 2d       	mov	r22, r5
    1122:	62 95       	swap	r22
    1124:	60 7f       	andi	r22, 0xF0	; 240
    1126:	6b 0d       	add	r22, r11
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    112e:	84 e8       	ldi	r24, 0x84	; 132
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	f6 01       	movw	r30, r12
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <main+0x456>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	d9 f7       	brne	.-10     	; 0x1132 <main+0x454>
						day_one	= 0;
					}
					if(( day_ten == 3 ) && ( day_one == 9 )){
						day_one	= 2;
					}
					sprintf(string,"%d%d.", day_ten, day_one);
    113c:	3e 01       	movw	r6, r28
    113e:	08 94       	sec
    1140:	61 1c       	adc	r6, r1
    1142:	71 1c       	adc	r7, r1
				}
				RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Day
				
					if(!(PIND & (1<<PD2))){
    1144:	4a 99       	sbic	0x09, 2	; 9
    1146:	02 c0       	rjmp	.+4      	; 0x114c <main+0x46e>
    1148:	12 e0       	ldi	r17, 0x02	; 2
    114a:	01 c0       	rjmp	.+2      	; 0x114e <main+0x470>
    114c:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    114e:	4e 99       	sbic	0x09, 6	; 9
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <main+0x484>
    1152:	88 ee       	ldi	r24, 0xE8	; 232
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	f6 01       	movw	r30, r12
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <main+0x47a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	d9 f7       	brne	.-10     	; 0x1156 <main+0x478>
						day_one--;
    1160:	aa 94       	dec	r10
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    1162:	4d 99       	sbic	0x09, 5	; 9
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <main+0x498>
    1166:	88 ee       	ldi	r24, 0xE8	; 232
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	f6 01       	movw	r30, r12
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <main+0x48e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	d9 f7       	brne	.-10     	; 0x116a <main+0x48c>
						day_one++;
    1174:	a3 94       	inc	r10
						_delay_ms(100);
					}
					if( day_one == 10 ){
    1176:	ba e0       	ldi	r27, 0x0A	; 10
    1178:	ab 16       	cp	r10, r27
    117a:	31 f4       	brne	.+12     	; 0x1188 <main+0x4aa>
						day_one = 0;
						day_ten++;
    117c:	43 94       	inc	r4
						if( day_ten == 4 ){
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	48 16       	cp	r4, r24
    1182:	09 f0       	breq	.+2      	; 0x1186 <main+0x4a8>
    1184:	60 c3       	rjmp	.+1728   	; 0x1846 <main+0xb68>
    1186:	5e c3       	rjmp	.+1724   	; 0x1844 <main+0xb66>
							day_ten = 0;
						}
					}
					if( day_one == 255 ){
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	a9 16       	cp	r10, r25
    118c:	51 f4       	brne	.+20     	; 0x11a2 <main+0x4c4>
						day_one = 9;
						day_ten--;
    118e:	4a 94       	dec	r4
						if( day_ten == 255 ){
    1190:	49 16       	cp	r4, r25
    1192:	29 f4       	brne	.+10     	; 0x119e <main+0x4c0>
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	a8 2e       	mov	r10, r24
    1198:	03 e0       	ldi	r16, 0x03	; 3
    119a:	40 2e       	mov	r4, r16
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <main+0x4d4>
    119e:	b9 e0       	ldi	r27, 0x09	; 9
    11a0:	ab 2e       	mov	r10, r27
							day_ten = 3;
						}
					}
					if(( day_ten == 3 ) && ( day_one == 3 )){
    11a2:	a3 e0       	ldi	r26, 0x03	; 3
    11a4:	4a 16       	cp	r4, r26
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <main+0x4d4>
    11a8:	aa 16       	cp	r10, r26
    11aa:	09 f0       	breq	.+2      	; 0x11ae <main+0x4d0>
    11ac:	4e c3       	rjmp	.+1692   	; 0x184a <main+0xb6c>
    11ae:	aa 24       	eor	r10, r10
    11b0:	44 24       	eor	r4, r4
						day_one	= 0;
					}
					if(( day_ten == 3 ) && ( day_one == 9 )){
						day_one	= 2;
					}
					sprintf(string,"%d%d.", day_ten, day_one);
    11b2:	8d b7       	in	r24, 0x3d	; 61
    11b4:	9e b7       	in	r25, 0x3e	; 62
    11b6:	08 97       	sbiw	r24, 0x08	; 8
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	9e bf       	out	0x3e, r25	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	8d bf       	out	0x3d, r24	; 61
    11c2:	ed b7       	in	r30, 0x3d	; 61
    11c4:	fe b7       	in	r31, 0x3e	; 62
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	ad b7       	in	r26, 0x3d	; 61
    11ca:	be b7       	in	r27, 0x3e	; 62
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	7c 92       	st	X, r7
    11d0:	6e 92       	st	-X, r6
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	8f e1       	ldi	r24, 0x1F	; 31
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	93 83       	std	Z+3, r25	; 0x03
    11da:	82 83       	std	Z+2, r24	; 0x02
    11dc:	44 82       	std	Z+4, r4	; 0x04
    11de:	15 82       	std	Z+5, r1	; 0x05
    11e0:	a6 82       	std	Z+6, r10	; 0x06
    11e2:	17 82       	std	Z+7, r1	; 0x07
    11e4:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(30,0,string);
    11e8:	ad b7       	in	r26, 0x3d	; 61
    11ea:	be b7       	in	r27, 0x3e	; 62
    11ec:	18 96       	adiw	r26, 0x08	; 8
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	be bf       	out	0x3e, r27	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	ad bf       	out	0x3d, r26	; 61
    11f8:	8e e1       	ldi	r24, 0x1E	; 30
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	a3 01       	movw	r20, r6
    11fe:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    1202:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					glcd_draw_string_xy(47,0,string);
					glcd_write();
				}
				RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Day
    1206:	11 23       	and	r17, r17
    1208:	09 f4       	brne	.+2      	; 0x120c <main+0x52e>
    120a:	9c cf       	rjmp	.-200    	; 0x1144 <main+0x466>
					}
					sprintf(string,"%d%d.", day_ten, day_one);
					glcd_draw_string_xy(30,0,string);
					glcd_write();
				}
				RTCWriteByte(0x04, (( day_ten << 4 ) + day_one ));
    120c:	64 2d       	mov	r22, r4
    120e:	62 95       	swap	r22
    1210:	60 7f       	andi	r22, 0xF0	; 240
    1212:	6a 0d       	add	r22, r10
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    121a:	84 e8       	ldi	r24, 0x84	; 132
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	f6 01       	movw	r30, r12
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <main+0x542>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1226:	d9 f7       	brne	.-10     	; 0x121e <main+0x540>
						if( week == 8 ){
							week = 0;
						}
						_delay_ms(100);
					}
					sprintf(string,"day: %d", week);
    1228:	3e 01       	movw	r6, r28
    122a:	08 94       	sec
    122c:	61 1c       	adc	r6, r1
    122e:	71 1c       	adc	r7, r1
					glcd_write();
				}
				RTCWriteByte(0x04, (( day_ten << 4 ) + day_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Weekday
					if(!(PIND & (1<<PD2))){
    1230:	4a 99       	sbic	0x09, 2	; 9
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <main+0x55a>
    1234:	12 e0       	ldi	r17, 0x02	; 2
    1236:	01 c0       	rjmp	.+2      	; 0x123a <main+0x55c>
    1238:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    123a:	4e 99       	sbic	0x09, 6	; 9
    123c:	0b c0       	rjmp	.+22     	; 0x1254 <main+0x576>
						week--;
    123e:	ea 94       	dec	r14
						if( week == 0 ){
    1240:	11 f4       	brne	.+4      	; 0x1246 <main+0x568>
    1242:	a7 e0       	ldi	r26, 0x07	; 7
    1244:	ea 2e       	mov	r14, r26
    1246:	88 ee       	ldi	r24, 0xE8	; 232
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	f6 01       	movw	r30, r12
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <main+0x56e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	d9 f7       	brne	.-10     	; 0x124a <main+0x56c>
							week = 7;
						}
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    1254:	4d 99       	sbic	0x09, 5	; 9
    1256:	0c c0       	rjmp	.+24     	; 0x1270 <main+0x592>
						week++;
    1258:	e3 94       	inc	r14
						if( week == 8 ){
    125a:	b8 e0       	ldi	r27, 0x08	; 8
    125c:	eb 16       	cp	r14, r27
    125e:	09 f4       	brne	.+2      	; 0x1262 <main+0x584>
    1260:	ee 24       	eor	r14, r14
    1262:	88 ee       	ldi	r24, 0xE8	; 232
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	f6 01       	movw	r30, r12
    1268:	31 97       	sbiw	r30, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <main+0x58a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	d9 f7       	brne	.-10     	; 0x1266 <main+0x588>
							week = 0;
						}
						_delay_ms(100);
					}
					sprintf(string,"day: %d", week);
    1270:	00 d0       	rcall	.+0      	; 0x1272 <main+0x594>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <main+0x596>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <main+0x598>
    1276:	ed b7       	in	r30, 0x3d	; 61
    1278:	fe b7       	in	r31, 0x3e	; 62
    127a:	31 96       	adiw	r30, 0x01	; 1
    127c:	ad b7       	in	r26, 0x3d	; 61
    127e:	be b7       	in	r27, 0x3e	; 62
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	7c 92       	st	X, r7
    1284:	6e 92       	st	-X, r6
    1286:	11 97       	sbiw	r26, 0x01	; 1
    1288:	85 e2       	ldi	r24, 0x25	; 37
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	93 83       	std	Z+3, r25	; 0x03
    128e:	82 83       	std	Z+2, r24	; 0x02
    1290:	e4 82       	std	Z+4, r14	; 0x04
    1292:	15 82       	std	Z+5, r1	; 0x05
    1294:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(0,16,string);
    1298:	ad b7       	in	r26, 0x3d	; 61
    129a:	be b7       	in	r27, 0x3e	; 62
    129c:	16 96       	adiw	r26, 0x06	; 6
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	be bf       	out	0x3e, r27	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	ad bf       	out	0x3d, r26	; 61
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	60 e1       	ldi	r22, 0x10	; 16
    12ac:	a3 01       	movw	r20, r6
    12ae:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    12b2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					glcd_draw_string_xy(30,0,string);
					glcd_write();
				}
				RTCWriteByte(0x04, (( day_ten << 4 ) + day_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Weekday
    12b6:	11 23       	and	r17, r17
    12b8:	09 f4       	brne	.+2      	; 0x12bc <main+0x5de>
    12ba:	ba cf       	rjmp	.-140    	; 0x1230 <main+0x552>
					}
					sprintf(string,"day: %d", week);
					glcd_draw_string_xy(0,16,string);
					glcd_write();
				}
				RTCWriteByte(0x03, week );
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	6e 2d       	mov	r22, r14
    12c0:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	f6 01       	movw	r30, r12
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <main+0x5ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	d9 f7       	brne	.-10     	; 0x12c8 <main+0x5ea>
				_delay_ms(time);
				
				// Time
				
				glcd_clear();
    12d2:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_clear_buffer();
    12d6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
					}
					if(( h_ten == 2 ) && ( h_one == 9 )){
						h_ten	= 2;
						h_one	= 3;
					}
					sprintf(string,"h:   %d%d", h_ten, h_one);
    12da:	3e 01       	movw	r6, r28
    12dc:	08 94       	sec
    12de:	61 1c       	adc	r6, r1
    12e0:	71 1c       	adc	r7, r1
				// Time
				
				glcd_clear();
				glcd_clear_buffer();
				for( circle = 0; circle < 1; ){		// Houer
					if(!(PIND & (1<<PD2))){
    12e2:	4a 99       	sbic	0x09, 2	; 9
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <main+0x60c>
    12e6:	12 e0       	ldi	r17, 0x02	; 2
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <main+0x60e>
    12ea:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    12ec:	4e 99       	sbic	0x09, 6	; 9
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <main+0x622>
    12f0:	88 ee       	ldi	r24, 0xE8	; 232
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	f6 01       	movw	r30, r12
    12f6:	31 97       	sbiw	r30, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <main+0x618>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	d9 f7       	brne	.-10     	; 0x12f4 <main+0x616>
						h_one--;
    12fe:	9a 94       	dec	r9
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    1300:	4d 99       	sbic	0x09, 5	; 9
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <main+0x636>
    1304:	88 ee       	ldi	r24, 0xE8	; 232
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	f6 01       	movw	r30, r12
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <main+0x62c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	d9 f7       	brne	.-10     	; 0x1308 <main+0x62a>
						h_one++;
    1312:	93 94       	inc	r9
						_delay_ms(100);
					}
					if( h_one == 10 ){
    1314:	ba e0       	ldi	r27, 0x0A	; 10
    1316:	9b 16       	cp	r9, r27
    1318:	31 f4       	brne	.+12     	; 0x1326 <main+0x648>
						h_one = 0;
						h_ten++;
    131a:	33 94       	inc	r3
						if( h_ten == 3 ){
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	38 16       	cp	r3, r24
    1320:	09 f0       	breq	.+2      	; 0x1324 <main+0x646>
    1322:	9b c2       	rjmp	.+1334   	; 0x185a <main+0xb7c>
    1324:	99 c2       	rjmp	.+1330   	; 0x1858 <main+0xb7a>
							h_ten = 0;
						}
					}
					if( h_one == 255 ){
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	99 16       	cp	r9, r25
    132a:	51 f4       	brne	.+20     	; 0x1340 <main+0x662>
						h_one = 9;
						h_ten--;
    132c:	3a 94       	dec	r3
						if( h_ten == 255 ){
    132e:	39 16       	cp	r3, r25
    1330:	29 f4       	brne	.+10     	; 0x133c <main+0x65e>
    1332:	f3 e0       	ldi	r31, 0x03	; 3
    1334:	9f 2e       	mov	r9, r31
    1336:	e2 e0       	ldi	r30, 0x02	; 2
    1338:	3e 2e       	mov	r3, r30
    133a:	0b c0       	rjmp	.+22     	; 0x1352 <main+0x674>
    133c:	79 e0       	ldi	r23, 0x09	; 9
    133e:	97 2e       	mov	r9, r23
							h_ten = 2;
						}
					}
					if(( h_ten == 2 ) && ( h_one == 4 )){
    1340:	a2 e0       	ldi	r26, 0x02	; 2
    1342:	3a 16       	cp	r3, r26
    1344:	31 f4       	brne	.+12     	; 0x1352 <main+0x674>
    1346:	b4 e0       	ldi	r27, 0x04	; 4
    1348:	9b 16       	cp	r9, r27
    134a:	09 f0       	breq	.+2      	; 0x134e <main+0x670>
    134c:	88 c2       	rjmp	.+1296   	; 0x185e <main+0xb80>
    134e:	99 24       	eor	r9, r9
    1350:	33 24       	eor	r3, r3
					}
					if(( h_ten == 2 ) && ( h_one == 9 )){
						h_ten	= 2;
						h_one	= 3;
					}
					sprintf(string,"h:   %d%d", h_ten, h_one);
    1352:	8d b7       	in	r24, 0x3d	; 61
    1354:	9e b7       	in	r25, 0x3e	; 62
    1356:	08 97       	sbiw	r24, 0x08	; 8
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	9e bf       	out	0x3e, r25	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	8d bf       	out	0x3d, r24	; 61
    1362:	ed b7       	in	r30, 0x3d	; 61
    1364:	fe b7       	in	r31, 0x3e	; 62
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	ad b7       	in	r26, 0x3d	; 61
    136a:	be b7       	in	r27, 0x3e	; 62
    136c:	12 96       	adiw	r26, 0x02	; 2
    136e:	7c 92       	st	X, r7
    1370:	6e 92       	st	-X, r6
    1372:	11 97       	sbiw	r26, 0x01	; 1
    1374:	8d e2       	ldi	r24, 0x2D	; 45
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	93 83       	std	Z+3, r25	; 0x03
    137a:	82 83       	std	Z+2, r24	; 0x02
    137c:	34 82       	std	Z+4, r3	; 0x04
    137e:	15 82       	std	Z+5, r1	; 0x05
    1380:	96 82       	std	Z+6, r9	; 0x06
    1382:	17 82       	std	Z+7, r1	; 0x07
    1384:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(0,0,string);
    1388:	ad b7       	in	r26, 0x3d	; 61
    138a:	be b7       	in	r27, 0x3e	; 62
    138c:	18 96       	adiw	r26, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	be bf       	out	0x3e, r27	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	ad bf       	out	0x3d, r26	; 61
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	a3 01       	movw	r20, r6
    139e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    13a2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
				
				// Time
				
				glcd_clear();
				glcd_clear_buffer();
				for( circle = 0; circle < 1; ){		// Houer
    13a6:	11 23       	and	r17, r17
    13a8:	09 f4       	brne	.+2      	; 0x13ac <main+0x6ce>
    13aa:	9b cf       	rjmp	.-202    	; 0x12e2 <main+0x604>
					}
					sprintf(string,"h:   %d%d", h_ten, h_one);
					glcd_draw_string_xy(0,0,string);
					glcd_write();
				}
				RTCWriteByte(0x02, (( h_ten << 4 ) + h_one ));
    13ac:	63 2d       	mov	r22, r3
    13ae:	62 95       	swap	r22
    13b0:	60 7f       	andi	r22, 0xF0	; 240
    13b2:	69 0d       	add	r22, r9
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    13ba:	84 e8       	ldi	r24, 0x84	; 132
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	f6 01       	movw	r30, r12
    13c0:	31 97       	sbiw	r30, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <main+0x6e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	d9 f7       	brne	.-10     	; 0x13be <main+0x6e0>
						min_ten--;
						if( min_ten == 255 ){
							min_ten = 5;
						}
					}
					sprintf(string,"min: %d%d", min_ten, min_one);
    13c8:	3e 01       	movw	r6, r28
    13ca:	08 94       	sec
    13cc:	61 1c       	adc	r6, r1
    13ce:	71 1c       	adc	r7, r1
					glcd_write();
				}
				RTCWriteByte(0x02, (( h_ten << 4 ) + h_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Minute
					if(!(PIND & (1<<PD2))){
    13d0:	4a 99       	sbic	0x09, 2	; 9
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <main+0x6fa>
    13d4:	12 e0       	ldi	r17, 0x02	; 2
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <main+0x6fc>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    13da:	4e 99       	sbic	0x09, 6	; 9
    13dc:	0a c0       	rjmp	.+20     	; 0x13f2 <main+0x714>
    13de:	88 ee       	ldi	r24, 0xE8	; 232
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	f6 01       	movw	r30, r12
    13e4:	31 97       	sbiw	r30, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <main+0x706>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	d9 f7       	brne	.-10     	; 0x13e2 <main+0x704>
						min_one--;
    13ec:	b9 a1       	ldd	r27, Y+33	; 0x21
    13ee:	b1 50       	subi	r27, 0x01	; 1
    13f0:	b9 a3       	std	Y+33, r27	; 0x21
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    13f2:	4d 99       	sbic	0x09, 5	; 9
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <main+0x72c>
    13f6:	88 ee       	ldi	r24, 0xE8	; 232
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	f6 01       	movw	r30, r12
    13fc:	31 97       	sbiw	r30, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <main+0x71e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1402:	d9 f7       	brne	.-10     	; 0x13fa <main+0x71c>
						min_one++;
    1404:	89 a1       	ldd	r24, Y+33	; 0x21
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	89 a3       	std	Y+33, r24	; 0x21
						_delay_ms(100);
					}
					if( min_one == 10 ){
    140a:	99 a1       	ldd	r25, Y+33	; 0x21
    140c:	9a 30       	cpi	r25, 0x0A	; 10
    140e:	39 f4       	brne	.+14     	; 0x141e <main+0x740>
						min_one = 0;
						min_ten++;
    1410:	a8 a1       	ldd	r26, Y+32	; 0x20
    1412:	af 5f       	subi	r26, 0xFF	; 255
    1414:	a8 a3       	std	Y+32, r26	; 0x20
						if( min_ten == 6 ){
    1416:	a6 30       	cpi	r26, 0x06	; 6
    1418:	09 f0       	breq	.+2      	; 0x141c <main+0x73e>
    141a:	29 c2       	rjmp	.+1106   	; 0x186e <main+0xb90>
    141c:	27 c2       	rjmp	.+1102   	; 0x186c <main+0xb8e>
							min_ten = 0;
						}
					}
					if( min_one == 255 ){
    141e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1420:	bf 3f       	cpi	r27, 0xFF	; 255
    1422:	61 f4       	brne	.+24     	; 0x143c <main+0x75e>
						min_one = 9;
						min_ten--;
    1424:	88 a1       	ldd	r24, Y+32	; 0x20
    1426:	81 50       	subi	r24, 0x01	; 1
    1428:	88 a3       	std	Y+32, r24	; 0x20
						if( min_ten == 255 ){
    142a:	8f 3f       	cpi	r24, 0xFF	; 255
    142c:	29 f4       	brne	.+10     	; 0x1438 <main+0x75a>
    142e:	99 e0       	ldi	r25, 0x09	; 9
    1430:	99 a3       	std	Y+33, r25	; 0x21
    1432:	a5 e0       	ldi	r26, 0x05	; 5
    1434:	a8 a3       	std	Y+32, r26	; 0x20
    1436:	02 c0       	rjmp	.+4      	; 0x143c <main+0x75e>
    1438:	b9 e0       	ldi	r27, 0x09	; 9
    143a:	b9 a3       	std	Y+33, r27	; 0x21
							min_ten = 5;
						}
					}
					sprintf(string,"min: %d%d", min_ten, min_one);
    143c:	8d b7       	in	r24, 0x3d	; 61
    143e:	9e b7       	in	r25, 0x3e	; 62
    1440:	08 97       	sbiw	r24, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	9e bf       	out	0x3e, r25	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	8d bf       	out	0x3d, r24	; 61
    144c:	ed b7       	in	r30, 0x3d	; 61
    144e:	fe b7       	in	r31, 0x3e	; 62
    1450:	31 96       	adiw	r30, 0x01	; 1
    1452:	ad b7       	in	r26, 0x3d	; 61
    1454:	be b7       	in	r27, 0x3e	; 62
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	7c 92       	st	X, r7
    145a:	6e 92       	st	-X, r6
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	87 e3       	ldi	r24, 0x37	; 55
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	93 83       	std	Z+3, r25	; 0x03
    1464:	82 83       	std	Z+2, r24	; 0x02
    1466:	98 a1       	ldd	r25, Y+32	; 0x20
    1468:	94 83       	std	Z+4, r25	; 0x04
    146a:	15 82       	std	Z+5, r1	; 0x05
    146c:	a9 a1       	ldd	r26, Y+33	; 0x21
    146e:	a6 83       	std	Z+6, r26	; 0x06
    1470:	17 82       	std	Z+7, r1	; 0x07
    1472:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(0,8,string);
    1476:	8d b7       	in	r24, 0x3d	; 61
    1478:	9e b7       	in	r25, 0x3e	; 62
    147a:	08 96       	adiw	r24, 0x08	; 8
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	9e bf       	out	0x3e, r25	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	8d bf       	out	0x3d, r24	; 61
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	68 e0       	ldi	r22, 0x08	; 8
    148a:	a3 01       	movw	r20, r6
    148c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    1490:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					glcd_draw_string_xy(0,0,string);
					glcd_write();
				}
				RTCWriteByte(0x02, (( h_ten << 4 ) + h_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Minute
    1494:	11 23       	and	r17, r17
    1496:	09 f4       	brne	.+2      	; 0x149a <main+0x7bc>
    1498:	9b cf       	rjmp	.-202    	; 0x13d0 <main+0x6f2>
					}
					sprintf(string,"min: %d%d", min_ten, min_one);
					glcd_draw_string_xy(0,8,string);
					glcd_write();
				}
				RTCWriteByte(0x01, (( min_ten << 4 ) + min_one ));
    149a:	68 a1       	ldd	r22, Y+32	; 0x20
    149c:	62 95       	swap	r22
    149e:	60 7f       	andi	r22, 0xF0	; 240
    14a0:	99 a1       	ldd	r25, Y+33	; 0x21
    14a2:	69 0f       	add	r22, r25
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    14aa:	84 e8       	ldi	r24, 0x84	; 132
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	f6 01       	movw	r30, r12
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <main+0x7d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	d9 f7       	brne	.-10     	; 0x14ae <main+0x7d0>
						sec_ten--;
						if( sec_ten == 255 ){
							sec_ten = 5;
						}
					}
					sprintf(string,"sec: %d%d", sec_ten, sec_one);
    14b8:	3e 01       	movw	r6, r28
    14ba:	08 94       	sec
    14bc:	61 1c       	adc	r6, r1
    14be:	71 1c       	adc	r7, r1
					glcd_write();
				}
				RTCWriteByte(0x01, (( min_ten << 4 ) + min_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Second
					if(!(PIND & (1<<PD2))){
    14c0:	4a 99       	sbic	0x09, 2	; 9
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <main+0x7ea>
    14c4:	12 e0       	ldi	r17, 0x02	; 2
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <main+0x7ec>
    14c8:	10 e0       	ldi	r17, 0x00	; 0
						circle = 2;
					}
					if(!(PIND & (1<<PD6))){
    14ca:	4e 99       	sbic	0x09, 6	; 9
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <main+0x800>
    14ce:	88 ee       	ldi	r24, 0xE8	; 232
    14d0:	93 e0       	ldi	r25, 0x03	; 3
    14d2:	f6 01       	movw	r30, r12
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <main+0x7f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14da:	d9 f7       	brne	.-10     	; 0x14d2 <main+0x7f4>
						sec_one--;
    14dc:	8a 94       	dec	r8
						_delay_ms(100);
					}
					if(!(PIND & (1<<PD5))){
    14de:	4d 99       	sbic	0x09, 5	; 9
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <main+0x814>
    14e2:	88 ee       	ldi	r24, 0xE8	; 232
    14e4:	93 e0       	ldi	r25, 0x03	; 3
    14e6:	f6 01       	movw	r30, r12
    14e8:	31 97       	sbiw	r30, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <main+0x80a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	d9 f7       	brne	.-10     	; 0x14e6 <main+0x808>
						sec_one++;
    14f0:	83 94       	inc	r8
						_delay_ms(100);
					}
					if( sec_one == 10 ){
    14f2:	aa e0       	ldi	r26, 0x0A	; 10
    14f4:	8a 16       	cp	r8, r26
    14f6:	39 f4       	brne	.+14     	; 0x1506 <main+0x828>
						sec_one = 0;
						sec_ten++;
    14f8:	ba a1       	ldd	r27, Y+34	; 0x22
    14fa:	bf 5f       	subi	r27, 0xFF	; 255
    14fc:	ba a3       	std	Y+34, r27	; 0x22
						if( sec_ten == 6 ){
    14fe:	b6 30       	cpi	r27, 0x06	; 6
    1500:	09 f0       	breq	.+2      	; 0x1504 <main+0x826>
    1502:	b8 c1       	rjmp	.+880    	; 0x1874 <main+0xb96>
    1504:	b6 c1       	rjmp	.+876    	; 0x1872 <main+0xb94>
							sec_ten = 0;
						}
					}
					if( sec_one == 255 ){
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	88 16       	cp	r8, r24
    150a:	61 f4       	brne	.+24     	; 0x1524 <main+0x846>
						sec_one = 9;
						sec_ten--;
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	91 50       	subi	r25, 0x01	; 1
    1510:	9a a3       	std	Y+34, r25	; 0x22
						if( sec_ten == 255 ){
    1512:	9f 3f       	cpi	r25, 0xFF	; 255
    1514:	29 f4       	brne	.+10     	; 0x1520 <main+0x842>
    1516:	69 e0       	ldi	r22, 0x09	; 9
    1518:	86 2e       	mov	r8, r22
    151a:	a5 e0       	ldi	r26, 0x05	; 5
    151c:	aa a3       	std	Y+34, r26	; 0x22
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <main+0x846>
    1520:	59 e0       	ldi	r21, 0x09	; 9
    1522:	85 2e       	mov	r8, r21
							sec_ten = 5;
						}
					}
					sprintf(string,"sec: %d%d", sec_ten, sec_one);
    1524:	8d b7       	in	r24, 0x3d	; 61
    1526:	9e b7       	in	r25, 0x3e	; 62
    1528:	08 97       	sbiw	r24, 0x08	; 8
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	9e bf       	out	0x3e, r25	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	8d bf       	out	0x3d, r24	; 61
    1534:	ed b7       	in	r30, 0x3d	; 61
    1536:	fe b7       	in	r31, 0x3e	; 62
    1538:	31 96       	adiw	r30, 0x01	; 1
    153a:	ad b7       	in	r26, 0x3d	; 61
    153c:	be b7       	in	r27, 0x3e	; 62
    153e:	12 96       	adiw	r26, 0x02	; 2
    1540:	7c 92       	st	X, r7
    1542:	6e 92       	st	-X, r6
    1544:	11 97       	sbiw	r26, 0x01	; 1
    1546:	81 e4       	ldi	r24, 0x41	; 65
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	93 83       	std	Z+3, r25	; 0x03
    154c:	82 83       	std	Z+2, r24	; 0x02
    154e:	9a a1       	ldd	r25, Y+34	; 0x22
    1550:	94 83       	std	Z+4, r25	; 0x04
    1552:	15 82       	std	Z+5, r1	; 0x05
    1554:	86 82       	std	Z+6, r8	; 0x06
    1556:	17 82       	std	Z+7, r1	; 0x07
    1558:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
					glcd_draw_string_xy(0,16,string);
    155c:	ad b7       	in	r26, 0x3d	; 61
    155e:	be b7       	in	r27, 0x3e	; 62
    1560:	18 96       	adiw	r26, 0x08	; 8
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	be bf       	out	0x3e, r27	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	ad bf       	out	0x3d, r26	; 61
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	60 e1       	ldi	r22, 0x10	; 16
    1570:	a3 01       	movw	r20, r6
    1572:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
					glcd_write();
    1576:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					glcd_draw_string_xy(0,8,string);
					glcd_write();
				}
				RTCWriteByte(0x01, (( min_ten << 4 ) + min_one ));
				_delay_ms(time);
				for( circle = 0; circle < 1; ){		// Second
    157a:	11 23       	and	r17, r17
    157c:	09 f4       	brne	.+2      	; 0x1580 <main+0x8a2>
    157e:	a0 cf       	rjmp	.-192    	; 0x14c0 <main+0x7e2>
					}
					sprintf(string,"sec: %d%d", sec_ten, sec_one);
					glcd_draw_string_xy(0,16,string);
					glcd_write();
				}
				RTCWriteByte(0x00, (( sec_ten << 4 ) + sec_one + 0x80 ));
    1580:	68 2d       	mov	r22, r8
    1582:	60 58       	subi	r22, 0x80	; 128
    1584:	8a a1       	ldd	r24, Y+34	; 0x22
    1586:	82 95       	swap	r24
    1588:	80 7f       	andi	r24, 0xF0	; 240
    158a:	68 0f       	add	r22, r24
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTCWriteByte.1939>
    1592:	84 e8       	ldi	r24, 0x84	; 132
    1594:	93 e0       	ldi	r25, 0x03	; 3
    1596:	f6 01       	movw	r30, r12
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0x8ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	d9 f7       	brne	.-10     	; 0x1596 <main+0x8b8>
				_delay_ms(time);
				glcd_clear();
    15a0:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_clear_buffer();
    15a4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
    15a8:	24 cc       	rjmp	.-1976   	; 0xdf2 <main+0x114>
				state = menu;	
			break;
			case act_time:
				glcd_clear();
    15aa:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_clear_buffer();
    15ae:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
    15b2:	ff 24       	eor	r15, r15
							break;
							case 7:
								sprintf(string,"Sunday");
							break;
						}
						glcd_draw_string_xy(0,0,string);
    15b4:	8e 01       	movw	r16, r28
    15b6:	0f 5f       	subi	r16, 0xFF	; 255
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	26 c1       	rjmp	.+588    	; 0x1808 <main+0xb2a>
			case act_time:
				glcd_clear();
				glcd_clear_buffer();
				for( circle = 0; circle < 1; ){
					
					sec_one	= (RTCReadByte(0x00) & 0b00001111 );
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    15c2:	4f e0       	ldi	r20, 0x0F	; 15
    15c4:	84 2e       	mov	r8, r20
    15c6:	88 22       	and	r8, r24
					sec_ten	= (RTCReadByte(0x00) & 0b01110000 ) >> 4;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	80 77       	andi	r24, 0x70	; 112
    15d2:	90 70       	andi	r25, 0x00	; 0
    15d4:	34 e0       	ldi	r19, 0x04	; 4
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	3a 95       	dec	r19
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <main+0x8f8>
    15de:	8a a3       	std	Y+34, r24	; 0x22
					min_one	= (RTCReadByte(0x01) & 0b00001111 );
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    15e6:	8f 70       	andi	r24, 0x0F	; 15
    15e8:	89 a3       	std	Y+33, r24	; 0x21
					min_ten	= (RTCReadByte(0x01) & 0b01110000 ) >> 4;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	80 77       	andi	r24, 0x70	; 112
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	24 e0       	ldi	r18, 0x04	; 4
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	2a 95       	dec	r18
    15fe:	e1 f7       	brne	.-8      	; 0x15f8 <main+0x91a>
    1600:	88 a3       	std	Y+32, r24	; 0x20
					h_one	= (RTCReadByte(0x02) & 0b00001111 );
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1608:	9f e0       	ldi	r25, 0x0F	; 15
    160a:	99 2e       	mov	r9, r25
    160c:	98 22       	and	r9, r24
					h_ten	= (RTCReadByte(0x02) & 0b00110000 ) >> 4;
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	80 73       	andi	r24, 0x30	; 48
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	b4 e0       	ldi	r27, 0x04	; 4
    161c:	95 95       	asr	r25
    161e:	87 95       	ror	r24
    1620:	ba 95       	dec	r27
    1622:	e1 f7       	brne	.-8      	; 0x161c <main+0x93e>
    1624:	38 2e       	mov	r3, r24
					
					week		= (RTCReadByte(0x03) & 0b00000111 );
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    162c:	a7 e0       	ldi	r26, 0x07	; 7
    162e:	ea 2e       	mov	r14, r26
    1630:	e8 22       	and	r14, r24
					day_one		= (RTCReadByte(0x04) & 0b00001111 );
    1632:	84 e0       	ldi	r24, 0x04	; 4
    1634:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1638:	ff e0       	ldi	r31, 0x0F	; 15
    163a:	af 2e       	mov	r10, r31
    163c:	a8 22       	and	r10, r24
					day_ten		= (RTCReadByte(0x04) & 0b00110000 ) >> 4;
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	80 73       	andi	r24, 0x30	; 48
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	e4 e0       	ldi	r30, 0x04	; 4
    164c:	95 95       	asr	r25
    164e:	87 95       	ror	r24
    1650:	ea 95       	dec	r30
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0x96e>
    1654:	48 2e       	mov	r4, r24
					month_one	= (RTCReadByte(0x05) & 0b00001111 );
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    165c:	7f e0       	ldi	r23, 0x0F	; 15
    165e:	b7 2e       	mov	r11, r23
    1660:	b8 22       	and	r11, r24
					month_ten	= (RTCReadByte(0x05) & 0b00110000 ) >> 4;
    1662:	85 e0       	ldi	r24, 0x05	; 5
    1664:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	80 73       	andi	r24, 0x30	; 48
    166c:	90 70       	andi	r25, 0x00	; 0
    166e:	64 e0       	ldi	r22, 0x04	; 4
    1670:	95 95       	asr	r25
    1672:	87 95       	ror	r24
    1674:	6a 95       	dec	r22
    1676:	e1 f7       	brne	.-8      	; 0x1670 <main+0x992>
    1678:	58 2e       	mov	r5, r24
					year_one	= (RTCReadByte(0x06) & 0b00001111 );
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    1680:	5f e0       	ldi	r21, 0x0F	; 15
    1682:	25 2e       	mov	r2, r21
    1684:	28 22       	and	r2, r24
					year_ten	= (RTCReadByte(0x06) & 0b00110000 ) >> 4;
    1686:	86 e0       	ldi	r24, 0x06	; 6
    1688:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCReadByte.1934>
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	80 73       	andi	r24, 0x30	; 48
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	44 e0       	ldi	r20, 0x04	; 4
    1694:	95 95       	asr	r25
    1696:	87 95       	ror	r24
    1698:	4a 95       	dec	r20
    169a:	e1 f7       	brne	.-8      	; 0x1694 <main+0x9b6>
    169c:	8f 8f       	std	Y+31, r24	; 0x1f
					
					if( sec_one != sec_old ){
    169e:	bb a1       	ldd	r27, Y+35	; 0x23
    16a0:	8b 16       	cp	r8, r27
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <main+0x9c8>
    16a4:	a5 c0       	rjmp	.+330    	; 0x17f0 <main+0xb12>
						
						glcd_clear();
    16a6:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
						glcd_clear_buffer();
    16aa:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
						
						switch ( week ){
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	e8 16       	cp	r14, r24
    16b2:	01 f1       	breq	.+64     	; 0x16f4 <main+0xa16>
    16b4:	8e 15       	cp	r24, r14
    16b6:	48 f0       	brcs	.+18     	; 0x16ca <main+0x9ec>
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	e9 16       	cp	r14, r25
    16bc:	99 f0       	breq	.+38     	; 0x16e4 <main+0xa06>
    16be:	9e 15       	cp	r25, r14
    16c0:	a8 f0       	brcs	.+42     	; 0x16ec <main+0xa0e>
    16c2:	a1 e0       	ldi	r26, 0x01	; 1
    16c4:	ea 16       	cp	r14, r26
    16c6:	39 f5       	brne	.+78     	; 0x1716 <main+0xa38>
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <main+0x9fe>
    16ca:	b6 e0       	ldi	r27, 0x06	; 6
    16cc:	eb 16       	cp	r14, r27
    16ce:	d1 f0       	breq	.+52     	; 0x1704 <main+0xa26>
    16d0:	eb 16       	cp	r14, r27
    16d2:	a0 f0       	brcs	.+40     	; 0x16fc <main+0xa1e>
    16d4:	87 e0       	ldi	r24, 0x07	; 7
    16d6:	e8 16       	cp	r14, r24
    16d8:	f1 f4       	brne	.+60     	; 0x1716 <main+0xa38>
    16da:	18 c0       	rjmp	.+48     	; 0x170c <main+0xa2e>
							case 1:
								sprintf(string,"Monday");
    16dc:	c8 01       	movw	r24, r16
    16de:	6b e4       	ldi	r22, 0x4B	; 75
    16e0:	71 e0       	ldi	r23, 0x01	; 1
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <main+0xa34>
							break;
							case 2:
								sprintf(string,"Tuesday");
    16e4:	c8 01       	movw	r24, r16
    16e6:	62 e5       	ldi	r22, 0x52	; 82
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <main+0xa34>
							break;
							case 3:
								sprintf(string,"Wednesday");
    16ec:	c8 01       	movw	r24, r16
    16ee:	6a e5       	ldi	r22, 0x5A	; 90
    16f0:	71 e0       	ldi	r23, 0x01	; 1
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <main+0xa34>
							break;
							case 4:
								sprintf(string,"Thursday");
    16f4:	c8 01       	movw	r24, r16
    16f6:	64 e6       	ldi	r22, 0x64	; 100
    16f8:	71 e0       	ldi	r23, 0x01	; 1
    16fa:	0b c0       	rjmp	.+22     	; 0x1712 <main+0xa34>
							break;
							case 5:
								sprintf(string,"Friday");
    16fc:	c8 01       	movw	r24, r16
    16fe:	6d e6       	ldi	r22, 0x6D	; 109
    1700:	71 e0       	ldi	r23, 0x01	; 1
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <main+0xa34>
							break;
							case 6:
								sprintf(string,"Saturday");
    1704:	c8 01       	movw	r24, r16
    1706:	64 e7       	ldi	r22, 0x74	; 116
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <main+0xa34>
							break;
							case 7:
								sprintf(string,"Sunday");
    170c:	c8 01       	movw	r24, r16
    170e:	6d e7       	ldi	r22, 0x7D	; 125
    1710:	71 e0       	ldi	r23, 0x01	; 1
    1712:	0e 94 bc 1c 	call	0x3978	; 0x3978 <strcpy>
							break;
						}
						glcd_draw_string_xy(0,0,string);
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	a8 01       	movw	r20, r16
    171c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
						glcd_write();
    1720:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
						
						sprintf(string,"%d%d.%d%d.%d%d ", day_ten , day_one, month_ten, month_one, year_ten, year_one);
    1724:	ad b7       	in	r26, 0x3d	; 61
    1726:	be b7       	in	r27, 0x3e	; 62
    1728:	50 97       	sbiw	r26, 0x10	; 16
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	be bf       	out	0x3e, r27	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	ad bf       	out	0x3d, r26	; 61
    1734:	ed b7       	in	r30, 0x3d	; 61
    1736:	fe b7       	in	r31, 0x3e	; 62
    1738:	31 96       	adiw	r30, 0x01	; 1
    173a:	12 96       	adiw	r26, 0x02	; 2
    173c:	1c 93       	st	X, r17
    173e:	0e 93       	st	-X, r16
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	84 e8       	ldi	r24, 0x84	; 132
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	93 83       	std	Z+3, r25	; 0x03
    1748:	82 83       	std	Z+2, r24	; 0x02
    174a:	44 82       	std	Z+4, r4	; 0x04
    174c:	15 82       	std	Z+5, r1	; 0x05
    174e:	a6 82       	std	Z+6, r10	; 0x06
    1750:	17 82       	std	Z+7, r1	; 0x07
    1752:	50 86       	std	Z+8, r5	; 0x08
    1754:	11 86       	std	Z+9, r1	; 0x09
    1756:	b2 86       	std	Z+10, r11	; 0x0a
    1758:	13 86       	std	Z+11, r1	; 0x0b
    175a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    175c:	94 87       	std	Z+12, r25	; 0x0c
    175e:	15 86       	std	Z+13, r1	; 0x0d
    1760:	26 86       	std	Z+14, r2	; 0x0e
    1762:	17 86       	std	Z+15, r1	; 0x0f
    1764:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
						glcd_draw_string_xy(0,16,string);
    1768:	ad b7       	in	r26, 0x3d	; 61
    176a:	be b7       	in	r27, 0x3e	; 62
    176c:	50 96       	adiw	r26, 0x10	; 16
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	be bf       	out	0x3e, r27	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	ad bf       	out	0x3d, r26	; 61
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	60 e1       	ldi	r22, 0x10	; 16
    177c:	a8 01       	movw	r20, r16
    177e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
						glcd_write();
    1782:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
						
						sprintf(string,"%d%d:%d%d:%d%d ", h_ten , h_one, min_ten, min_one, sec_ten, sec_one);
    1786:	8d b7       	in	r24, 0x3d	; 61
    1788:	9e b7       	in	r25, 0x3e	; 62
    178a:	40 97       	sbiw	r24, 0x10	; 16
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	9e bf       	out	0x3e, r25	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	8d bf       	out	0x3d, r24	; 61
    1796:	ed b7       	in	r30, 0x3d	; 61
    1798:	fe b7       	in	r31, 0x3e	; 62
    179a:	31 96       	adiw	r30, 0x01	; 1
    179c:	ad b7       	in	r26, 0x3d	; 61
    179e:	be b7       	in	r27, 0x3e	; 62
    17a0:	12 96       	adiw	r26, 0x02	; 2
    17a2:	1c 93       	st	X, r17
    17a4:	0e 93       	st	-X, r16
    17a6:	11 97       	sbiw	r26, 0x01	; 1
    17a8:	84 e9       	ldi	r24, 0x94	; 148
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	93 83       	std	Z+3, r25	; 0x03
    17ae:	82 83       	std	Z+2, r24	; 0x02
    17b0:	34 82       	std	Z+4, r3	; 0x04
    17b2:	15 82       	std	Z+5, r1	; 0x05
    17b4:	96 82       	std	Z+6, r9	; 0x06
    17b6:	17 82       	std	Z+7, r1	; 0x07
    17b8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ba:	90 87       	std	Z+8, r25	; 0x08
    17bc:	11 86       	std	Z+9, r1	; 0x09
    17be:	a9 a1       	ldd	r26, Y+33	; 0x21
    17c0:	a2 87       	std	Z+10, r26	; 0x0a
    17c2:	13 86       	std	Z+11, r1	; 0x0b
    17c4:	ba a1       	ldd	r27, Y+34	; 0x22
    17c6:	b4 87       	std	Z+12, r27	; 0x0c
    17c8:	15 86       	std	Z+13, r1	; 0x0d
    17ca:	86 86       	std	Z+14, r8	; 0x0e
    17cc:	17 86       	std	Z+15, r1	; 0x0f
    17ce:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
						glcd_draw_string_xy(0,32,string);
    17d2:	8d b7       	in	r24, 0x3d	; 61
    17d4:	9e b7       	in	r25, 0x3e	; 62
    17d6:	40 96       	adiw	r24, 0x10	; 16
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	9e bf       	out	0x3e, r25	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	8d bf       	out	0x3d, r24	; 61
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	60 e2       	ldi	r22, 0x20	; 32
    17e6:	a8 01       	movw	r20, r16
    17e8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
						glcd_write();
    17ec:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
					}
					sec_old = sec_one;
					if(!(PIND & (1<<PD2))){
    17f0:	4a 99       	sbic	0x09, 2	; 9
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <main+0xb28>
    17f4:	80 ed       	ldi	r24, 0xD0	; 208
    17f6:	97 e0       	ldi	r25, 0x07	; 7
    17f8:	f6 01       	movw	r30, r12
    17fa:	31 97       	sbiw	r30, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <main+0xb1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	d9 f7       	brne	.-10     	; 0x17f8 <main+0xb1a>
    1802:	32 e0       	ldi	r19, 0x02	; 2
    1804:	f3 2e       	mov	r15, r19
    1806:	8b a2       	std	Y+35, r8	; 0x23
				state = menu;	
			break;
			case act_time:
				glcd_clear();
				glcd_clear_buffer();
				for( circle = 0; circle < 1; ){
    1808:	ff 20       	and	r15, r15
    180a:	09 f4       	brne	.+2      	; 0x180e <main+0xb30>
    180c:	d7 ce       	rjmp	.-594    	; 0x15bc <main+0x8de>
    180e:	84 e8       	ldi	r24, 0x84	; 132
    1810:	93 e0       	ldi	r25, 0x03	; 3
    1812:	f6 01       	movw	r30, r12
    1814:	31 97       	sbiw	r30, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <main+0xb36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	d9 f7       	brne	.-10     	; 0x1812 <main+0xb34>
						_delay_ms(200);
					}
				}
				_delay_ms(time);
				state = menu;
				glcd_clear();
    181c:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
				glcd_clear_buffer();
    1820:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
				glcd_write();
    1824:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    1828:	e4 ca       	rjmp	.-2616   	; 0xdf2 <main+0x114>
    182a:	1f 8e       	std	Y+31, r1	; 0x1f
    182c:	22 24       	eor	r2, r2
    182e:	d0 cb       	rjmp	.-2144   	; 0xfd0 <main+0x2f2>
    1830:	55 24       	eor	r5, r5
    1832:	bb 24       	eor	r11, r11
    1834:	3e cc       	rjmp	.-1924   	; 0x10b2 <main+0x3d4>
					}
					if(( month_ten == 1 ) && ( month_one == 3 )){
						month_ten	= 0;
						month_one	= 1;
					}
					if(( month_ten == 1 ) && ( month_one == 9 )){
    1836:	99 e0       	ldi	r25, 0x09	; 9
    1838:	b9 16       	cp	r11, r25
    183a:	09 f0       	breq	.+2      	; 0x183e <main+0xb60>
    183c:	44 cc       	rjmp	.-1912   	; 0x10c6 <main+0x3e8>
    183e:	22 e0       	ldi	r18, 0x02	; 2
    1840:	b2 2e       	mov	r11, r18
    1842:	41 cc       	rjmp	.-1918   	; 0x10c6 <main+0x3e8>
    1844:	44 24       	eor	r4, r4
    1846:	aa 24       	eor	r10, r10
    1848:	ac cc       	rjmp	.-1704   	; 0x11a2 <main+0x4c4>
					}
					if(( day_ten == 3 ) && ( day_one == 3 )){
						day_ten	= 0;
						day_one	= 0;
					}
					if(( day_ten == 3 ) && ( day_one == 9 )){
    184a:	a9 e0       	ldi	r26, 0x09	; 9
    184c:	aa 16       	cp	r10, r26
    184e:	09 f0       	breq	.+2      	; 0x1852 <main+0xb74>
    1850:	b0 cc       	rjmp	.-1696   	; 0x11b2 <main+0x4d4>
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	a9 2e       	mov	r10, r25
    1856:	ad cc       	rjmp	.-1702   	; 0x11b2 <main+0x4d4>
    1858:	33 24       	eor	r3, r3
    185a:	99 24       	eor	r9, r9
    185c:	71 cd       	rjmp	.-1310   	; 0x1340 <main+0x662>
					}
					if(( h_ten == 2 ) && ( h_one == 4 )){
						h_ten	= 0;
						h_one	= 0;
					}
					if(( h_ten == 2 ) && ( h_one == 9 )){
    185e:	b9 e0       	ldi	r27, 0x09	; 9
    1860:	9b 16       	cp	r9, r27
    1862:	09 f0       	breq	.+2      	; 0x1866 <main+0xb88>
    1864:	76 cd       	rjmp	.-1300   	; 0x1352 <main+0x674>
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	98 2e       	mov	r9, r24
    186a:	73 cd       	rjmp	.-1306   	; 0x1352 <main+0x674>
    186c:	18 a2       	std	Y+32, r1	; 0x20
    186e:	19 a2       	std	Y+33, r1	; 0x21
    1870:	e5 cd       	rjmp	.-1078   	; 0x143c <main+0x75e>
    1872:	1a a2       	std	Y+34, r1	; 0x22
    1874:	88 24       	eor	r8, r8
    1876:	56 ce       	rjmp	.-852    	; 0x1524 <main+0x846>

00001878 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
    1878:	98 2f       	mov	r25, r24
    187a:	84 35       	cpi	r24, 0x54	; 84
    187c:	08 f0       	brcs	.+2      	; 0x1880 <glcd_update_bbox+0x8>
    187e:	93 e5       	ldi	r25, 0x53	; 83
    1880:	44 35       	cpi	r20, 0x54	; 84
    1882:	08 f0       	brcs	.+2      	; 0x1886 <glcd_update_bbox+0xe>
    1884:	43 e5       	ldi	r20, 0x53	; 83
    1886:	60 33       	cpi	r22, 0x30	; 48
    1888:	08 f0       	brcs	.+2      	; 0x188c <glcd_update_bbox+0x14>
    188a:	6f e2       	ldi	r22, 0x2F	; 47
    188c:	20 33       	cpi	r18, 0x30	; 48
    188e:	08 f0       	brcs	.+2      	; 0x1892 <glcd_update_bbox+0x1a>
    1890:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
    1892:	e0 91 10 04 	lds	r30, 0x0410
    1896:	f0 91 11 04 	lds	r31, 0x0411
    189a:	80 81       	ld	r24, Z
    189c:	98 17       	cp	r25, r24
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
    18a0:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	84 17       	cp	r24, r20
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
    18a8:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
    18aa:	81 81       	ldd	r24, Z+1	; 0x01
    18ac:	68 17       	cp	r22, r24
    18ae:	08 f4       	brcc	.+2      	; 0x18b2 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
    18b0:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
    18b2:	83 81       	ldd	r24, Z+3	; 0x03
    18b4:	82 17       	cp	r24, r18
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
    18b8:	23 83       	std	Z+3, r18	; 0x03
    18ba:	08 95       	ret

000018bc <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    18bc:	e0 91 10 04 	lds	r30, 0x0410
    18c0:	f0 91 11 04 	lds	r31, 0x0411
    18c4:	83 e5       	ldi	r24, 0x53	; 83
    18c6:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    18c8:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    18ca:	8f e2       	ldi	r24, 0x2F	; 47
    18cc:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    18ce:	13 82       	std	Z+3, r1	; 0x03
}
    18d0:	08 95       	ret

000018d2 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    18d2:	e0 91 10 04 	lds	r30, 0x0410
    18d6:	f0 91 11 04 	lds	r31, 0x0411
    18da:	83 e5       	ldi	r24, 0x53	; 83
    18dc:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    18de:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    18e0:	8f e2       	ldi	r24, 0x2F	; 47
    18e2:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    18e4:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
    18e6:	08 95       	ret

000018e8 <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
    18e8:	e0 91 10 04 	lds	r30, 0x0410
    18ec:	f0 91 11 04 	lds	r31, 0x0411
    18f0:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
    18f2:	83 e5       	ldi	r24, 0x53	; 83
    18f4:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
    18f6:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
    18f8:	8f e2       	ldi	r24, 0x2F	; 47
    18fa:	83 83       	std	Z+3, r24	; 0x03
}
    18fc:	08 95       	ret

000018fe <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
    18fe:	90 93 0f 04 	sts	0x040F, r25
    1902:	80 93 0e 04 	sts	0x040E, r24
	glcd_bbox_selected = bbox;
    1906:	70 93 11 04 	sts	0x0411, r23
    190a:	60 93 10 04 	sts	0x0410, r22
}
    190e:	08 95       	ret

00001910 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
    1910:	08 95       	ret

00001912 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    191a:	64 e5       	ldi	r22, 0x54	; 84
    191c:	80 91 0e 04 	lds	r24, 0x040E
    1920:	90 91 0f 04 	lds	r25, 0x040F
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
    1924:	45 30       	cpi	r20, 0x05	; 5
    1926:	51 05       	cpc	r21, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
    192a:	dc 01       	movw	r26, r24
    192c:	a2 0f       	add	r26, r18
    192e:	b3 1f       	adc	r27, r19
    1930:	2c 5a       	subi	r18, 0xAC	; 172
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	fc 01       	movw	r30, r24
    1936:	e2 0f       	add	r30, r18
    1938:	f3 1f       	adc	r31, r19
    193a:	24 55       	subi	r18, 0x54	; 84
    193c:	30 40       	sbci	r19, 0x00	; 0
    193e:	84 e5       	ldi	r24, 0x54	; 84
    1940:	01 90       	ld	r0, Z+
    1942:	0d 92       	st	X+, r0
    1944:	81 50       	subi	r24, 0x01	; 1
    1946:	e1 f7       	brne	.-8      	; 0x1940 <glcd_scroll_line+0x2e>
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    194a:	8c 55       	subi	r24, 0x5C	; 92
    194c:	9e 4f       	sbci	r25, 0xFE	; 254
    194e:	dc 01       	movw	r26, r24
    1950:	86 2f       	mov	r24, r22
    1952:	1d 92       	st	X+, r1
    1954:	8a 95       	dec	r24
    1956:	e9 f7       	brne	.-6      	; 0x1952 <glcd_scroll_line+0x40>
    1958:	4f 5f       	subi	r20, 0xFF	; 255
    195a:	5f 4f       	sbci	r21, 0xFF	; 255
    195c:	2c 5a       	subi	r18, 0xAC	; 172
    195e:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
    1960:	46 30       	cpi	r20, 0x06	; 6
    1962:	51 05       	cpc	r21, r1
    1964:	d9 f6       	brne	.-74     	; 0x191c <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	43 e5       	ldi	r20, 0x53	; 83
    196c:	2f e2       	ldi	r18, 0x2F	; 47
    196e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
}
    1972:	08 95       	ret

00001974 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    1974:	e0 91 0e 04 	lds	r30, 0x040E
    1978:	f0 91 0f 04 	lds	r31, 0x040F
    197c:	88 ef       	ldi	r24, 0xF8	; 248
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	df 01       	movw	r26, r30
    1982:	9c 01       	movw	r18, r24
    1984:	1d 92       	st	X+, r1
    1986:	21 50       	subi	r18, 0x01	; 1
    1988:	30 40       	sbci	r19, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	43 e5       	ldi	r20, 0x53	; 83
    1992:	2f e2       	ldi	r18, 0x2F	; 47
    1994:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
}
    1998:	08 95       	ret

0000199a <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    199a:	e0 91 0e 04 	lds	r30, 0x040E
    199e:	f0 91 0f 04 	lds	r31, 0x040F
    19a2:	88 ef       	ldi	r24, 0xF8	; 248
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	df 01       	movw	r26, r30
    19a8:	9c 01       	movw	r18, r24
    19aa:	1d 92       	st	X+, r1
    19ac:	21 50       	subi	r18, 0x01	; 1
    19ae:	30 40       	sbci	r19, 0x00	; 0
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	43 e5       	ldi	r20, 0x53	; 83
    19b8:	2f e2       	ldi	r18, 0x2F	; 47
    19ba:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	glcd_write();
    19be:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
}
    19c2:	08 95       	ret

000019c4 <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
    19c4:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
    19c6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
    19c8:	0d b4       	in	r0, 0x2d	; 45
    19ca:	07 fe       	sbrs	r0, 7
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
    19ce:	28 9a       	sbi	0x05, 0	; 5
}
    19d0:	08 95       	ret

000019d2 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
    19d2:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
    19d4:	5f 98       	cbi	0x0b, 7	; 11
    19d6:	80 ea       	ldi	r24, 0xA0	; 160
    19d8:	9f e0       	ldi	r25, 0x0F	; 15
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
    19de:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
    19e0:	28 9a       	sbi	0x05, 0	; 5
}
    19e2:	08 95       	ret

000019e4 <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
    19e4:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
    19e6:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
    19e8:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
    19ea:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
    19ec:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
    19ee:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
    19f0:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
    19f2:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
    19f4:	80 e5       	ldi	r24, 0x50	; 80
    19f6:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    19f8:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    19fa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    19fe:	86 e1       	ldi	r24, 0x16	; 22
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	62 e1       	ldi	r22, 0x12	; 18
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    1a0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
    1a0e:	08 95       	ret

00001a10 <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    1a10:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    1a12:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <glcd_spi_write>
}
    1a16:	08 95       	ret

00001a18 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    1a18:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    1a1a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <glcd_spi_write>
}
    1a1e:	08 95       	ret

00001a20 <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
    1a20:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1a24:	81 e2       	ldi	r24, 0x21	; 33
    1a26:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    1a2a:	82 e1       	ldi	r24, 0x12	; 18
    1a2c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    1a30:	8c eb       	ldi	r24, 0xBC	; 188
    1a32:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    1a36:	80 e2       	ldi	r24, 0x20	; 32
    1a38:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1a3c:	8c e0       	ldi	r24, 0x0C	; 12
    1a3e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1a42:	08 95       	ret

00001a44 <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	00 e0       	ldi	r16, 0x00	; 0
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	c0 e0       	ldi	r28, 0x00	; 0
    1a58:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1a5a:	e0 91 10 04 	lds	r30, 0x0410
    1a5e:	f0 91 11 04 	lds	r31, 0x0411
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    1a62:	88 e0       	ldi	r24, 0x08	; 8
    1a64:	e8 2e       	mov	r14, r24
    1a66:	f1 2c       	mov	r15, r1
    1a68:	e2 0e       	add	r14, r18
    1a6a:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1a6c:	81 81       	ldd	r24, Z+1	; 0x01
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	8e 15       	cp	r24, r14
    1a72:	9f 05       	cpc	r25, r15
    1a74:	54 f5       	brge	.+84     	; 0x1aca <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
    1a76:	83 81       	ldd	r24, Z+3	; 0x03
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	82 17       	cp	r24, r18
    1a7c:	93 07       	cpc	r25, r19
    1a7e:	64 f1       	brlt	.+88     	; 0x1ad8 <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    1a80:	80 2f       	mov	r24, r16
    1a82:	80 64       	ori	r24, 0x40	; 64
    1a84:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    1a88:	e0 91 10 04 	lds	r30, 0x0410
    1a8c:	f0 91 11 04 	lds	r31, 0x0411
    1a90:	80 81       	ld	r24, Z
    1a92:	80 68       	ori	r24, 0x80	; 128
    1a94:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1a98:	e0 91 10 04 	lds	r30, 0x0410
    1a9c:	f0 91 11 04 	lds	r31, 0x0411
    1aa0:	10 81       	ld	r17, Z
    1aa2:	0c c0       	rjmp	.+24     	; 0x1abc <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    1aa4:	e0 91 0e 04 	lds	r30, 0x040E
    1aa8:	f0 91 0f 04 	lds	r31, 0x040F
    1aac:	ec 0f       	add	r30, r28
    1aae:	fd 1f       	adc	r31, r29
    1ab0:	e1 0f       	add	r30, r17
    1ab2:	f1 1d       	adc	r31, r1
    1ab4:	80 81       	ld	r24, Z
    1ab6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1aba:	1f 5f       	subi	r17, 0xFF	; 255
    1abc:	e0 91 10 04 	lds	r30, 0x0410
    1ac0:	f0 91 11 04 	lds	r31, 0x0411
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	81 17       	cp	r24, r17
    1ac8:	68 f7       	brcc	.-38     	; 0x1aa4 <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    1aca:	0f 5f       	subi	r16, 0xFF	; 255
    1acc:	cc 5a       	subi	r28, 0xAC	; 172
    1ace:	df 4f       	sbci	r29, 0xFF	; 255
    1ad0:	06 30       	cpi	r16, 0x06	; 6
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <glcd_write+0x94>
    1ad4:	97 01       	movw	r18, r14
    1ad6:	c1 cf       	rjmp	.-126    	; 0x1a5a <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    1ad8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <glcd_reset_bbox>

}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1af0:	08 95       	ret

00001af2 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    1af2:	86 30       	cpi	r24, 0x06	; 6
    1af4:	10 f0       	brcs	.+4      	; 0x1afa <glcd_set_y_address+0x8>
    1af6:	85 e4       	ldi	r24, 0x45	; 69
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <glcd_set_y_address+0xa>
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1b00:	08 95       	ret

00001b02 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1b08:	08 95       	ret

00001b0a <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    1b0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    1b0e:	84 e2       	ldi	r24, 0x24	; 36
    1b10:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1b14:	08 95       	ret

00001b16 <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    1b16:	1f 93       	push	r17
    1b18:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1b1a:	81 e2       	ldi	r24, 0x21	; 33
    1b1c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    1b20:	81 2f       	mov	r24, r17
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1b2e:	8c e0       	ldi	r24, 0x0C	; 12
    1b30:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <glcd_command>
}
    1b34:	1f 91       	pop	r17
    1b36:	08 95       	ret

00001b38 <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    1b38:	28 2f       	mov	r18, r24
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	68 1b       	sub	r22, r24
    1b40:	71 09       	sbc	r23, r1
    1b42:	46 9f       	mul	r20, r22
    1b44:	c0 01       	movw	r24, r0
    1b46:	47 9f       	mul	r20, r23
    1b48:	90 0d       	add	r25, r0
    1b4a:	56 9f       	mul	r21, r22
    1b4c:	90 0d       	add	r25, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	6f ef       	ldi	r22, 0xFF	; 255
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    1b58:	82 2f       	mov	r24, r18
    1b5a:	86 0f       	add	r24, r22
    1b5c:	08 95       	ret

00001b5e <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1b5e:	2f 92       	push	r2
    1b60:	3f 92       	push	r3
    1b62:	5f 92       	push	r5
    1b64:	6f 92       	push	r6
    1b66:	7f 92       	push	r7
    1b68:	8f 92       	push	r8
    1b6a:	9f 92       	push	r9
    1b6c:	af 92       	push	r10
    1b6e:	bf 92       	push	r11
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	88 2e       	mov	r8, r24
    1b88:	b6 2e       	mov	r11, r22
    1b8a:	94 2e       	mov	r9, r20
    1b8c:	c2 2e       	mov	r12, r18
    1b8e:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    1b90:	01 e0       	ldi	r16, 0x01	; 1
    1b92:	0e 94 41 14 	call	0x2882	; 0x2882 <glcd_draw_rect>
    1b96:	dd 24       	eor	r13, r13
    1b98:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1b9a:	0c 2d       	mov	r16, r12
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	38 01       	movw	r6, r16
    1ba0:	08 94       	sec
    1ba2:	61 08       	sbc	r6, r1
    1ba4:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    1ba6:	29 2c       	mov	r2, r9
    1ba8:	33 24       	eor	r3, r3
    1baa:	08 94       	sec
    1bac:	21 08       	sbc	r2, r1
    1bae:	31 08       	sbc	r3, r1
    1bb0:	12 c0       	rjmp	.+36     	; 0x1bd6 <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    1bb2:	8f 2d       	mov	r24, r15
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	6a 2d       	mov	r22, r10
    1bb8:	0e 94 8d 11 	call	0x231a	; 0x231a <glcd_get_pixel>
    1bbc:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    1bbe:	8f 2d       	mov	r24, r15
    1bc0:	6a 2d       	mov	r22, r10
    1bc2:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    1bc6:	e3 94       	inc	r14
    1bc8:	f3 94       	inc	r15
    1bca:	8e 2d       	mov	r24, r14
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	82 15       	cp	r24, r2
    1bd0:	93 05       	cpc	r25, r3
    1bd2:	7c f3       	brlt	.-34     	; 0x1bb2 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1bd4:	d3 94       	inc	r13
    1bd6:	8d 2d       	mov	r24, r13
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	86 15       	cp	r24, r6
    1bdc:	97 05       	cpc	r25, r7
    1bde:	34 f4       	brge	.+12     	; 0x1bec <glcd_scrolling_bar_graph+0x8e>
    1be0:	f8 2c       	mov	r15, r8
    1be2:	ee 24       	eor	r14, r14
    1be4:	e3 94       	inc	r14
    1be6:	ad 2c       	mov	r10, r13
    1be8:	ab 0c       	add	r10, r11
    1bea:	ee cf       	rjmp	.-36     	; 0x1bc8 <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    1bec:	03 50       	subi	r16, 0x03	; 3
    1bee:	10 40       	sbci	r17, 0x00	; 0
    1bf0:	85 2d       	mov	r24, r5
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	02 9f       	mul	r16, r18
    1bf8:	c0 01       	movw	r24, r0
    1bfa:	03 9f       	mul	r16, r19
    1bfc:	90 0d       	add	r25, r0
    1bfe:	12 9f       	mul	r17, r18
    1c00:	90 0d       	add	r25, r0
    1c02:	11 24       	eor	r1, r1
    1c04:	6f ef       	ldi	r22, 0xFF	; 255
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    1c0c:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    1c0e:	0f 5f       	subi	r16, 0xFF	; 255
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	86 2f       	mov	r24, r22
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	80 17       	cp	r24, r16
    1c18:	91 07       	cpc	r25, r17
    1c1a:	14 f0       	brlt	.+4      	; 0x1c20 <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    1c1c:	2c 2d       	mov	r18, r12
    1c1e:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1c20:	6c 2d       	mov	r22, r12
    1c22:	6b 0d       	add	r22, r11
    1c24:	98 2d       	mov	r25, r8
    1c26:	92 50       	subi	r25, 0x02	; 2
    1c28:	99 0d       	add	r25, r9
    1c2a:	16 2f       	mov	r17, r22
    1c2c:	12 1b       	sub	r17, r18
    1c2e:	62 50       	subi	r22, 0x02	; 2
    1c30:	12 50       	subi	r17, 0x02	; 2
    1c32:	89 2f       	mov	r24, r25
    1c34:	49 2f       	mov	r20, r25
    1c36:	21 2f       	mov	r18, r17
    1c38:	01 e0       	ldi	r16, 0x01	; 1
    1c3a:	99 83       	std	Y+1, r25	; 0x01
    1c3c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    1c40:	11 50       	subi	r17, 0x01	; 1
    1c42:	b3 94       	inc	r11
    1c44:	99 81       	ldd	r25, Y+1	; 0x01
    1c46:	89 2f       	mov	r24, r25
    1c48:	61 2f       	mov	r22, r17
    1c4a:	49 2f       	mov	r20, r25
    1c4c:	2b 2d       	mov	r18, r11
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    1c54:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	3f 90       	pop	r3
    1c7a:	2f 90       	pop	r2
    1c7c:	08 95       	ret

00001c7e <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    1c7e:	7f 92       	push	r7
    1c80:	8f 92       	push	r8
    1c82:	9f 92       	push	r9
    1c84:	af 92       	push	r10
    1c86:	bf 92       	push	r11
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	78 2e       	mov	r7, r24
    1c96:	86 2e       	mov	r8, r22
    1c98:	94 2e       	mov	r9, r20
    1c9a:	a2 2e       	mov	r10, r18
    1c9c:	b0 2e       	mov	r11, r16
    1c9e:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    1ca0:	ee 20       	and	r14, r14
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <glcd_scrolling_bar_graph_timing+0x2a>
    1ca4:	ff 24       	eor	r15, r15
    1ca6:	f3 94       	inc	r15
    1ca8:	10 e0       	ldi	r17, 0x00	; 0
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    1cac:	87 2d       	mov	r24, r7
    1cae:	68 2d       	mov	r22, r8
    1cb0:	49 2d       	mov	r20, r9
    1cb2:	2a 2d       	mov	r18, r10
    1cb4:	0b 2d       	mov	r16, r11
    1cb6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    1cba:	1f 5f       	subi	r17, 0xFF	; 255
    1cbc:	1f 15       	cp	r17, r15
    1cbe:	b0 f3       	brcs	.-20     	; 0x1cac <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    1cc0:	c1 14       	cp	r12, r1
    1cc2:	d1 04       	cpc	r13, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <glcd_scrolling_bar_graph_timing+0x4a>
    1cc6:	41 c0       	rjmp	.+130    	; 0x1d4a <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    1cc8:	b6 01       	movw	r22, r12
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 12 1b 	call	0x3624	; 0x3624 <__floatunsisf>
    1cd2:	5b 01       	movw	r10, r22
    1cd4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a e7       	ldi	r20, 0x7A	; 122
    1cdc:	55 e4       	ldi	r21, 0x45	; 69
    1cde:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__mulsf3>
    1ce2:	7b 01       	movw	r14, r22
    1ce4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__cmpsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	1c f4       	brge	.+6      	; 0x1cfc <glcd_scrolling_bar_graph_timing+0x7e>
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	24 c0       	rjmp	.+72     	; 0x1d44 <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	b7 01       	movw	r22, r14
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__gesf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	b4 f4       	brge	.+44     	; 0x1d3c <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	c6 01       	movw	r24, r12
    1d12:	b5 01       	movw	r22, r10
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__mulsf3>
    1d20:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fixunssfsi>
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <glcd_scrolling_bar_graph_timing+0xb6>
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	31 97       	sbiw	r30, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	61 50       	subi	r22, 0x01	; 1
    1d32:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	61 15       	cp	r22, r1
    1d36:	71 05       	cpc	r23, r1
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <glcd_scrolling_bar_graph_timing+0xac>
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	b7 01       	movw	r22, r14
    1d40:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fixunssfsi>
    1d44:	cb 01       	movw	r24, r22
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	bf 90       	pop	r11
    1d58:	af 90       	pop	r10
    1d5a:	9f 90       	pop	r9
    1d5c:	8f 90       	pop	r8
    1d5e:	7f 90       	pop	r7
    1d60:	08 95       	ret

00001d62 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	e8 2e       	mov	r14, r24
    1d6e:	f6 2e       	mov	r15, r22
    1d70:	d4 2e       	mov	r13, r20
    1d72:	12 2f       	mov	r17, r18
    1d74:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    1d76:	62 2f       	mov	r22, r18
    1d78:	62 50       	subi	r22, 0x02	; 2
    1d7a:	40 95       	com	r20
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <glcd_map>
    1d82:	f8 0e       	add	r15, r24
    1d84:	18 1b       	sub	r17, r24
    1d86:	12 50       	subi	r17, 0x02	; 2
    1d88:	8e 2d       	mov	r24, r14
    1d8a:	6f 2d       	mov	r22, r15
    1d8c:	4d 2d       	mov	r20, r13
    1d8e:	21 2f       	mov	r18, r17
    1d90:	01 e0       	ldi	r16, 0x01	; 1
    1d92:	0e 94 aa 14 	call	0x2954	; 0x2954 <glcd_fill_rect>
}
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	08 95       	ret

00001da2 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	c8 2e       	mov	r12, r24
    1db0:	d6 2e       	mov	r13, r22
    1db2:	e4 2e       	mov	r14, r20
    1db4:	12 2f       	mov	r17, r18
    1db6:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    1db8:	01 e0       	ldi	r16, 0x01	; 1
    1dba:	0e 94 41 14 	call	0x2882	; 0x2882 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1dbe:	61 2f       	mov	r22, r17
    1dc0:	62 50       	subi	r22, 0x02	; 2
    1dc2:	f0 94       	com	r15
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	4f 2d       	mov	r20, r15
    1dc8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <glcd_map>
    1dcc:	68 2f       	mov	r22, r24
    1dce:	6f 5f       	subi	r22, 0xFF	; 255
    1dd0:	6d 0d       	add	r22, r13
    1dd2:	9e ef       	ldi	r25, 0xFE	; 254
    1dd4:	e9 0e       	add	r14, r25
    1dd6:	18 1b       	sub	r17, r24
    1dd8:	12 50       	subi	r17, 0x02	; 2
    1dda:	8c 2d       	mov	r24, r12
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	4e 2d       	mov	r20, r14
    1de0:	21 2f       	mov	r18, r17
    1de2:	0e 94 aa 14 	call	0x2954	; 0x2954 <glcd_fill_rect>
}
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	08 95       	ret

00001df4 <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	f8 2e       	mov	r15, r24
    1dfe:	e6 2e       	mov	r14, r22
    1e00:	12 2f       	mov	r17, r18
	if (height < 3) {
    1e02:	23 30       	cpi	r18, 0x03	; 3
    1e04:	60 f0       	brcs	.+24     	; 0x1e1e <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	64 2f       	mov	r22, r20
    1e0a:	40 2f       	mov	r20, r16
    1e0c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <glcd_map>
    1e10:	48 2f       	mov	r20, r24
    1e12:	8f 2d       	mov	r24, r15
    1e14:	6e 2d       	mov	r22, r14
    1e16:	21 2f       	mov	r18, r17
    1e18:	01 e0       	ldi	r16, 0x01	; 1
    1e1a:	0e 94 aa 14 	call	0x2954	; 0x2954 <glcd_fill_rect>
}
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	08 95       	ret

00001e28 <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	c8 2e       	mov	r12, r24
    1e36:	e6 2e       	mov	r14, r22
    1e38:	14 2f       	mov	r17, r20
    1e3a:	f2 2e       	mov	r15, r18
    1e3c:	d0 2e       	mov	r13, r16
	if (height < 3) {
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	82 17       	cp	r24, r18
    1e42:	a0 f4       	brcc	.+40     	; 0x1e6c <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    1e44:	8c 2d       	mov	r24, r12
    1e46:	01 e0       	ldi	r16, 0x01	; 1
    1e48:	0e 94 41 14 	call	0x2882	; 0x2882 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    1e4c:	12 50       	subi	r17, 0x02	; 2
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	61 2f       	mov	r22, r17
    1e52:	4d 2d       	mov	r20, r13
    1e54:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <glcd_map>
    1e58:	48 2f       	mov	r20, r24
    1e5a:	e3 94       	inc	r14
    1e5c:	8e ef       	ldi	r24, 0xFE	; 254
    1e5e:	f8 0e       	add	r15, r24
    1e60:	8c 2d       	mov	r24, r12
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	6e 2d       	mov	r22, r14
    1e66:	2f 2d       	mov	r18, r15
    1e68:	0e 94 aa 14 	call	0x2954	; 0x2954 <glcd_fill_rect>
}
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	08 95       	ret

00001e7a <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1e7a:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1e7c:	90 93 13 04 	sts	0x0413, r25
    1e80:	80 93 12 04 	sts	0x0412, r24
	font_current.width = width;
    1e84:	60 93 14 04 	sts	0x0414, r22
	font_current.height = height;
    1e88:	40 93 15 04 	sts	0x0415, r20
	font_current.start_char = start_char;
    1e8c:	20 93 16 04 	sts	0x0416, r18
	font_current.end_char = end_char;
    1e90:	00 93 17 04 	sts	0x0417, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 18 04 	sts	0x0418, r24
}
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    1e9e:	ef 92       	push	r14
    1ea0:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1ea2:	90 93 13 04 	sts	0x0413, r25
    1ea6:	80 93 12 04 	sts	0x0412, r24
	font_current.width = width;
    1eaa:	60 93 14 04 	sts	0x0414, r22
	font_current.height = height;
    1eae:	40 93 15 04 	sts	0x0415, r20
	font_current.start_char = start_char;
    1eb2:	20 93 16 04 	sts	0x0416, r18
	font_current.end_char = end_char;
    1eb6:	00 93 17 04 	sts	0x0417, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    1eba:	e0 92 18 04 	sts	0x0418, r14
}
    1ebe:	0f 91       	pop	r16
    1ec0:	ef 90       	pop	r14
    1ec2:	08 95       	ret

00001ec4 <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    1ec4:	2f 92       	push	r2
    1ec6:	3f 92       	push	r3
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	8f 92       	push	r8
    1ed2:	9f 92       	push	r9
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	63 97       	sbiw	r28, 0x13	; 19
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	48 2e       	mov	r4, r24
    1efa:	e6 2e       	mov	r14, r22
    1efc:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    1efe:	50 91 16 04 	lds	r21, 0x0416
    1f02:	45 17       	cp	r20, r21
    1f04:	20 f0       	brcs	.+8      	; 0x1f0e <glcd_draw_char_xy+0x4a>
    1f06:	80 91 17 04 	lds	r24, 0x0417
    1f0a:	84 17       	cp	r24, r20
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <glcd_draw_char_xy+0x4c>
    1f0e:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1f10:	80 91 18 04 	lds	r24, 0x0418
    1f14:	88 23       	and	r24, r24
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <glcd_draw_char_xy+0x56>
    1f18:	58 c0       	rjmp	.+176    	; 0x1fca <glcd_draw_char_xy+0x106>
    1f1a:	04 2d       	mov	r16, r4
    1f1c:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1f1e:	43 2e       	mov	r4, r19
    1f20:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1f22:	60 2e       	mov	r6, r16
    1f24:	77 24       	eor	r7, r7
    1f26:	8e 2c       	mov	r8, r14
    1f28:	99 24       	eor	r9, r9
    1f2a:	49 c0       	rjmp	.+146    	; 0x1fbe <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1f2c:	4f 2d       	mov	r20, r15
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	80 91 16 04 	lds	r24, 0x0416
    1f34:	92 01       	movw	r18, r4
    1f36:	28 1b       	sub	r18, r24
    1f38:	31 09       	sbc	r19, r1
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	bc 01       	movw	r22, r24
    1f40:	26 9f       	mul	r18, r22
    1f42:	c0 01       	movw	r24, r0
    1f44:	27 9f       	mul	r18, r23
    1f46:	90 0d       	add	r25, r0
    1f48:	36 9f       	mul	r19, r22
    1f4a:	90 0d       	add	r25, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	84 0f       	add	r24, r20
    1f50:	95 1f       	adc	r25, r21
    1f52:	e0 91 12 04 	lds	r30, 0x0412
    1f56:	f0 91 13 04 	lds	r31, 0x0413
    1f5a:	e8 0f       	add	r30, r24
    1f5c:	f9 1f       	adc	r31, r25
    1f5e:	e4 91       	lpm	r30, Z+
    1f60:	1e 2d       	mov	r17, r14
    1f62:	22 24       	eor	r2, r2
    1f64:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1f66:	5a 01       	movw	r10, r20
    1f68:	a6 0c       	add	r10, r6
    1f6a:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1f6c:	ce 2e       	mov	r12, r30
    1f6e:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1f70:	74 e5       	ldi	r23, 0x54	; 84
    1f72:	a7 16       	cp	r10, r23
    1f74:	b1 04       	cpc	r11, r1
    1f76:	0c f0       	brlt	.+2      	; 0x1f7a <glcd_draw_char_xy+0xb6>
    1f78:	70 c1       	rjmp	.+736    	; 0x225a <glcd_draw_char_xy+0x396>
    1f7a:	c1 01       	movw	r24, r2
    1f7c:	88 0d       	add	r24, r8
    1f7e:	99 1d       	adc	r25, r9
    1f80:	c0 97       	sbiw	r24, 0x30	; 48
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <glcd_draw_char_xy+0xc2>
    1f84:	6a c1       	rjmp	.+724    	; 0x225a <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1f86:	c6 01       	movw	r24, r12
    1f88:	02 2c       	mov	r0, r2
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <glcd_draw_char_xy+0xcc>
    1f8c:	95 95       	asr	r25
    1f8e:	87 95       	ror	r24
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <glcd_draw_char_xy+0xc8>
    1f94:	80 ff       	sbrs	r24, 0
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    1f98:	80 2f       	mov	r24, r16
    1f9a:	61 2f       	mov	r22, r17
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    1fa0:	80 2f       	mov	r24, r16
    1fa2:	61 2f       	mov	r22, r17
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    1faa:	08 94       	sec
    1fac:	21 1c       	adc	r2, r1
    1fae:	31 1c       	adc	r3, r1
    1fb0:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    1fb2:	88 e0       	ldi	r24, 0x08	; 8
    1fb4:	28 16       	cp	r2, r24
    1fb6:	31 04       	cpc	r3, r1
    1fb8:	d9 f6       	brne	.-74     	; 0x1f70 <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    1fba:	f3 94       	inc	r15
    1fbc:	0f 5f       	subi	r16, 0xFF	; 255
    1fbe:	90 91 14 04 	lds	r25, 0x0414
    1fc2:	f9 16       	cp	r15, r25
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <glcd_draw_char_xy+0x104>
    1fc6:	b2 cf       	rjmp	.-156    	; 0x1f2c <glcd_draw_char_xy+0x68>
    1fc8:	49 c1       	rjmp	.+658    	; 0x225c <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <glcd_draw_char_xy+0x10c>
    1fce:	9c c0       	rjmp	.+312    	; 0x2108 <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    1fd0:	20 91 15 04 	lds	r18, 0x0415
    1fd4:	82 2f       	mov	r24, r18
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	87 70       	andi	r24, 0x07	; 7
    1fda:	90 70       	andi	r25, 0x00	; 0
    1fdc:	26 95       	lsr	r18
    1fde:	26 95       	lsr	r18
    1fe0:	26 95       	lsr	r18
    1fe2:	89 2b       	or	r24, r25
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    1fe6:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1fea:	80 91 14 04 	lds	r24, 0x0414
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	98 9f       	mul	r25, r24
    1ff2:	80 2d       	mov	r24, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	23 2f       	mov	r18, r19
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	25 1b       	sub	r18, r21
    2000:	31 09       	sbc	r19, r1
    2002:	dc 01       	movw	r26, r24
    2004:	a2 9f       	mul	r26, r18
    2006:	c0 01       	movw	r24, r0
    2008:	a3 9f       	mul	r26, r19
    200a:	90 0d       	add	r25, r0
    200c:	b2 9f       	mul	r27, r18
    200e:	90 0d       	add	r25, r0
    2010:	11 24       	eor	r1, r1
    2012:	e0 91 12 04 	lds	r30, 0x0412
    2016:	f0 91 13 04 	lds	r31, 0x0413
    201a:	e8 0f       	add	r30, r24
    201c:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    201e:	b4 91       	lpm	r27, Z+
    2020:	bb 83       	std	Y+3, r27	; 0x03
    2022:	3c 81       	ldd	r19, Y+4	; 0x04
    2024:	23 2f       	mov	r18, r19
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3a 83       	std	Y+2, r19	; 0x02
    202a:	29 83       	std	Y+1, r18	; 0x01
    202c:	3f 01       	movw	r6, r30
    202e:	08 94       	sec
    2030:	61 1c       	adc	r6, r1
    2032:	71 1c       	adc	r7, r1
    2034:	54 2c       	mov	r5, r4
    2036:	88 24       	eor	r8, r8
    2038:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    203a:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    203c:	44 2d       	mov	r20, r4
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	5c 87       	std	Y+12, r21	; 0x0c
    2042:	4b 87       	std	Y+11, r20	; 0x0b
    2044:	4f c0       	rjmp	.+158    	; 0x20e4 <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    2046:	f5 01       	movw	r30, r10
    2048:	84 91       	lpm	r24, Z+
    204a:	e8 86       	std	Y+8, r14	; 0x08
    204c:	86 01       	movw	r16, r12
    204e:	1b 8a       	std	Y+19, r1	; 0x13
    2050:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    2052:	28 2e       	mov	r2, r24
    2054:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    2056:	29 85       	ldd	r18, Y+9	; 0x09
    2058:	3a 85       	ldd	r19, Y+10	; 0x0a
    205a:	24 35       	cpi	r18, 0x54	; 84
    205c:	31 05       	cpc	r19, r1
    205e:	0c f0       	brlt	.+2      	; 0x2062 <glcd_draw_char_xy+0x19e>
    2060:	fc c0       	rjmp	.+504    	; 0x225a <glcd_draw_char_xy+0x396>
    2062:	2a 89       	ldd	r18, Y+18	; 0x12
    2064:	8a 89       	ldd	r24, Y+18	; 0x12
    2066:	9b 89       	ldd	r25, Y+19	; 0x13
    2068:	8e 0d       	add	r24, r14
    206a:	9f 1d       	adc	r25, r15
    206c:	c0 97       	sbiw	r24, 0x30	; 48
    206e:	0c f0       	brlt	.+2      	; 0x2072 <glcd_draw_char_xy+0x1ae>
    2070:	f4 c0       	rjmp	.+488    	; 0x225a <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    2072:	80 91 15 04 	lds	r24, 0x0415
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	08 17       	cp	r16, r24
    207a:	19 07       	cpc	r17, r25
    207c:	94 f4       	brge	.+36     	; 0x20a2 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    207e:	c1 01       	movw	r24, r2
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <glcd_draw_char_xy+0x1c4>
    2084:	95 95       	asr	r25
    2086:	87 95       	ror	r24
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <glcd_draw_char_xy+0x1c0>
    208c:	68 85       	ldd	r22, Y+8	; 0x08
    208e:	62 0f       	add	r22, r18
    2090:	80 ff       	sbrs	r24, 0
    2092:	03 c0       	rjmp	.+6      	; 0x209a <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    2094:	85 2d       	mov	r24, r5
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	02 c0       	rjmp	.+4      	; 0x209e <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    209a:	85 2d       	mov	r24, r5
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    20a2:	4a 89       	ldd	r20, Y+18	; 0x12
    20a4:	5b 89       	ldd	r21, Y+19	; 0x13
    20a6:	4f 5f       	subi	r20, 0xFF	; 255
    20a8:	5f 4f       	sbci	r21, 0xFF	; 255
    20aa:	5b 8b       	std	Y+19, r21	; 0x13
    20ac:	4a 8b       	std	Y+18, r20	; 0x12
    20ae:	0f 5f       	subi	r16, 0xFF	; 255
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    20b2:	48 30       	cpi	r20, 0x08	; 8
    20b4:	51 05       	cpc	r21, r1
    20b6:	79 f6       	brne	.-98     	; 0x2056 <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    20b8:	43 94       	inc	r4
    20ba:	68 e0       	ldi	r22, 0x08	; 8
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	e6 0e       	add	r14, r22
    20c0:	f7 1e       	adc	r15, r23
    20c2:	c6 0e       	add	r12, r22
    20c4:	d7 1e       	adc	r13, r23
    20c6:	08 94       	sec
    20c8:	a1 1c       	adc	r10, r1
    20ca:	b1 1c       	adc	r11, r1
    20cc:	7c 81       	ldd	r23, Y+4	; 0x04
    20ce:	47 16       	cp	r4, r23
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <glcd_draw_char_xy+0x210>
    20d2:	b9 cf       	rjmp	.-142    	; 0x2046 <glcd_draw_char_xy+0x182>
    20d4:	08 94       	sec
    20d6:	81 1c       	adc	r8, r1
    20d8:	91 1c       	adc	r9, r1
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	68 0e       	add	r6, r24
    20e0:	79 1e       	adc	r7, r25
    20e2:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	89 16       	cp	r8, r25
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <glcd_draw_char_xy+0x228>
    20ea:	b8 c0       	rjmp	.+368    	; 0x225c <glcd_draw_char_xy+0x398>
    20ec:	89 89       	ldd	r24, Y+17	; 0x11
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	7c 01       	movw	r14, r24
    20f2:	53 01       	movw	r10, r6
    20f4:	44 24       	eor	r4, r4
    20f6:	cc 24       	eor	r12, r12
    20f8:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    20fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    20fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    20fe:	a8 0d       	add	r26, r8
    2100:	b9 1d       	adc	r27, r9
    2102:	ba 87       	std	Y+10, r27	; 0x0a
    2104:	a9 87       	std	Y+9, r26	; 0x09
    2106:	e2 cf       	rjmp	.-60     	; 0x20cc <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	09 f0       	breq	.+2      	; 0x210e <glcd_draw_char_xy+0x24a>
    210c:	a6 c0       	rjmp	.+332    	; 0x225a <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    210e:	b0 90 15 04 	lds	r11, 0x0415
    2112:	b6 94       	lsr	r11
    2114:	b6 94       	lsr	r11
    2116:	b6 94       	lsr	r11
    2118:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    211a:	40 91 14 04 	lds	r20, 0x0414
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    211e:	23 2f       	mov	r18, r19
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	25 1b       	sub	r18, r21
    2124:	31 09       	sbc	r19, r1
    2126:	b4 9e       	mul	r11, r20
    2128:	80 2d       	mov	r24, r0
    212a:	11 24       	eor	r1, r1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	fc 01       	movw	r30, r24
    2130:	2e 9f       	mul	r18, r30
    2132:	c0 01       	movw	r24, r0
    2134:	2f 9f       	mul	r18, r31
    2136:	90 0d       	add	r25, r0
    2138:	3e 9f       	mul	r19, r30
    213a:	90 0d       	add	r25, r0
    213c:	11 24       	eor	r1, r1
    213e:	80 90 12 04 	lds	r8, 0x0412
    2142:	90 90 13 04 	lds	r9, 0x0413
    2146:	88 0e       	add	r8, r24
    2148:	99 1e       	adc	r9, r25
    214a:	54 2e       	mov	r5, r20
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	41 50       	subi	r20, 0x01	; 1
    2152:	50 40       	sbci	r21, 0x00	; 0
    2154:	64 2f       	mov	r22, r20
    2156:	63 1b       	sub	r22, r19
    2158:	e0 e0       	ldi	r30, 0x00	; 0
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	07 c0       	rjmp	.+14     	; 0x216e <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    2160:	89 2f       	mov	r24, r25
    2162:	86 1b       	sub	r24, r22
    2164:	f4 01       	movw	r30, r8
    2166:	e8 0f       	add	r30, r24
    2168:	f1 1d       	adc	r31, r1
    216a:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    216c:	2f 5f       	subi	r18, 0xFF	; 255
    216e:	96 0f       	add	r25, r22
    2170:	2b 15       	cp	r18, r11
    2172:	b0 f3       	brcs	.-20     	; 0x2160 <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    2174:	ee 23       	and	r30, r30
    2176:	21 f4       	brne	.+8      	; 0x2180 <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    2178:	5a 94       	dec	r5
				if (var_width == 0) {
    217a:	11 f0       	breq	.+4      	; 0x2180 <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    217c:	3f 5f       	subi	r19, 0xFF	; 255
    217e:	ea cf       	rjmp	.-44     	; 0x2154 <glcd_draw_char_xy+0x290>
		}
    2180:	ff 24       	eor	r15, r15
    2182:	66 24       	eor	r6, r6
    2184:	cc 24       	eor	r12, r12
    2186:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    2188:	24 2d       	mov	r18, r4
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	38 8b       	std	Y+16, r19	; 0x10
    218e:	2f 87       	std	Y+15, r18	; 0x0f
    2190:	58 c0       	rjmp	.+176    	; 0x2242 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    2192:	8a 2d       	mov	r24, r10
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	20 91 14 04 	lds	r18, 0x0414
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4e 81       	ldd	r20, Y+6	; 0x06
    219e:	5f 81       	ldd	r21, Y+7	; 0x07
    21a0:	42 9f       	mul	r20, r18
    21a2:	f0 01       	movw	r30, r0
    21a4:	43 9f       	mul	r20, r19
    21a6:	f0 0d       	add	r31, r0
    21a8:	52 9f       	mul	r21, r18
    21aa:	f0 0d       	add	r31, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	e8 0f       	add	r30, r24
    21b0:	f9 1f       	adc	r31, r25
    21b2:	e8 0d       	add	r30, r8
    21b4:	f9 1d       	adc	r31, r9
    21b6:	e4 91       	lpm	r30, Z+
    21b8:	86 01       	movw	r16, r12
    21ba:	1b 8a       	std	Y+19, r1	; 0x13
    21bc:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    21be:	6f 85       	ldd	r22, Y+15	; 0x0f
    21c0:	78 89       	ldd	r23, Y+16	; 0x10
    21c2:	68 0f       	add	r22, r24
    21c4:	79 1f       	adc	r23, r25
    21c6:	7e 87       	std	Y+14, r23	; 0x0e
    21c8:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    21ca:	2e 2e       	mov	r2, r30
    21cc:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	84 35       	cpi	r24, 0x54	; 84
    21d4:	91 05       	cpc	r25, r1
    21d6:	0c f0       	brlt	.+2      	; 0x21da <glcd_draw_char_xy+0x316>
    21d8:	40 c0       	rjmp	.+128    	; 0x225a <glcd_draw_char_xy+0x396>
    21da:	2a 89       	ldd	r18, Y+18	; 0x12
    21dc:	8a 89       	ldd	r24, Y+18	; 0x12
    21de:	9b 89       	ldd	r25, Y+19	; 0x13
    21e0:	8e 0d       	add	r24, r14
    21e2:	9f 1d       	adc	r25, r15
    21e4:	c0 97       	sbiw	r24, 0x30	; 48
    21e6:	cc f5       	brge	.+114    	; 0x225a <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    21e8:	80 91 15 04 	lds	r24, 0x0415
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	08 17       	cp	r16, r24
    21f0:	19 07       	cpc	r17, r25
    21f2:	94 f4       	brge	.+36     	; 0x2218 <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    21f4:	c1 01       	movw	r24, r2
    21f6:	02 2e       	mov	r0, r18
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <glcd_draw_char_xy+0x33a>
    21fa:	95 95       	asr	r25
    21fc:	87 95       	ror	r24
    21fe:	0a 94       	dec	r0
    2200:	e2 f7       	brpl	.-8      	; 0x21fa <glcd_draw_char_xy+0x336>
    2202:	6d 81       	ldd	r22, Y+5	; 0x05
    2204:	62 0f       	add	r22, r18
    2206:	80 ff       	sbrs	r24, 0
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    220a:	87 2d       	mov	r24, r7
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    2210:	87 2d       	mov	r24, r7
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    2218:	ea 89       	ldd	r30, Y+18	; 0x12
    221a:	fb 89       	ldd	r31, Y+19	; 0x13
    221c:	31 96       	adiw	r30, 0x01	; 1
    221e:	fb 8b       	std	Y+19, r31	; 0x13
    2220:	ea 8b       	std	Y+18, r30	; 0x12
    2222:	0f 5f       	subi	r16, 0xFF	; 255
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    2226:	38 97       	sbiw	r30, 0x08	; 8
    2228:	91 f6       	brne	.-92     	; 0x21ce <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    222a:	a3 94       	inc	r10
    222c:	73 94       	inc	r7
    222e:	a5 14       	cp	r10, r5
    2230:	08 f4       	brcc	.+2      	; 0x2234 <glcd_draw_char_xy+0x370>
    2232:	af cf       	rjmp	.-162    	; 0x2192 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    2234:	63 94       	inc	r6
    2236:	28 e0       	ldi	r18, 0x08	; 8
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	e2 0e       	add	r14, r18
    223c:	f3 1e       	adc	r15, r19
    223e:	c2 0e       	add	r12, r18
    2240:	d3 1e       	adc	r13, r19
    2242:	6b 14       	cp	r6, r11
    2244:	10 f0       	brcs	.+4      	; 0x224a <glcd_draw_char_xy+0x386>
    2246:	95 2d       	mov	r25, r5
    2248:	09 c0       	rjmp	.+18     	; 0x225c <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    224a:	46 2d       	mov	r20, r6
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	5f 83       	std	Y+7, r21	; 0x07
    2250:	4e 83       	std	Y+6, r20	; 0x06
    2252:	ed 82       	std	Y+5, r14	; 0x05
    2254:	74 2c       	mov	r7, r4
    2256:	aa 24       	eor	r10, r10
    2258:	ea cf       	rjmp	.-44     	; 0x222e <glcd_draw_char_xy+0x36a>
    225a:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    225c:	89 2f       	mov	r24, r25
    225e:	63 96       	adiw	r28, 0x13	; 19
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	df 90       	pop	r13
    2278:	cf 90       	pop	r12
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	7f 90       	pop	r7
    2284:	6f 90       	pop	r6
    2286:	5f 90       	pop	r5
    2288:	4f 90       	pop	r4
    228a:	3f 90       	pop	r3
    228c:	2f 90       	pop	r2
    228e:	08 95       	ret

00002290 <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	18 2f       	mov	r17, r24
    229a:	06 2f       	mov	r16, r22
    229c:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    229e:	86 2f       	mov	r24, r22
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	40 91 15 04 	lds	r20, 0x0415
    22a6:	2f e2       	ldi	r18, 0x2F	; 47
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	24 1b       	sub	r18, r20
    22ac:	31 09       	sbc	r19, r1
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	64 f0       	brlt	.+24     	; 0x22cc <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    22b4:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    22b6:	21 96       	adiw	r28, 0x01	; 1
    22b8:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    22ba:	44 23       	and	r20, r20
    22bc:	39 f0       	breq	.+14     	; 0x22cc <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    22be:	81 2f       	mov	r24, r17
    22c0:	60 2f       	mov	r22, r16
    22c2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <glcd_draw_char_xy>
		x += (width + 1);
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	18 0f       	add	r17, r24
    22ca:	f4 cf       	rjmp	.-24     	; 0x22b4 <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	18 2f       	mov	r17, r24
    22e0:	06 2f       	mov	r16, r22
    22e2:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    22e4:	86 2f       	mov	r24, r22
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	40 91 15 04 	lds	r20, 0x0415
    22ec:	2f e2       	ldi	r18, 0x2F	; 47
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	24 1b       	sub	r18, r20
    22f2:	31 09       	sbc	r19, r1
    22f4:	28 17       	cp	r18, r24
    22f6:	39 07       	cpc	r19, r25
    22f8:	44 f4       	brge	.+16     	; 0x230a <glcd_draw_string_xy+0x34>
    22fa:	0a c0       	rjmp	.+20     	; 0x2310 <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    22fc:	81 2f       	mov	r24, r17
    22fe:	60 2f       	mov	r22, r16
    2300:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <glcd_draw_char_xy>
		x += (width + 1);
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	18 0f       	add	r17, r24
		c++;
    2308:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    230a:	48 81       	ld	r20, Y
    230c:	44 23       	and	r20, r20
    230e:	b1 f7       	brne	.-20     	; 0x22fc <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    231a:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    231c:	84 35       	cpi	r24, 0x54	; 84
    231e:	f0 f4       	brcc	.+60     	; 0x235c <glcd_get_pixel+0x42>
    2320:	60 33       	cpi	r22, 0x30	; 48
    2322:	e0 f4       	brcc	.+56     	; 0x235c <glcd_get_pixel+0x42>
    2324:	86 2f       	mov	r24, r22
    2326:	86 95       	lsr	r24
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	24 e5       	ldi	r18, 0x54	; 84
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	82 9f       	mul	r24, r18
    2334:	f0 01       	movw	r30, r0
    2336:	83 9f       	mul	r24, r19
    2338:	f0 0d       	add	r31, r0
    233a:	92 9f       	mul	r25, r18
    233c:	f0 0d       	add	r31, r0
    233e:	11 24       	eor	r1, r1
    2340:	e4 0f       	add	r30, r20
    2342:	f1 1d       	adc	r31, r1
    2344:	ea 5e       	subi	r30, 0xEA	; 234
    2346:	fd 4f       	sbci	r31, 0xFD	; 253
    2348:	80 81       	ld	r24, Z
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	67 70       	andi	r22, 0x07	; 7
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <glcd_get_pixel+0x3a>
    2350:	95 95       	asr	r25
    2352:	87 95       	ror	r24
    2354:	6a 95       	dec	r22
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <glcd_get_pixel+0x36>
    2358:	81 70       	andi	r24, 0x01	; 1
    235a:	08 95       	ret
    235c:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    235e:	08 95       	ret

00002360 <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    2360:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    2362:	80 91 0e 04 	lds	r24, 0x040E
    2366:	90 91 0f 04 	lds	r25, 0x040F
    236a:	48 ef       	ldi	r20, 0xF8	; 248
    236c:	51 e0       	ldi	r21, 0x01	; 1
    236e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    2372:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <glcd_bbox_refresh>
}
    2376:	08 95       	ret

00002378 <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	08 2f       	mov	r16, r24
    237e:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    2380:	84 35       	cpi	r24, 0x54	; 84
    2382:	e8 f4       	brcc	.+58     	; 0x23be <glcd_invert_pixel+0x46>
    2384:	60 33       	cpi	r22, 0x30	; 48
    2386:	d8 f4       	brcc	.+54     	; 0x23be <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    2388:	40 2f       	mov	r20, r16
    238a:	21 2f       	mov	r18, r17
    238c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    2390:	e1 2f       	mov	r30, r17
    2392:	e6 95       	lsr	r30
    2394:	e6 95       	lsr	r30
    2396:	e6 95       	lsr	r30
    2398:	84 e5       	ldi	r24, 0x54	; 84
    239a:	e8 9f       	mul	r30, r24
    239c:	f0 01       	movw	r30, r0
    239e:	11 24       	eor	r1, r1
    23a0:	e0 0f       	add	r30, r16
    23a2:	f1 1d       	adc	r31, r1
    23a4:	ea 5e       	subi	r30, 0xEA	; 234
    23a6:	fd 4f       	sbci	r31, 0xFD	; 253
    23a8:	17 70       	andi	r17, 0x07	; 7
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <glcd_invert_pixel+0x3c>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	1a 95       	dec	r17
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <glcd_invert_pixel+0x38>
    23b8:	20 81       	ld	r18, Z
    23ba:	28 27       	eor	r18, r24
    23bc:	20 83       	st	Z, r18
}
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret

000023c4 <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	d6 2e       	mov	r13, r22
    23d4:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    23d6:	e8 2e       	mov	r14, r24
    23d8:	ff 24       	eor	r15, r15
    23da:	e4 0e       	add	r14, r20
    23dc:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    23de:	c6 2f       	mov	r28, r22
    23e0:	d0 e0       	ldi	r29, 0x00	; 0
    23e2:	c2 0f       	add	r28, r18
    23e4:	d1 1d       	adc	r29, r1
    23e6:	0b c0       	rjmp	.+22     	; 0x23fe <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    23e8:	80 2f       	mov	r24, r16
    23ea:	61 2f       	mov	r22, r17
    23ec:	0e 94 bc 11 	call	0x2378	; 0x2378 <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    23f0:	1f 5f       	subi	r17, 0xFF	; 255
    23f2:	81 2f       	mov	r24, r17
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	8c 17       	cp	r24, r28
    23f8:	9d 07       	cpc	r25, r29
    23fa:	b4 f3       	brlt	.-20     	; 0x23e8 <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    23fc:	0f 5f       	subi	r16, 0xFF	; 255
    23fe:	80 2f       	mov	r24, r16
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	8e 15       	cp	r24, r14
    2404:	9f 05       	cpc	r25, r15
    2406:	14 f4       	brge	.+4      	; 0x240c <glcd_invert_area+0x48>
    2408:	1d 2d       	mov	r17, r13
    240a:	f3 cf       	rjmp	.-26     	; 0x23f2 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	df 90       	pop	r13
    241a:	08 95       	ret

0000241c <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    241c:	a8 2f       	mov	r26, r24
    241e:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    2420:	84 35       	cpi	r24, 0x54	; 84
    2422:	d0 f5       	brcc	.+116    	; 0x2498 <glcd_set_pixel+0x7c>
    2424:	60 33       	cpi	r22, 0x30	; 48
    2426:	c0 f5       	brcc	.+112    	; 0x2498 <glcd_set_pixel+0x7c>
    2428:	56 2f       	mov	r21, r22
    242a:	56 95       	lsr	r21
    242c:	56 95       	lsr	r21
    242e:	56 95       	lsr	r21
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	26 2f       	mov	r18, r22
    2434:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    2436:	44 23       	and	r20, r20
    2438:	a1 f0       	breq	.+40     	; 0x2462 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    243a:	e4 e5       	ldi	r30, 0x54	; 84
    243c:	5e 9f       	mul	r21, r30
    243e:	f0 01       	movw	r30, r0
    2440:	11 24       	eor	r1, r1
    2442:	e8 0f       	add	r30, r24
    2444:	f9 1f       	adc	r31, r25
    2446:	ea 5e       	subi	r30, 0xEA	; 234
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	27 70       	andi	r18, 0x07	; 7
    244c:	30 70       	andi	r19, 0x00	; 0
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <glcd_set_pixel+0x3c>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	2a 95       	dec	r18
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <glcd_set_pixel+0x38>
    245c:	20 81       	ld	r18, Z
    245e:	28 2b       	or	r18, r24
    2460:	14 c0       	rjmp	.+40     	; 0x248a <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    2462:	e4 e5       	ldi	r30, 0x54	; 84
    2464:	5e 9f       	mul	r21, r30
    2466:	f0 01       	movw	r30, r0
    2468:	11 24       	eor	r1, r1
    246a:	e8 0f       	add	r30, r24
    246c:	f9 1f       	adc	r31, r25
    246e:	ea 5e       	subi	r30, 0xEA	; 234
    2470:	fd 4f       	sbci	r31, 0xFD	; 253
    2472:	27 70       	andi	r18, 0x07	; 7
    2474:	30 70       	andi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <glcd_set_pixel+0x64>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	2a 95       	dec	r18
    2482:	e2 f7       	brpl	.-8      	; 0x247c <glcd_set_pixel+0x60>
    2484:	80 95       	com	r24
    2486:	20 81       	ld	r18, Z
    2488:	28 23       	and	r18, r24
    248a:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    248c:	8a 2f       	mov	r24, r26
    248e:	67 2f       	mov	r22, r23
    2490:	4a 2f       	mov	r20, r26
    2492:	27 2f       	mov	r18, r23
    2494:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
    2498:	08 95       	ret

0000249a <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    249a:	3f 92       	push	r3
    249c:	4f 92       	push	r4
    249e:	5f 92       	push	r5
    24a0:	6f 92       	push	r6
    24a2:	7f 92       	push	r7
    24a4:	8f 92       	push	r8
    24a6:	9f 92       	push	r9
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	00 d0       	rcall	.+0      	; 0x24be <glcd_fill_circle+0x24>
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <glcd_fill_circle+0x26>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <glcd_fill_circle+0x28>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	b8 2e       	mov	r11, r24
    24c8:	e6 2e       	mov	r14, r22
    24ca:	f4 2e       	mov	r15, r20
    24cc:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    24ce:	04 2f       	mov	r16, r20
    24d0:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    24d2:	64 1b       	sub	r22, r20
    24d4:	48 0f       	add	r20, r24
    24d6:	2f 2d       	mov	r18, r15
    24d8:	2e 0d       	add	r18, r14
    24da:	8f 19       	sub	r24, r15
    24dc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    24e0:	8e 2c       	mov	r8, r14
    24e2:	99 24       	eor	r9, r9
    24e4:	24 01       	movw	r4, r8
    24e6:	40 1a       	sub	r4, r16
    24e8:	51 0a       	sbc	r5, r17
    24ea:	68 01       	movw	r12, r16
    24ec:	c8 0c       	add	r12, r8
    24ee:	d9 1c       	adc	r13, r9
    24f0:	08 c0       	rjmp	.+16     	; 0x2502 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    24f2:	8b 2d       	mov	r24, r11
    24f4:	64 2d       	mov	r22, r4
    24f6:	46 2d       	mov	r20, r6
    24f8:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    24fc:	08 94       	sec
    24fe:	41 1c       	adc	r4, r1
    2500:	51 1c       	adc	r5, r1
    2502:	c4 14       	cp	r12, r4
    2504:	d5 04       	cpc	r13, r5
    2506:	ac f7       	brge	.-22     	; 0x24f2 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    2508:	dd 24       	eor	r13, r13
    250a:	d3 94       	inc	r13
    250c:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    250e:	00 0f       	add	r16, r16
    2510:	11 1f       	adc	r17, r17
    2512:	40 2e       	mov	r4, r16
    2514:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    2516:	cf 2c       	mov	r12, r15
    2518:	aa 24       	eor	r10, r10
    251a:	00 e0       	ldi	r16, 0x00	; 0
    251c:	10 e0       	ldi	r17, 0x00	; 0
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2522:	8e 2d       	mov	r24, r14
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 01       	movw	r18, r24
    2528:	21 50       	subi	r18, 0x01	; 1
    252a:	30 40       	sbci	r19, 0x00	; 0
    252c:	3a 83       	std	Y+2, r19	; 0x02
    252e:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    2530:	fc 01       	movw	r30, r24
    2532:	31 96       	adiw	r30, 0x01	; 1
    2534:	fc 83       	std	Y+4, r31	; 0x04
    2536:	eb 83       	std	Y+3, r30	; 0x03
    2538:	54 c0       	rjmp	.+168    	; 0x25e2 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    253a:	d7 fc       	sbrc	r13, 7
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <glcd_fill_circle+0xac>
			y--;
    253e:	ca 94       	dec	r12
			ddF_y += 2;
    2540:	f2 e0       	ldi	r31, 0x02	; 2
    2542:	4f 0e       	add	r4, r31
			f += ddF_y;
    2544:	d4 0c       	add	r13, r4
		}
		x++;
    2546:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    2548:	8c 2d       	mov	r24, r12
    254a:	99 27       	eor	r25, r25
    254c:	87 fd       	sbrc	r24, 7
    254e:	90 95       	com	r25
    2550:	94 01       	movw	r18, r8
    2552:	28 1b       	sub	r18, r24
    2554:	39 0b       	sbc	r19, r25
    2556:	3e 83       	std	Y+6, r19	; 0x06
    2558:	2d 83       	std	Y+5, r18	; 0x05
    255a:	7c 01       	movw	r14, r24
    255c:	e8 0c       	add	r14, r8
    255e:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    2560:	3a 2c       	mov	r3, r10
    2562:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    2564:	5b 2c       	mov	r5, r11
    2566:	5a 18       	sub	r5, r10
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    256a:	83 2d       	mov	r24, r3
    256c:	6d 81       	ldd	r22, Y+5	; 0x05
    256e:	46 2d       	mov	r20, r6
    2570:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    2574:	85 2d       	mov	r24, r5
    2576:	6d 81       	ldd	r22, Y+5	; 0x05
    2578:	46 2d       	mov	r20, r6
    257a:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	ed 81       	ldd	r30, Y+5	; 0x05
    258a:	fe 81       	ldd	r31, Y+6	; 0x06
    258c:	ee 16       	cp	r14, r30
    258e:	ff 06       	cpc	r15, r31
    2590:	64 f7       	brge	.-40     	; 0x256a <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2592:	29 81       	ldd	r18, Y+1	; 0x01
    2594:	3a 81       	ldd	r19, Y+2	; 0x02
    2596:	20 1b       	sub	r18, r16
    2598:	31 0b       	sbc	r19, r17
    259a:	3e 83       	std	Y+6, r19	; 0x06
    259c:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    259e:	eb 80       	ldd	r14, Y+3	; 0x03
    25a0:	fc 80       	ldd	r15, Y+4	; 0x04
    25a2:	e0 0e       	add	r14, r16
    25a4:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    25a6:	3c 2c       	mov	r3, r12
    25a8:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    25aa:	5b 2c       	mov	r5, r11
    25ac:	5c 18       	sub	r5, r12
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    25b0:	83 2d       	mov	r24, r3
    25b2:	6d 81       	ldd	r22, Y+5	; 0x05
    25b4:	46 2d       	mov	r20, r6
    25b6:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    25ba:	85 2d       	mov	r24, r5
    25bc:	6d 81       	ldd	r22, Y+5	; 0x05
    25be:	46 2d       	mov	r20, r6
    25c0:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	ed 81       	ldd	r30, Y+5	; 0x05
    25d0:	fe 81       	ldd	r31, Y+6	; 0x06
    25d2:	ee 16       	cp	r14, r30
    25d4:	ff 06       	cpc	r15, r31
    25d6:	64 f7       	brge	.-40     	; 0x25b0 <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    25d8:	d7 0c       	add	r13, r7
    25da:	0f 5f       	subi	r16, 0xFF	; 255
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	f2 e0       	ldi	r31, 0x02	; 2
    25e0:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    25e2:	ac 14       	cp	r10, r12
    25e4:	0c f4       	brge	.+2      	; 0x25e8 <glcd_fill_circle+0x14e>
    25e6:	a9 cf       	rjmp	.-174    	; 0x253a <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    25e8:	26 96       	adiw	r28, 0x06	; 6
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	9f 90       	pop	r9
    260a:	8f 90       	pop	r8
    260c:	7f 90       	pop	r7
    260e:	6f 90       	pop	r6
    2610:	5f 90       	pop	r5
    2612:	4f 90       	pop	r4
    2614:	3f 90       	pop	r3
    2616:	08 95       	ret

00002618 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2618:	7f 92       	push	r7
    261a:	8f 92       	push	r8
    261c:	9f 92       	push	r9
    261e:	af 92       	push	r10
    2620:	bf 92       	push	r11
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	a8 2e       	mov	r10, r24
    2630:	b6 2e       	mov	r11, r22
    2632:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    2634:	99 24       	eor	r9, r9
    2636:	93 94       	inc	r9
    2638:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    263a:	84 2f       	mov	r24, r20
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	78 2e       	mov	r7, r24
    2644:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    2646:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    2648:	ea 2c       	mov	r14, r10
    264a:	e4 1a       	sub	r14, r20
    264c:	06 2f       	mov	r16, r22
    264e:	04 1b       	sub	r16, r20
    2650:	f4 2e       	mov	r15, r20
    2652:	fa 0c       	add	r15, r10
    2654:	14 2f       	mov	r17, r20
    2656:	16 0f       	add	r17, r22
    2658:	8e 2d       	mov	r24, r14
    265a:	60 2f       	mov	r22, r16
    265c:	4f 2d       	mov	r20, r15
    265e:	21 2f       	mov	r18, r17
    2660:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    2664:	8a 2d       	mov	r24, r10
    2666:	61 2f       	mov	r22, r17
    2668:	4c 2d       	mov	r20, r12
    266a:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    266e:	8a 2d       	mov	r24, r10
    2670:	60 2f       	mov	r22, r16
    2672:	4c 2d       	mov	r20, r12
    2674:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    2678:	8f 2d       	mov	r24, r15
    267a:	6b 2d       	mov	r22, r11
    267c:	4c 2d       	mov	r20, r12
    267e:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    2682:	8e 2d       	mov	r24, r14
    2684:	6b 2d       	mov	r22, r11
    2686:	4c 2d       	mov	r20, r12
    2688:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    268c:	ee 24       	eor	r14, r14
    268e:	23 e0       	ldi	r18, 0x03	; 3
    2690:	82 2e       	mov	r8, r18
    2692:	42 c0       	rjmp	.+132    	; 0x2718 <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    2694:	97 fc       	sbrc	r9, 7
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <glcd_draw_circle+0x88>
			y--;
    2698:	da 94       	dec	r13
			ddF_y += 2;
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	78 0e       	add	r7, r24
			f += ddF_y;
    269e:	97 0c       	add	r9, r7
		}
		x++;
    26a0:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    26a2:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    26a4:	fe 2c       	mov	r15, r14
    26a6:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    26a8:	1d 2d       	mov	r17, r13
    26aa:	1b 0d       	add	r17, r11
    26ac:	8f 2d       	mov	r24, r15
    26ae:	61 2f       	mov	r22, r17
    26b0:	4c 2d       	mov	r20, r12
    26b2:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    26b6:	0a 2d       	mov	r16, r10
    26b8:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    26ba:	80 2f       	mov	r24, r16
    26bc:	61 2f       	mov	r22, r17
    26be:	4c 2d       	mov	r20, r12
    26c0:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    26c4:	1b 2d       	mov	r17, r11
    26c6:	1d 19       	sub	r17, r13
    26c8:	8f 2d       	mov	r24, r15
    26ca:	61 2f       	mov	r22, r17
    26cc:	4c 2d       	mov	r20, r12
    26ce:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    26d2:	80 2f       	mov	r24, r16
    26d4:	61 2f       	mov	r22, r17
    26d6:	4c 2d       	mov	r20, r12
    26d8:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    26dc:	fd 2c       	mov	r15, r13
    26de:	fa 0c       	add	r15, r10
    26e0:	1e 2d       	mov	r17, r14
    26e2:	1b 0d       	add	r17, r11
    26e4:	8f 2d       	mov	r24, r15
    26e6:	61 2f       	mov	r22, r17
    26e8:	4c 2d       	mov	r20, r12
    26ea:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    26ee:	0a 2d       	mov	r16, r10
    26f0:	0d 19       	sub	r16, r13
    26f2:	80 2f       	mov	r24, r16
    26f4:	61 2f       	mov	r22, r17
    26f6:	4c 2d       	mov	r20, r12
    26f8:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    26fc:	1b 2d       	mov	r17, r11
    26fe:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    2700:	8f 2d       	mov	r24, r15
    2702:	61 2f       	mov	r22, r17
    2704:	4c 2d       	mov	r20, r12
    2706:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    270a:	80 2f       	mov	r24, r16
    270c:	61 2f       	mov	r22, r17
    270e:	4c 2d       	mov	r20, r12
    2710:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    2718:	ed 14       	cp	r14, r13
    271a:	0c f4       	brge	.+2      	; 0x271e <glcd_draw_circle+0x106>
    271c:	bb cf       	rjmp	.-138    	; 0x2694 <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	ff 90       	pop	r15
    2724:	ef 90       	pop	r14
    2726:	df 90       	pop	r13
    2728:	cf 90       	pop	r12
    272a:	bf 90       	pop	r11
    272c:	af 90       	pop	r10
    272e:	9f 90       	pop	r9
    2730:	8f 90       	pop	r8
    2732:	7f 90       	pop	r7
    2734:	08 95       	ret

00002736 <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    2736:	2f 92       	push	r2
    2738:	3f 92       	push	r3
    273a:	4f 92       	push	r4
    273c:	5f 92       	push	r5
    273e:	6f 92       	push	r6
    2740:	7f 92       	push	r7
    2742:	8f 92       	push	r8
    2744:	9f 92       	push	r9
    2746:	af 92       	push	r10
    2748:	bf 92       	push	r11
    274a:	cf 92       	push	r12
    274c:	df 92       	push	r13
    274e:	ef 92       	push	r14
    2750:	ff 92       	push	r15
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <glcd_draw_rect_thick+0x26>
    275c:	0f 92       	push	r0
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	b8 2e       	mov	r11, r24
    2764:	a6 2e       	mov	r10, r22
    2766:	44 2e       	mov	r4, r20
    2768:	29 83       	std	Y+1, r18	; 0x01
    276a:	90 2e       	mov	r9, r16
    276c:	8e 2d       	mov	r24, r14
    276e:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    2770:	00 23       	and	r16, r16
    2772:	11 f4       	brne	.+4      	; 0x2778 <glcd_draw_rect_thick+0x42>
    2774:	99 24       	eor	r9, r9
    2776:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    2778:	88 23       	and	r24, r24
    277a:	09 f4       	brne	.+2      	; 0x277e <glcd_draw_rect_thick+0x48>
    277c:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    277e:	00 e0       	ldi	r16, 0x00	; 0
    2780:	10 e0       	ldi	r17, 0x00	; 0
    2782:	cb 2c       	mov	r12, r11
    2784:	dd 24       	eor	r13, r13
    2786:	16 01       	movw	r2, r12
    2788:	24 0c       	add	r2, r4
    278a:	31 1c       	adc	r3, r1
    278c:	89 80       	ldd	r8, Y+1	; 0x01
    278e:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    2790:	68 2e       	mov	r6, r24
    2792:	77 24       	eor	r7, r7
    2794:	18 c0       	rjmp	.+48     	; 0x27c6 <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    2796:	6a 81       	ldd	r22, Y+2	; 0x02
    2798:	6a 0d       	add	r22, r10
    279a:	8e 2d       	mov	r24, r14
    279c:	45 2d       	mov	r20, r5
    279e:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    27a2:	8e 2d       	mov	r24, r14
    27a4:	6f 2d       	mov	r22, r15
    27a6:	45 2d       	mov	r20, r5
    27a8:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	9b 83       	std	Y+3, r25	; 0x03
    27b4:	8a 83       	std	Y+2, r24	; 0x02
    27b6:	fa 94       	dec	r15
    27b8:	ea 81       	ldd	r30, Y+2	; 0x02
    27ba:	fb 81       	ldd	r31, Y+3	; 0x03
    27bc:	e6 15       	cp	r30, r6
    27be:	f7 05       	cpc	r31, r7
    27c0:	54 f3       	brlt	.-44     	; 0x2796 <glcd_draw_rect_thick+0x60>
    27c2:	0f 5f       	subi	r16, 0xFF	; 255
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    27c6:	c8 01       	movw	r24, r16
    27c8:	8c 0d       	add	r24, r12
    27ca:	9d 1d       	adc	r25, r13
    27cc:	82 15       	cp	r24, r2
    27ce:	93 05       	cpc	r25, r3
    27d0:	34 f4       	brge	.+12     	; 0x27de <glcd_draw_rect_thick+0xa8>
    27d2:	f8 2c       	mov	r15, r8
    27d4:	1b 82       	std	Y+3, r1	; 0x03
    27d6:	1a 82       	std	Y+2, r1	; 0x02
    27d8:	eb 2c       	mov	r14, r11
    27da:	e0 0e       	add	r14, r16
    27dc:	ec cf       	rjmp	.-40     	; 0x27b6 <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    27de:	00 e0       	ldi	r16, 0x00	; 0
    27e0:	10 e0       	ldi	r17, 0x00	; 0
    27e2:	ca 2c       	mov	r12, r10
    27e4:	dd 24       	eor	r13, r13
    27e6:	36 01       	movw	r6, r12
    27e8:	f9 81       	ldd	r31, Y+1	; 0x01
    27ea:	6f 0e       	add	r6, r31
    27ec:	71 1c       	adc	r7, r1
    27ee:	34 2c       	mov	r3, r4
    27f0:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    27f2:	89 2c       	mov	r8, r9
    27f4:	99 24       	eor	r9, r9
    27f6:	18 c0       	rjmp	.+48     	; 0x2828 <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	8b 0d       	add	r24, r11
    27fc:	6f 2d       	mov	r22, r15
    27fe:	45 2d       	mov	r20, r5
    2800:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    2804:	8e 2d       	mov	r24, r14
    2806:	6f 2d       	mov	r22, r15
    2808:	45 2d       	mov	r20, r5
    280a:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	9b 83       	std	Y+3, r25	; 0x03
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	ea 94       	dec	r14
    281a:	ea 81       	ldd	r30, Y+2	; 0x02
    281c:	fb 81       	ldd	r31, Y+3	; 0x03
    281e:	e8 15       	cp	r30, r8
    2820:	f9 05       	cpc	r31, r9
    2822:	54 f3       	brlt	.-44     	; 0x27f8 <glcd_draw_rect_thick+0xc2>
    2824:	0f 5f       	subi	r16, 0xFF	; 255
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    2828:	c8 01       	movw	r24, r16
    282a:	8c 0d       	add	r24, r12
    282c:	9d 1d       	adc	r25, r13
    282e:	86 15       	cp	r24, r6
    2830:	97 05       	cpc	r25, r7
    2832:	34 f4       	brge	.+12     	; 0x2840 <glcd_draw_rect_thick+0x10a>
    2834:	e3 2c       	mov	r14, r3
    2836:	1b 82       	std	Y+3, r1	; 0x03
    2838:	1a 82       	std	Y+2, r1	; 0x02
    283a:	fa 2c       	mov	r15, r10
    283c:	f0 0e       	add	r15, r16
    283e:	ec cf       	rjmp	.-40     	; 0x2818 <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    2840:	4b 2d       	mov	r20, r11
    2842:	41 50       	subi	r20, 0x01	; 1
    2844:	44 0d       	add	r20, r4
    2846:	2a 2d       	mov	r18, r10
    2848:	21 50       	subi	r18, 0x01	; 1
    284a:	f9 81       	ldd	r31, Y+1	; 0x01
    284c:	2f 0f       	add	r18, r31
    284e:	8b 2d       	mov	r24, r11
    2850:	6a 2d       	mov	r22, r10
    2852:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	8f 90       	pop	r8
    2874:	7f 90       	pop	r7
    2876:	6f 90       	pop	r6
    2878:	5f 90       	pop	r5
    287a:	4f 90       	pop	r4
    287c:	3f 90       	pop	r3
    287e:	2f 90       	pop	r2
    2880:	08 95       	ret

00002882 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2882:	6f 92       	push	r6
    2884:	7f 92       	push	r7
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	e8 2e       	mov	r14, r24
    28a0:	f6 2e       	mov	r15, r22
    28a2:	a4 2e       	mov	r10, r20
    28a4:	72 2e       	mov	r7, r18
    28a6:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    28a8:	c0 e0       	ldi	r28, 0x00	; 0
    28aa:	d0 e0       	ldi	r29, 0x00	; 0
    28ac:	c8 2e       	mov	r12, r24
    28ae:	dd 24       	eor	r13, r13
    28b0:	46 01       	movw	r8, r12
    28b2:	84 0e       	add	r8, r20
    28b4:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    28b6:	fa 94       	dec	r15
    28b8:	0f 2d       	mov	r16, r15
    28ba:	02 0f       	add	r16, r18
    28bc:	f3 94       	inc	r15
    28be:	0d c0       	rjmp	.+26     	; 0x28da <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    28c0:	1e 2d       	mov	r17, r14
    28c2:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    28c4:	81 2f       	mov	r24, r17
    28c6:	6f 2d       	mov	r22, r15
    28c8:	4b 2d       	mov	r20, r11
    28ca:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    28ce:	81 2f       	mov	r24, r17
    28d0:	60 2f       	mov	r22, r16
    28d2:	4b 2d       	mov	r20, r11
    28d4:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    28d8:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    28da:	ce 01       	movw	r24, r28
    28dc:	8c 0d       	add	r24, r12
    28de:	9d 1d       	adc	r25, r13
    28e0:	88 15       	cp	r24, r8
    28e2:	99 05       	cpc	r25, r9
    28e4:	6c f3       	brlt	.-38     	; 0x28c0 <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    28e6:	c0 e0       	ldi	r28, 0x00	; 0
    28e8:	d0 e0       	ldi	r29, 0x00	; 0
    28ea:	cf 2c       	mov	r12, r15
    28ec:	dd 24       	eor	r13, r13
    28ee:	46 01       	movw	r8, r12
    28f0:	87 0c       	add	r8, r7
    28f2:	91 1c       	adc	r9, r1
    28f4:	0e 2d       	mov	r16, r14
    28f6:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    28f8:	60 2e       	mov	r6, r16
    28fa:	6a 0c       	add	r6, r10
    28fc:	0d c0       	rjmp	.+26     	; 0x2918 <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    28fe:	1f 2d       	mov	r17, r15
    2900:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    2902:	8e 2d       	mov	r24, r14
    2904:	61 2f       	mov	r22, r17
    2906:	4b 2d       	mov	r20, r11
    2908:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    290c:	86 2d       	mov	r24, r6
    290e:	61 2f       	mov	r22, r17
    2910:	4b 2d       	mov	r20, r11
    2912:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    2916:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    2918:	ce 01       	movw	r24, r28
    291a:	8c 0d       	add	r24, r12
    291c:	9d 1d       	adc	r25, r13
    291e:	88 15       	cp	r24, r8
    2920:	99 05       	cpc	r25, r9
    2922:	6c f3       	brlt	.-38     	; 0x28fe <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    2924:	0a 0d       	add	r16, r10
    2926:	2f 2d       	mov	r18, r15
    2928:	21 50       	subi	r18, 0x01	; 1
    292a:	27 0d       	add	r18, r7
    292c:	8e 2d       	mov	r24, r14
    292e:	6f 2d       	mov	r22, r15
    2930:	40 2f       	mov	r20, r16
    2932:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
}
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	7f 90       	pop	r7
    2950:	6f 90       	pop	r6
    2952:	08 95       	ret

00002954 <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2954:	2f 92       	push	r2
    2956:	3f 92       	push	r3
    2958:	4f 92       	push	r4
    295a:	5f 92       	push	r5
    295c:	6f 92       	push	r6
    295e:	7f 92       	push	r7
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	af 92       	push	r10
    2966:	bf 92       	push	r11
    2968:	cf 92       	push	r12
    296a:	df 92       	push	r13
    296c:	ef 92       	push	r14
    296e:	ff 92       	push	r15
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	d8 2e       	mov	r13, r24
    297a:	c6 2e       	mov	r12, r22
    297c:	44 2e       	mov	r4, r20
    297e:	32 2e       	mov	r3, r18
    2980:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    2982:	00 e0       	ldi	r16, 0x00	; 0
    2984:	10 e0       	ldi	r17, 0x00	; 0
    2986:	a8 2e       	mov	r10, r24
    2988:	bb 24       	eor	r11, r11
    298a:	35 01       	movw	r6, r10
    298c:	64 0e       	add	r6, r20
    298e:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    2990:	e6 2e       	mov	r14, r22
    2992:	ff 24       	eor	r15, r15
    2994:	47 01       	movw	r8, r14
    2996:	82 0e       	add	r8, r18
    2998:	91 1c       	adc	r9, r1
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <glcd_fill_rect+0x70>
    299c:	c0 e0       	ldi	r28, 0x00	; 0
    299e:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    29a0:	5d 2c       	mov	r5, r13
    29a2:	50 0e       	add	r5, r16
    29a4:	07 c0       	rjmp	.+14     	; 0x29b4 <glcd_fill_rect+0x60>
    29a6:	6c 2d       	mov	r22, r12
    29a8:	6c 0f       	add	r22, r28
    29aa:	85 2d       	mov	r24, r5
    29ac:	42 2d       	mov	r20, r2
    29ae:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
    29b2:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    29b4:	ce 01       	movw	r24, r28
    29b6:	8e 0d       	add	r24, r14
    29b8:	9f 1d       	adc	r25, r15
    29ba:	88 15       	cp	r24, r8
    29bc:	99 05       	cpc	r25, r9
    29be:	9c f3       	brlt	.-26     	; 0x29a6 <glcd_fill_rect+0x52>
    29c0:	0f 5f       	subi	r16, 0xFF	; 255
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    29c4:	c8 01       	movw	r24, r16
    29c6:	8a 0d       	add	r24, r10
    29c8:	9b 1d       	adc	r25, r11
    29ca:	86 15       	cp	r24, r6
    29cc:	97 05       	cpc	r25, r7
    29ce:	34 f3       	brlt	.-52     	; 0x299c <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    29d0:	4d 2d       	mov	r20, r13
    29d2:	41 50       	subi	r20, 0x01	; 1
    29d4:	44 0d       	add	r20, r4
    29d6:	2c 2d       	mov	r18, r12
    29d8:	21 50       	subi	r18, 0x01	; 1
    29da:	23 0d       	add	r18, r3
    29dc:	8d 2d       	mov	r24, r13
    29de:	6c 2d       	mov	r22, r12
    29e0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
}
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	bf 90       	pop	r11
    29f6:	af 90       	pop	r10
    29f8:	9f 90       	pop	r9
    29fa:	8f 90       	pop	r8
    29fc:	7f 90       	pop	r7
    29fe:	6f 90       	pop	r6
    2a00:	5f 90       	pop	r5
    2a02:	4f 90       	pop	r4
    2a04:	3f 90       	pop	r3
    2a06:	2f 90       	pop	r2
    2a08:	08 95       	ret

00002a0a <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	bf 92       	push	r11
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	f8 2e       	mov	r15, r24
    2a1e:	e6 2e       	mov	r14, r22
    2a20:	d4 2e       	mov	r13, r20
    2a22:	12 2f       	mov	r17, r18
    2a24:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    2a26:	aa 24       	eor	r10, r10
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	26 1b       	sub	r18, r22
    2a2c:	31 09       	sbc	r19, r1
    2a2e:	37 ff       	sbrs	r19, 7
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <glcd_draw_line+0x2e>
    2a32:	30 95       	com	r19
    2a34:	21 95       	neg	r18
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	8d 2d       	mov	r24, r13
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	8f 19       	sub	r24, r15
    2a3e:	91 09       	sbc	r25, r1
    2a40:	97 ff       	sbrs	r25, 7
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <glcd_draw_line+0x40>
    2a44:	90 95       	com	r25
    2a46:	81 95       	neg	r24
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	82 17       	cp	r24, r18
    2a4c:	93 07       	cpc	r25, r19
    2a4e:	44 f4       	brge	.+16     	; 0x2a60 <glcd_draw_line+0x56>
    2a50:	aa 24       	eor	r10, r10
    2a52:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    2a54:	8e 2d       	mov	r24, r14
    2a56:	ef 2c       	mov	r14, r15
    2a58:	f8 2e       	mov	r15, r24
    2a5a:	81 2f       	mov	r24, r17
    2a5c:	1d 2d       	mov	r17, r13
    2a5e:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    2a60:	df 14       	cp	r13, r15
    2a62:	30 f4       	brcc	.+12     	; 0x2a70 <glcd_draw_line+0x66>
    2a64:	8d 2d       	mov	r24, r13
    2a66:	df 2c       	mov	r13, r15
    2a68:	f8 2e       	mov	r15, r24
    2a6a:	81 2f       	mov	r24, r17
    2a6c:	1e 2d       	mov	r17, r14
    2a6e:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    2a70:	8f 2d       	mov	r24, r15
    2a72:	6e 2d       	mov	r22, r14
    2a74:	4d 2d       	mov	r20, r13
    2a76:	21 2f       	mov	r18, r17
    2a78:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>

	dx = x1 - x0;
    2a7c:	cd 2c       	mov	r12, r13
    2a7e:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    2a80:	81 2f       	mov	r24, r17
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	8e 19       	sub	r24, r14
    2a86:	91 09       	sbc	r25, r1
    2a88:	97 ff       	sbrs	r25, 7
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <glcd_draw_line+0x88>
    2a8c:	90 95       	com	r25
    2a8e:	81 95       	neg	r24
    2a90:	9f 4f       	sbci	r25, 0xFF	; 255
    2a92:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    2a94:	e1 16       	cp	r14, r17
    2a96:	10 f0       	brcs	.+4      	; 0x2a9c <glcd_draw_line+0x92>
    2a98:	0f ef       	ldi	r16, 0xFF	; 255
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <glcd_draw_line+0x94>
    2a9c:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    2a9e:	1c 2d       	mov	r17, r12
    2aa0:	16 95       	lsr	r17
    2aa2:	10 c0       	rjmp	.+32     	; 0x2ac4 <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    2aa4:	aa 20       	and	r10, r10
    2aa6:	19 f0       	breq	.+6      	; 0x2aae <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    2aa8:	8e 2d       	mov	r24, r14
    2aaa:	6f 2d       	mov	r22, r15
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    2aae:	8f 2d       	mov	r24, r15
    2ab0:	6e 2d       	mov	r22, r14
    2ab2:	49 2d       	mov	r20, r9
    2ab4:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
		}
		err -= dy;
    2ab8:	1b 19       	sub	r17, r11
		if (err < 0) {
    2aba:	17 ff       	sbrs	r17, 7
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <glcd_draw_line+0xb8>
			y0 += ystep;
    2abe:	e0 0e       	add	r14, r16
			err += dx;
    2ac0:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    2ac2:	f3 94       	inc	r15
    2ac4:	df 14       	cp	r13, r15
    2ac6:	70 f7       	brcc	.-36     	; 0x2aa4 <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	bf 90       	pop	r11
    2ad6:	af 90       	pop	r10
    2ad8:	9f 90       	pop	r9
    2ada:	08 95       	ret

00002adc <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2adc:	cf 92       	push	r12
    2ade:	df 92       	push	r13
    2ae0:	ef 92       	push	r14
    2ae2:	ff 92       	push	r15
    2ae4:	0f 93       	push	r16
    2ae6:	1f 93       	push	r17
    2ae8:	e8 2e       	mov	r14, r24
    2aea:	d6 2e       	mov	r13, r22
    2aec:	14 2f       	mov	r17, r20
    2aee:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    2af0:	0e 94 41 14 	call	0x2882	; 0x2882 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    2af4:	1e 0d       	add	r17, r14
    2af6:	fd 0c       	add	r15, r13
    2af8:	8e 2d       	mov	r24, r14
    2afa:	8f 5f       	subi	r24, 0xFF	; 255
    2afc:	6f 2d       	mov	r22, r15
    2afe:	41 2f       	mov	r20, r17
    2b00:	2f 2d       	mov	r18, r15
    2b02:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    2b06:	d3 94       	inc	r13
    2b08:	81 2f       	mov	r24, r17
    2b0a:	6d 2d       	mov	r22, r13
    2b0c:	41 2f       	mov	r20, r17
    2b0e:	2f 2d       	mov	r18, r15
    2b10:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <glcd_draw_line>
}
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	df 90       	pop	r13
    2b1e:	cf 90       	pop	r12
    2b20:	08 95       	ret

00002b22 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    2b22:	88 e4       	ldi	r24, 0x48	; 72
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 b0 11 	call	0x2360	; 0x2360 <glcd_draw_bitmap>
	glcd_write();	
    2b2a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
	while (1) {
		DEMO_RETURN();
    2b2e:	80 91 0a 02 	lds	r24, 0x020A
    2b32:	88 23       	and	r24, r24
    2b34:	e1 f3       	breq	.-8      	; 0x2b2e <glcd_test_bitmap_128x64+0xc>
    2b36:	10 92 0a 02 	sts	0x020A, r1
	}
}
    2b3a:	08 95       	ret

00002b3c <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
	glcd_clear();
    2b44:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
	glcd_write();
    2b48:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2b4c:	40 c0       	rjmp	.+128    	; 0x2bce <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	42 e3       	ldi	r20, 0x32	; 50
    2b54:	22 e3       	ldi	r18, 0x32	; 50
    2b56:	0c 2f       	mov	r16, r28
    2b58:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2b5c:	8c e3       	ldi	r24, 0x3C	; 60
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	42 e3       	ldi	r20, 0x32	; 50
    2b62:	2e e1       	ldi	r18, 0x1E	; 30
    2b64:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    2b68:	8c e3       	ldi	r24, 0x3C	; 60
    2b6a:	63 e2       	ldi	r22, 0x23	; 35
    2b6c:	4c e3       	ldi	r20, 0x3C	; 60
    2b6e:	24 e1       	ldi	r18, 0x14	; 20
    2b70:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2b74:	80 91 0a 02 	lds	r24, 0x020A
    2b78:	88 23       	and	r24, r24
    2b7a:	f9 f4       	brne	.+62     	; 0x2bba <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    2b7c:	64 96       	adiw	r28, 0x14	; 20
    2b7e:	cf 3f       	cpi	r28, 0xFF	; 255
    2b80:	d1 05       	cpc	r29, r1
    2b82:	29 f3       	breq	.-54     	; 0x2b4e <glcd_test_scrolling_graph+0x12>
    2b84:	20 f3       	brcs	.-56     	; 0x2b4e <glcd_test_scrolling_graph+0x12>
    2b86:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    2b88:	01 2f       	mov	r16, r17
    2b8a:	00 95       	com	r16
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	42 e3       	ldi	r20, 0x32	; 50
    2b92:	22 e3       	ldi	r18, 0x32	; 50
    2b94:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2b98:	8c e3       	ldi	r24, 0x3C	; 60
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	42 e3       	ldi	r20, 0x32	; 50
    2b9e:	2e e1       	ldi	r18, 0x1E	; 30
    2ba0:	01 2f       	mov	r16, r17
    2ba2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    2ba6:	8c e3       	ldi	r24, 0x3C	; 60
    2ba8:	63 e2       	ldi	r22, 0x23	; 35
    2baa:	4c e3       	ldi	r20, 0x3C	; 60
    2bac:	24 e1       	ldi	r18, 0x14	; 20
    2bae:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2bb2:	80 91 0a 02 	lds	r24, 0x020A
    2bb6:	88 23       	and	r24, r24
    2bb8:	39 f0       	breq	.+14     	; 0x2bc8 <glcd_test_scrolling_graph+0x8c>
    2bba:	10 92 0a 02 	sts	0x020A, r1
		}
	}	
}
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    2bc8:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    2bca:	14 30       	cpi	r17, 0x04	; 4
    2bcc:	e9 f6       	brne	.-70     	; 0x2b88 <glcd_test_scrolling_graph+0x4c>
    2bce:	c0 e0       	ldi	r28, 0x00	; 0
    2bd0:	d0 e0       	ldi	r29, 0x00	; 0
    2bd2:	d5 cf       	rjmp	.-86     	; 0x2b7e <glcd_test_scrolling_graph+0x42>

00002bd4 <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    2bd4:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2bd6:	80 eb       	ldi	r24, 0xB0	; 176
    2bd8:	97 e0       	ldi	r25, 0x07	; 7
    2bda:	65 e0       	ldi	r22, 0x05	; 5
    2bdc:	47 e0       	ldi	r20, 0x07	; 7
    2bde:	20 e2       	ldi	r18, 0x20	; 32
    2be0:	0f e7       	ldi	r16, 0x7F	; 127
    2be2:	0e 94 ad 18 	call	0x315a	; 0x315a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2be6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	44 ea       	ldi	r20, 0xA4	; 164
    2bf0:	51 e0       	ldi	r21, 0x01	; 1
    2bf2:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
	glcd_write();
    2bf6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
	while(1) {
		DEMO_RETURN();
    2bfa:	80 91 0a 02 	lds	r24, 0x020A
    2bfe:	88 23       	and	r24, r24
    2c00:	e1 f3       	breq	.-8      	; 0x2bfa <glcd_test_hello_world+0x26>
    2c02:	10 92 0a 02 	sts	0x020A, r1
	}
}
    2c06:	0f 91       	pop	r16
    2c08:	08 95       	ret

00002c0a <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2c0a:	cf 92       	push	r12
    2c0c:	ef 92       	push	r14
    2c0e:	0f 93       	push	r16
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2c14:	80 eb       	ldi	r24, 0xB0	; 176
    2c16:	97 e0       	ldi	r25, 0x07	; 7
    2c18:	65 e0       	ldi	r22, 0x05	; 5
    2c1a:	47 e0       	ldi	r20, 0x07	; 7
    2c1c:	20 e2       	ldi	r18, 0x20	; 32
    2c1e:	0f e7       	ldi	r16, 0x7F	; 127
    2c20:	0e 94 ad 18 	call	0x315a	; 0x315a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2c24:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	41 eb       	ldi	r20, 0xB1	; 177
    2c2e:	51 e0       	ldi	r21, 0x01	; 1
    2c30:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
	glcd_write();
    2c34:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2c38:	80 ed       	ldi	r24, 0xD0	; 208
    2c3a:	97 e0       	ldi	r25, 0x07	; 7
    2c3c:	20 e9       	ldi	r18, 0x90	; 144
    2c3e:	31 e0       	ldi	r19, 0x01	; 1
    2c40:	f9 01       	movw	r30, r18
    2c42:	31 97       	sbiw	r30, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c48:	d9 f7       	brne	.-10     	; 0x2c40 <glcd_test_rectangles+0x36>
    2c4a:	c0 e9       	ldi	r28, 0x90	; 144
    2c4c:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    2c4e:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	44 e6       	ldi	r20, 0x64	; 100
    2c58:	22 e3       	ldi	r18, 0x32	; 50
    2c5a:	01 e0       	ldi	r16, 0x01	; 1
    2c5c:	0e 94 41 14 	call	0x2882	; 0x2882 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	69 e0       	ldi	r22, 0x09	; 9
    2c64:	40 ec       	ldi	r20, 0xC0	; 192
    2c66:	51 e0       	ldi	r21, 0x01	; 1
    2c68:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
		glcd_write();
    2c6c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2c70:	88 e8       	ldi	r24, 0x88	; 136
    2c72:	93 e1       	ldi	r25, 0x13	; 19
    2c74:	fe 01       	movw	r30, r28
    2c76:	31 97       	sbiw	r30, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7c:	d9 f7       	brne	.-10     	; 0x2c74 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2c7e:	80 91 0a 02 	lds	r24, 0x020A
    2c82:	88 23       	and	r24, r24
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <glcd_test_rectangles+0x7e>
    2c86:	85 c0       	rjmp	.+266    	; 0x2d92 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    2c88:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	69 e0       	ldi	r22, 0x09	; 9
    2c90:	4f ec       	ldi	r20, 0xCF	; 207
    2c92:	51 e0       	ldi	r21, 0x01	; 1
    2c94:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
		glcd_write();
    2c98:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    2c9c:	85 e0       	ldi	r24, 0x05	; 5
    2c9e:	65 e0       	ldi	r22, 0x05	; 5
    2ca0:	40 e5       	ldi	r20, 0x50	; 80
    2ca2:	2e e1       	ldi	r18, 0x1E	; 30
    2ca4:	03 e0       	ldi	r16, 0x03	; 3
    2ca6:	56 e0       	ldi	r21, 0x06	; 6
    2ca8:	e5 2e       	mov	r14, r21
    2caa:	cc 24       	eor	r12, r12
    2cac:	c3 94       	inc	r12
    2cae:	0e 94 9b 13 	call	0x2736	; 0x2736 <glcd_draw_rect_thick>
		glcd_write();
    2cb2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2cb6:	88 e8       	ldi	r24, 0x88	; 136
    2cb8:	93 e1       	ldi	r25, 0x13	; 19
    2cba:	fe 01       	movw	r30, r28
    2cbc:	31 97       	sbiw	r30, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	d9 f7       	brne	.-10     	; 0x2cba <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    2cc4:	80 91 0a 02 	lds	r24, 0x020A
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f0       	breq	.+2      	; 0x2cce <glcd_test_rectangles+0xc4>
    2ccc:	62 c0       	rjmp	.+196    	; 0x2d92 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	44 e1       	ldi	r20, 0x14	; 20
    2cd4:	24 e1       	ldi	r18, 0x14	; 20
    2cd6:	02 e0       	ldi	r16, 0x02	; 2
    2cd8:	32 e0       	ldi	r19, 0x02	; 2
    2cda:	e3 2e       	mov	r14, r19
    2cdc:	cc 24       	eor	r12, r12
    2cde:	c3 94       	inc	r12
    2ce0:	0e 94 9b 13 	call	0x2736	; 0x2736 <glcd_draw_rect_thick>
		glcd_write();
    2ce4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2ce8:	88 e8       	ldi	r24, 0x88	; 136
    2cea:	93 e1       	ldi	r25, 0x13	; 19
    2cec:	fe 01       	movw	r30, r28
    2cee:	31 97       	sbiw	r30, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	d9 f7       	brne	.-10     	; 0x2cec <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    2cf6:	80 91 0a 02 	lds	r24, 0x020A
    2cfa:	88 23       	and	r24, r24
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <glcd_test_rectangles+0xf6>
    2cfe:	49 c0       	rjmp	.+146    	; 0x2d92 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2d00:	84 e6       	ldi	r24, 0x64	; 100
    2d02:	6a e0       	ldi	r22, 0x0A	; 10
    2d04:	44 e1       	ldi	r20, 0x14	; 20
    2d06:	24 e1       	ldi	r18, 0x14	; 20
    2d08:	05 e0       	ldi	r16, 0x05	; 5
    2d0a:	95 e0       	ldi	r25, 0x05	; 5
    2d0c:	e9 2e       	mov	r14, r25
    2d0e:	cc 24       	eor	r12, r12
    2d10:	c3 94       	inc	r12
    2d12:	0e 94 9b 13 	call	0x2736	; 0x2736 <glcd_draw_rect_thick>
		glcd_write();
    2d16:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2d1a:	88 e8       	ldi	r24, 0x88	; 136
    2d1c:	93 e1       	ldi	r25, 0x13	; 19
    2d1e:	fe 01       	movw	r30, r28
    2d20:	31 97       	sbiw	r30, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	d9 f7       	brne	.-10     	; 0x2d1e <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    2d28:	80 91 0a 02 	lds	r24, 0x020A
    2d2c:	88 23       	and	r24, r24
    2d2e:	89 f5       	brne	.+98     	; 0x2d92 <glcd_test_rectangles+0x188>

		glcd_clear();
    2d30:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	69 e0       	ldi	r22, 0x09	; 9
    2d38:	44 ee       	ldi	r20, 0xE4	; 228
    2d3a:	51 e0       	ldi	r21, 0x01	; 1
    2d3c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	4d e2       	ldi	r20, 0x2D	; 45
    2d46:	2e e1       	ldi	r18, 0x1E	; 30
    2d48:	01 e0       	ldi	r16, 0x01	; 1
    2d4a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <glcd_draw_rect_shadow>
		glcd_write();
    2d4e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2d52:	88 e8       	ldi	r24, 0x88	; 136
    2d54:	93 e1       	ldi	r25, 0x13	; 19
    2d56:	fe 01       	movw	r30, r28
    2d58:	31 97       	sbiw	r30, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	d9 f7       	brne	.-10     	; 0x2d56 <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    2d60:	80 91 0a 02 	lds	r24, 0x020A
    2d64:	88 23       	and	r24, r24
    2d66:	a9 f4       	brne	.+42     	; 0x2d92 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2d68:	8f e5       	ldi	r24, 0x5F	; 95
    2d6a:	65 e0       	ldi	r22, 0x05	; 5
    2d6c:	4e e1       	ldi	r20, 0x1E	; 30
    2d6e:	2e e1       	ldi	r18, 0x1E	; 30
    2d70:	01 e0       	ldi	r16, 0x01	; 1
    2d72:	0e 94 6e 15 	call	0x2adc	; 0x2adc <glcd_draw_rect_shadow>
		glcd_write();
    2d76:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2d7a:	88 e8       	ldi	r24, 0x88	; 136
    2d7c:	93 e1       	ldi	r25, 0x13	; 19
    2d7e:	fe 01       	movw	r30, r28
    2d80:	31 97       	sbiw	r30, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	d9 f7       	brne	.-10     	; 0x2d7e <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    2d88:	80 91 0a 02 	lds	r24, 0x020A
    2d8c:	88 23       	and	r24, r24
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <glcd_test_rectangles+0x188>
    2d90:	5e cf       	rjmp	.-324    	; 0x2c4e <glcd_test_rectangles+0x44>
    2d92:	10 92 0a 02 	sts	0x020A, r1
		
	}
	
}
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	0f 91       	pop	r16
    2d9c:	ef 90       	pop	r14
    2d9e:	cf 90       	pop	r12
    2da0:	08 95       	ret

00002da2 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	2f 97       	sbiw	r28, 0x0f	; 15
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2dc4:	80 eb       	ldi	r24, 0xB0	; 176
    2dc6:	97 e0       	ldi	r25, 0x07	; 7
    2dc8:	65 e0       	ldi	r22, 0x05	; 5
    2dca:	47 e0       	ldi	r20, 0x07	; 7
    2dcc:	20 e2       	ldi	r18, 0x20	; 32
    2dce:	0f e7       	ldi	r16, 0x7F	; 127
    2dd0:	0e 94 ad 18 	call	0x315a	; 0x315a <glcd_tiny_set_font>
    2dd4:	00 e2       	ldi	r16, 0x20	; 32
    2dd6:	7e 01       	movw	r14, r28
    2dd8:	08 94       	sec
    2dda:	e1 1c       	adc	r14, r1
    2ddc:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2dde:	7f e0       	ldi	r23, 0x0F	; 15
    2de0:	a7 2e       	mov	r10, r23
    2de2:	b1 2c       	mov	r11, r1
    2de4:	ac 0e       	add	r10, r28
    2de6:	bd 1e       	adc	r11, r29
    2de8:	60 e9       	ldi	r22, 0x90	; 144
    2dea:	c6 2e       	mov	r12, r22
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2df0:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2df2:	00 83       	st	Z, r16
			c++;
    2df4:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    2df6:	07 fd       	sbrc	r16, 7
    2df8:	00 e2       	ldi	r16, 0x20	; 32
    2dfa:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2dfc:	ea 15       	cp	r30, r10
    2dfe:	fb 05       	cpc	r31, r11
    2e00:	c1 f7       	brne	.-16     	; 0x2df2 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2e02:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2e04:	c7 01       	movw	r24, r14
    2e06:	0e 94 33 1a 	call	0x3466	; 0x3466 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2e0a:	80 91 0a 02 	lds	r24, 0x020A
    2e0e:	88 23       	and	r24, r24
    2e10:	91 f0       	breq	.+36     	; 0x2e36 <glcd_test_tiny_text+0x94>
    2e12:	10 92 0a 02 	sts	0x020A, r1
		
		delay_ms(1000);
	}

}
    2e16:	2f 96       	adiw	r28, 0x0f	; 15
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	0f 91       	pop	r16
    2e28:	ff 90       	pop	r15
    2e2a:	ef 90       	pop	r14
    2e2c:	df 90       	pop	r13
    2e2e:	cf 90       	pop	r12
    2e30:	bf 90       	pop	r11
    2e32:	af 90       	pop	r10
    2e34:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    2e36:	80 e1       	ldi	r24, 0x10	; 16
    2e38:	97 e2       	ldi	r25, 0x27	; 39
    2e3a:	f6 01       	movw	r30, r12
    2e3c:	31 97       	sbiw	r30, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	d9 f7       	brne	.-10     	; 0x2e3a <glcd_test_tiny_text+0x98>
    2e44:	d5 cf       	rjmp	.-86     	; 0x2df0 <glcd_test_tiny_text+0x4e>

00002e46 <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2e4e:	80 e9       	ldi	r24, 0x90	; 144
    2e50:	99 e0       	ldi	r25, 0x09	; 9
    2e52:	6f e0       	ldi	r22, 0x0F	; 15
    2e54:	45 e1       	ldi	r20, 0x15	; 21
    2e56:	2e e2       	ldi	r18, 0x2E	; 46
    2e58:	09 e3       	ldi	r16, 0x39	; 57
    2e5a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    2e5e:	1e e2       	ldi	r17, 0x2E	; 46
    2e60:	80 91 15 04 	lds	r24, 0x0415
    2e64:	18 1b       	sub	r17, r24
    2e66:	00 e0       	ldi	r16, 0x00	; 0
    2e68:	c0 e9       	ldi	r28, 0x90	; 144
    2e6a:	d1 e0       	ldi	r29, 0x01	; 1
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    2e6e:	80 91 0a 02 	lds	r24, 0x020A
    2e72:	88 23       	and	r24, r24
    2e74:	d1 f4       	brne	.+52     	; 0x2eaa <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    2e76:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	60 2f       	mov	r22, r16
    2e7e:	4a ef       	ldi	r20, 0xFA	; 250
    2e80:	51 e0       	ldi	r21, 0x01	; 1
    2e82:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
			glcd_write();
    2e86:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2e8a:	80 e2       	ldi	r24, 0x20	; 32
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	fe 01       	movw	r30, r28
    2e90:	31 97       	sbiw	r30, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	d9 f7       	brne	.-10     	; 0x2e8e <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    2e98:	0f 5f       	subi	r16, 0xFF	; 255
    2e9a:	01 17       	cp	r16, r17
    2e9c:	40 f3       	brcs	.-48     	; 0x2e6e <glcd_test_text_up_down+0x28>
    2e9e:	01 2f       	mov	r16, r17
    2ea0:	1d c0       	rjmp	.+58     	; 0x2edc <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    2ea2:	80 91 0a 02 	lds	r24, 0x020A
    2ea6:	88 23       	and	r24, r24
    2ea8:	39 f0       	breq	.+14     	; 0x2eb8 <glcd_test_text_up_down+0x72>
    2eaa:	10 92 0a 02 	sts	0x020A, r1
			delay_ms(80);
		}
		
	}

}
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    2eb8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	60 2f       	mov	r22, r16
    2ec0:	4e ef       	ldi	r20, 0xFE	; 254
    2ec2:	51 e0       	ldi	r21, 0x01	; 1
    2ec4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
			glcd_write();
    2ec8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    2ecc:	80 e2       	ldi	r24, 0x20	; 32
    2ece:	93 e0       	ldi	r25, 0x03	; 3
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	31 97       	sbiw	r30, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed8:	d9 f7       	brne	.-10     	; 0x2ed0 <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    2eda:	01 50       	subi	r16, 0x01	; 1
    2edc:	00 23       	and	r16, r16
    2ede:	09 f7       	brne	.-62     	; 0x2ea2 <glcd_test_text_up_down+0x5c>
    2ee0:	dc cf       	rjmp	.-72     	; 0x2e9a <glcd_test_text_up_down+0x54>

00002ee2 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2ee2:	8f 92       	push	r8
    2ee4:	9f 92       	push	r9
    2ee6:	af 92       	push	r10
    2ee8:	bf 92       	push	r11
    2eea:	cf 92       	push	r12
    2eec:	df 92       	push	r13
    2eee:	ef 92       	push	r14
    2ef0:	0f 93       	push	r16
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	28 97       	sbiw	r28, 0x08	; 8
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    2f06:	19 82       	std	Y+1, r1	; 0x01
    2f08:	1a 82       	std	Y+2, r1	; 0x02
    2f0a:	1b 82       	std	Y+3, r1	; 0x03
    2f0c:	1c 82       	std	Y+4, r1	; 0x04
    2f0e:	1d 82       	std	Y+5, r1	; 0x05
    2f10:	1e 82       	std	Y+6, r1	; 0x06
    2f12:	1f 82       	std	Y+7, r1	; 0x07
    2f14:	18 86       	std	Y+8, r1	; 0x08
    2f16:	cc 24       	eor	r12, r12
    2f18:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2f1a:	5e 01       	movw	r10, r28
    2f1c:	08 94       	sec
    2f1e:	a1 1c       	adc	r10, r1
    2f20:	b1 1c       	adc	r11, r1
    2f22:	f2 e0       	ldi	r31, 0x02	; 2
    2f24:	8f 2e       	mov	r8, r31
    2f26:	f2 e0       	ldi	r31, 0x02	; 2
    2f28:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2f2a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    2f2e:	88 e4       	ldi	r24, 0x48	; 72
    2f30:	96 e0       	ldi	r25, 0x06	; 6
    2f32:	6c e0       	ldi	r22, 0x0C	; 12
    2f34:	43 e1       	ldi	r20, 0x13	; 19
    2f36:	20 e3       	ldi	r18, 0x30	; 48
    2f38:	09 e3       	ldi	r16, 0x39	; 57
    2f3a:	e2 e0       	ldi	r30, 0x02	; 2
    2f3c:	ee 2e       	mov	r14, r30
    2f3e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <glcd_font>

		sprintf(string,"%d",count);
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <glcd_test_glcdutils+0x62>
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <glcd_test_glcdutils+0x64>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <glcd_test_glcdutils+0x66>
    2f48:	ed b7       	in	r30, 0x3d	; 61
    2f4a:	fe b7       	in	r31, 0x3e	; 62
    2f4c:	31 96       	adiw	r30, 0x01	; 1
    2f4e:	ad b7       	in	r26, 0x3d	; 61
    2f50:	be b7       	in	r27, 0x3e	; 62
    2f52:	12 96       	adiw	r26, 0x02	; 2
    2f54:	bc 92       	st	X, r11
    2f56:	ae 92       	st	-X, r10
    2f58:	11 97       	sbiw	r26, 0x01	; 1
    2f5a:	93 82       	std	Z+3, r9	; 0x03
    2f5c:	82 82       	std	Z+2, r8	; 0x02
    2f5e:	d5 82       	std	Z+5, r13	; 0x05
    2f60:	c4 82       	std	Z+4, r12	; 0x04
    2f62:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
		glcd_draw_string_xy(0,0,string);
    2f66:	8d b7       	in	r24, 0x3d	; 61
    2f68:	9e b7       	in	r25, 0x3e	; 62
    2f6a:	06 96       	adiw	r24, 0x06	; 6
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	9e bf       	out	0x3e, r25	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	8d bf       	out	0x3d, r24	; 61
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	a5 01       	movw	r20, r10
    2f7c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
		glcd_write();
    2f80:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		
		count += 1;
    2f84:	08 94       	sec
    2f86:	c1 1c       	adc	r12, r1
    2f88:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    2f8a:	80 91 0a 02 	lds	r24, 0x020A
    2f8e:	88 23       	and	r24, r24
    2f90:	61 f2       	breq	.-104    	; 0x2f2a <glcd_test_glcdutils+0x48>
    2f92:	10 92 0a 02 	sts	0x020A, r1
	}
}
    2f96:	28 96       	adiw	r28, 0x08	; 8
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	0f 91       	pop	r16
    2fa8:	ef 90       	pop	r14
    2faa:	df 90       	pop	r13
    2fac:	cf 90       	pop	r12
    2fae:	bf 90       	pop	r11
    2fb0:	af 90       	pop	r10
    2fb2:	9f 90       	pop	r9
    2fb4:	8f 90       	pop	r8
    2fb6:	08 95       	ret

00002fb8 <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    2fb8:	8f 92       	push	r8
    2fba:	9f 92       	push	r9
    2fbc:	af 92       	push	r10
    2fbe:	bf 92       	push	r11
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	28 97       	sbiw	r28, 0x08	; 8
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    2fde:	19 82       	std	Y+1, r1	; 0x01
    2fe0:	1a 82       	std	Y+2, r1	; 0x02
    2fe2:	1b 82       	std	Y+3, r1	; 0x03
    2fe4:	1c 82       	std	Y+4, r1	; 0x04
    2fe6:	1d 82       	std	Y+5, r1	; 0x05
    2fe8:	1e 82       	std	Y+6, r1	; 0x06
    2fea:	1f 82       	std	Y+7, r1	; 0x07
    2fec:	18 86       	std	Y+8, r1	; 0x08
    2fee:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2ff0:	5e 01       	movw	r10, r28
    2ff2:	08 94       	sec
    2ff4:	a1 1c       	adc	r10, r1
    2ff6:	b1 1c       	adc	r11, r1
    2ff8:	12 e0       	ldi	r17, 0x02	; 2
    2ffa:	81 2e       	mov	r8, r17
    2ffc:	12 e0       	ldi	r17, 0x02	; 2
    2ffe:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    3000:	0e 94 ba 0c 	call	0x1974	; 0x1974 <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    3004:	80 e9       	ldi	r24, 0x90	; 144
    3006:	99 e0       	ldi	r25, 0x09	; 9
    3008:	6f e0       	ldi	r22, 0x0F	; 15
    300a:	45 e1       	ldi	r20, 0x15	; 21
    300c:	2e e2       	ldi	r18, 0x2E	; 46
    300e:	09 e3       	ldi	r16, 0x39	; 57
    3010:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    3014:	ed 2c       	mov	r14, r13
    3016:	ff 24       	eor	r15, r15
    3018:	00 d0       	rcall	.+0      	; 0x301a <glcd_test_counter_and_graph+0x62>
    301a:	00 d0       	rcall	.+0      	; 0x301c <glcd_test_counter_and_graph+0x64>
    301c:	00 d0       	rcall	.+0      	; 0x301e <glcd_test_counter_and_graph+0x66>
    301e:	ed b7       	in	r30, 0x3d	; 61
    3020:	fe b7       	in	r31, 0x3e	; 62
    3022:	31 96       	adiw	r30, 0x01	; 1
    3024:	ad b7       	in	r26, 0x3d	; 61
    3026:	be b7       	in	r27, 0x3e	; 62
    3028:	12 96       	adiw	r26, 0x02	; 2
    302a:	bc 92       	st	X, r11
    302c:	ae 92       	st	-X, r10
    302e:	11 97       	sbiw	r26, 0x01	; 1
    3030:	93 82       	std	Z+3, r9	; 0x03
    3032:	82 82       	std	Z+2, r8	; 0x02
    3034:	f5 82       	std	Z+5, r15	; 0x05
    3036:	e4 82       	std	Z+4, r14	; 0x04
    3038:	0e 94 c3 1c 	call	0x3986	; 0x3986 <sprintf>
		glcd_draw_string_xy(0,0,string);
    303c:	8d b7       	in	r24, 0x3d	; 61
    303e:	9e b7       	in	r25, 0x3e	; 62
    3040:	06 96       	adiw	r24, 0x06	; 6
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	9e bf       	out	0x3e, r25	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	8d bf       	out	0x3d, r24	; 61
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	a5 01       	movw	r20, r10
    3052:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    3056:	87 01       	movw	r16, r14
    3058:	00 0f       	add	r16, r16
    305a:	11 1f       	adc	r17, r17
    305c:	00 0f       	add	r16, r16
    305e:	11 1f       	adc	r17, r17
    3060:	8a e0       	ldi	r24, 0x0A	; 10
    3062:	66 e2       	ldi	r22, 0x26	; 38
    3064:	4e e1       	ldi	r20, 0x1E	; 30
    3066:	26 e0       	ldi	r18, 0x06	; 6
    3068:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    306c:	ee 0c       	add	r14, r14
    306e:	ff 1c       	adc	r15, r15
    3070:	86 e4       	ldi	r24, 0x46	; 70
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	48 e0       	ldi	r20, 0x08	; 8
    3076:	2e e1       	ldi	r18, 0x1E	; 30
    3078:	0e 2d       	mov	r16, r14
    307a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <glcd_bar_graph_vertical>

		glcd_write();
    307e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
		count += 1;
    3082:	d3 94       	inc	r13

		DEMO_RETURN();
    3084:	80 91 0a 02 	lds	r24, 0x020A
    3088:	88 23       	and	r24, r24
    308a:	09 f4       	brne	.+2      	; 0x308e <glcd_test_counter_and_graph+0xd6>
    308c:	b9 cf       	rjmp	.-142    	; 0x3000 <glcd_test_counter_and_graph+0x48>
    308e:	10 92 0a 02 	sts	0x020A, r1
	}

}
    3092:	28 96       	adiw	r28, 0x08	; 8
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	1f 91       	pop	r17
    30a4:	0f 91       	pop	r16
    30a6:	ff 90       	pop	r15
    30a8:	ef 90       	pop	r14
    30aa:	df 90       	pop	r13
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	08 95       	ret

000030b6 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	0f 93       	push	r16
    30c0:	1f 93       	push	r17
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	00 e4       	ldi	r16, 0x40	; 64
    30c8:	c0 2e       	mov	r12, r16
    30ca:	0f e1       	ldi	r16, 0x1F	; 31
    30cc:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    30ce:	c0 ea       	ldi	r28, 0xA0	; 160
    30d0:	df e0       	ldi	r29, 0x0F	; 15
    30d2:	0e 94 cd 0c 	call	0x199a	; 0x199a <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    30d6:	0e 94 a3 1c 	call	0x3946	; 0x3946 <rand>
    30da:	64 e5       	ldi	r22, 0x54	; 84
    30dc:	70 e0       	ldi	r23, 0x00	; 0
    30de:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    30e2:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    30e4:	0e 94 a3 1c 	call	0x3946	; 0x3946 <rand>
    30e8:	60 e3       	ldi	r22, 0x30	; 48
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    30f0:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    30f2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <rand>
    30f6:	62 e3       	ldi	r22, 0x32	; 50
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    30fe:	08 2f       	mov	r16, r24
    3100:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    3102:	8e 2d       	mov	r24, r14
    3104:	6f 2d       	mov	r22, r15
    3106:	41 2f       	mov	r20, r17
    3108:	21 e0       	ldi	r18, 0x01	; 1
    310a:	0e 94 4d 12 	call	0x249a	; 0x249a <glcd_fill_circle>
			glcd_write();
    310e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    3112:	c6 01       	movw	r24, r12
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    3118:	1f 5f       	subi	r17, 0xFF	; 255
    311a:	01 17       	cp	r16, r17
    311c:	90 f7       	brcc	.-28     	; 0x3102 <glcd_test_circles+0x4c>
    311e:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    3120:	8e 2d       	mov	r24, r14
    3122:	6f 2d       	mov	r22, r15
    3124:	41 2f       	mov	r20, r17
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	0e 94 4d 12 	call	0x249a	; 0x249a <glcd_fill_circle>
			glcd_write();
    312c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
    3130:	ce 01       	movw	r24, r28
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    3136:	1f 5f       	subi	r17, 0xFF	; 255
    3138:	01 17       	cp	r16, r17
    313a:	90 f7       	brcc	.-28     	; 0x3120 <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    313c:	80 91 0a 02 	lds	r24, 0x020A
    3140:	88 23       	and	r24, r24
    3142:	39 f2       	breq	.-114    	; 0x30d2 <glcd_test_circles+0x1c>
    3144:	10 92 0a 02 	sts	0x020A, r1
	}
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	df 90       	pop	r13
    3156:	cf 90       	pop	r12
    3158:	08 95       	ret

0000315a <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    315a:	0f 93       	push	r16
	font_current.font_table = font_table;
    315c:	90 93 13 04 	sts	0x0413, r25
    3160:	80 93 12 04 	sts	0x0412, r24
	font_current.width = width;
    3164:	60 93 14 04 	sts	0x0414, r22
	font_current.height = height;
    3168:	40 93 15 04 	sts	0x0415, r20
	font_current.start_char = start_char;
    316c:	20 93 16 04 	sts	0x0416, r18
	font_current.end_char = end_char;
    3170:	00 93 17 04 	sts	0x0417, r16
	font_current.table_type = STANG;
    3174:	10 92 18 04 	sts	0x0418, r1
}
    3178:	0f 91       	pop	r16
    317a:	08 95       	ret

0000317c <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    317c:	bf 92       	push	r11
    317e:	cf 92       	push	r12
    3180:	df 92       	push	r13
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	f8 2e       	mov	r15, r24
    3190:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    3192:	5f e2       	ldi	r21, 0x2F	; 47
    3194:	56 17       	cp	r21, r22
    3196:	08 f4       	brcc	.+2      	; 0x319a <glcd_tiny_draw_char_xy+0x1e>
    3198:	5d c0       	rjmp	.+186    	; 0x3254 <glcd_tiny_draw_char_xy+0xd8>
    319a:	80 91 14 04 	lds	r24, 0x0414
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	8f 0d       	add	r24, r15
    31a2:	91 1d       	adc	r25, r1
    31a4:	84 35       	cpi	r24, 0x54	; 84
    31a6:	91 05       	cpc	r25, r1
    31a8:	0c f0       	brlt	.+2      	; 0x31ac <glcd_tiny_draw_char_xy+0x30>
    31aa:	54 c0       	rjmp	.+168    	; 0x3254 <glcd_tiny_draw_char_xy+0xd8>
    31ac:	80 91 15 04 	lds	r24, 0x0415
    31b0:	88 30       	cpi	r24, 0x08	; 8
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <glcd_tiny_draw_char_xy+0x3a>
    31b4:	4f c0       	rjmp	.+158    	; 0x3254 <glcd_tiny_draw_char_xy+0xd8>
    31b6:	80 91 18 04 	lds	r24, 0x0418
    31ba:	88 23       	and	r24, r24
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <glcd_tiny_draw_char_xy+0x44>
    31be:	4a c0       	rjmp	.+148    	; 0x3254 <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    31c0:	80 91 16 04 	lds	r24, 0x0416
    31c4:	48 17       	cp	r20, r24
    31c6:	20 f0       	brcs	.+8      	; 0x31d0 <glcd_tiny_draw_char_xy+0x54>
    31c8:	80 91 17 04 	lds	r24, 0x0417
    31cc:	84 17       	cp	r24, r20
    31ce:	08 f4       	brcc	.+2      	; 0x31d2 <glcd_tiny_draw_char_xy+0x56>
    31d0:	4e e2       	ldi	r20, 0x2E	; 46
    31d2:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    31d4:	c4 2e       	mov	r12, r20
    31d6:	dd 24       	eor	r13, r13
    31d8:	2f c0       	rjmp	.+94     	; 0x3238 <glcd_tiny_draw_char_xy+0xbc>
    31da:	80 91 16 04 	lds	r24, 0x0416
    31de:	96 01       	movw	r18, r12
    31e0:	28 1b       	sub	r18, r24
    31e2:	31 09       	sbc	r19, r1
    31e4:	84 2f       	mov	r24, r20
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	ac 01       	movw	r20, r24
    31ea:	24 9f       	mul	r18, r20
    31ec:	c0 01       	movw	r24, r0
    31ee:	25 9f       	mul	r18, r21
    31f0:	90 0d       	add	r25, r0
    31f2:	34 9f       	mul	r19, r20
    31f4:	90 0d       	add	r25, r0
    31f6:	11 24       	eor	r1, r1
    31f8:	80 0f       	add	r24, r16
    31fa:	91 1d       	adc	r25, r1
    31fc:	e0 91 12 04 	lds	r30, 0x0412
    3200:	f0 91 13 04 	lds	r31, 0x0413
    3204:	e8 0f       	add	r30, r24
    3206:	f9 1f       	adc	r31, r25
    3208:	e4 91       	lpm	r30, Z+
    320a:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    320c:	ce 2f       	mov	r28, r30
    320e:	d0 e0       	ldi	r29, 0x00	; 0
    3210:	0e c0       	rjmp	.+28     	; 0x322e <glcd_tiny_draw_char_xy+0xb2>
    3212:	61 2f       	mov	r22, r17
    3214:	6e 0d       	add	r22, r14
    3216:	ae 01       	movw	r20, r28
    3218:	01 2e       	mov	r0, r17
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <glcd_tiny_draw_char_xy+0xa4>
    321c:	55 95       	asr	r21
    321e:	47 95       	ror	r20
    3220:	0a 94       	dec	r0
    3222:	e2 f7       	brpl	.-8      	; 0x321c <glcd_tiny_draw_char_xy+0xa0>
    3224:	41 70       	andi	r20, 0x01	; 1
    3226:	8b 2d       	mov	r24, r11
    3228:	0e 94 0e 12 	call	0x241c	; 0x241c <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    322c:	1f 5f       	subi	r17, 0xFF	; 255
    322e:	80 91 15 04 	lds	r24, 0x0415
    3232:	18 17       	cp	r17, r24
    3234:	70 f3       	brcs	.-36     	; 0x3212 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    3236:	0f 5f       	subi	r16, 0xFF	; 255
    3238:	b0 2e       	mov	r11, r16
    323a:	bf 0c       	add	r11, r15
    323c:	40 91 14 04 	lds	r20, 0x0414
    3240:	04 17       	cp	r16, r20
    3242:	58 f2       	brcs	.-106    	; 0x31da <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    3244:	4f 0d       	add	r20, r15
    3246:	20 91 15 04 	lds	r18, 0x0415
    324a:	2e 0d       	add	r18, r14
    324c:	8f 2d       	mov	r24, r15
    324e:	6e 2d       	mov	r22, r14
    3250:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	
}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	bf 90       	pop	r11
    3266:	08 95       	ret

00003268 <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	08 2f       	mov	r16, r24
    3272:	26 2f       	mov	r18, r22
    3274:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    3276:	60 91 15 04 	lds	r22, 0x0415
    327a:	68 30       	cpi	r22, 0x08	; 8
    327c:	08 f0       	brcs	.+2      	; 0x3280 <glcd_tiny_draw_char+0x18>
    327e:	6a c0       	rjmp	.+212    	; 0x3354 <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    3280:	80 91 16 04 	lds	r24, 0x0416
    3284:	48 17       	cp	r20, r24
    3286:	20 f0       	brcs	.+8      	; 0x3290 <glcd_tiny_draw_char+0x28>
    3288:	80 91 17 04 	lds	r24, 0x0417
    328c:	84 17       	cp	r24, r20
    328e:	08 f4       	brcc	.+2      	; 0x3292 <glcd_tiny_draw_char+0x2a>
    3290:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    3292:	c2 2f       	mov	r28, r18
    3294:	d0 e0       	ldi	r29, 0x00	; 0
    3296:	e6 2f       	mov	r30, r22
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	31 96       	adiw	r30, 0x01	; 1
    329c:	80 e3       	ldi	r24, 0x30	; 48
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	bf 01       	movw	r22, r30
    32a2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    32a6:	c6 17       	cp	r28, r22
    32a8:	d7 07       	cpc	r29, r23
    32aa:	0c f0       	brlt	.+2      	; 0x32ae <glcd_tiny_draw_char+0x46>
    32ac:	53 c0       	rjmp	.+166    	; 0x3354 <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    32ae:	40 91 14 04 	lds	r20, 0x0414
    32b2:	84 2f       	mov	r24, r20
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	80 0f       	add	r24, r16
    32b8:	91 1d       	adc	r25, r1
    32ba:	84 35       	cpi	r24, 0x54	; 84
    32bc:	91 05       	cpc	r25, r1
    32be:	0c f0       	brlt	.+2      	; 0x32c2 <glcd_tiny_draw_char+0x5a>
    32c0:	49 c0       	rjmp	.+146    	; 0x3354 <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    32c2:	ce 9f       	mul	r28, r30
    32c4:	b0 01       	movw	r22, r0
    32c6:	cf 9f       	mul	r28, r31
    32c8:	70 0d       	add	r23, r0
    32ca:	de 9f       	mul	r29, r30
    32cc:	70 0d       	add	r23, r0
    32ce:	11 24       	eor	r1, r1
    32d0:	40 0f       	add	r20, r16
    32d2:	21 96       	adiw	r28, 0x01	; 1
    32d4:	ce 9f       	mul	r28, r30
    32d6:	90 01       	movw	r18, r0
    32d8:	cf 9f       	mul	r28, r31
    32da:	30 0d       	add	r19, r0
    32dc:	de 9f       	mul	r29, r30
    32de:	30 0d       	add	r19, r0
    32e0:	11 24       	eor	r1, r1
    32e2:	21 97       	sbiw	r28, 0x01	; 1
    32e4:	80 2f       	mov	r24, r16
    32e6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    32ea:	84 e5       	ldi	r24, 0x54	; 84
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	c8 9f       	mul	r28, r24
    32f0:	d0 01       	movw	r26, r0
    32f2:	c9 9f       	mul	r28, r25
    32f4:	b0 0d       	add	r27, r0
    32f6:	d8 9f       	mul	r29, r24
    32f8:	b0 0d       	add	r27, r0
    32fa:	11 24       	eor	r1, r1
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	61 2f       	mov	r22, r17
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	22 c0       	rjmp	.+68     	; 0x3348 <glcd_tiny_draw_char+0xe0>
    3304:	80 91 16 04 	lds	r24, 0x0416
    3308:	9b 01       	movw	r18, r22
    330a:	28 1b       	sub	r18, r24
    330c:	31 09       	sbc	r19, r1
    330e:	89 2f       	mov	r24, r25
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	fc 01       	movw	r30, r24
    3314:	2e 9f       	mul	r18, r30
    3316:	c0 01       	movw	r24, r0
    3318:	2f 9f       	mul	r18, r31
    331a:	90 0d       	add	r25, r0
    331c:	3e 9f       	mul	r19, r30
    331e:	90 0d       	add	r25, r0
    3320:	11 24       	eor	r1, r1
    3322:	85 0f       	add	r24, r21
    3324:	91 1d       	adc	r25, r1
    3326:	e0 91 12 04 	lds	r30, 0x0412
    332a:	f0 91 13 04 	lds	r31, 0x0413
    332e:	e8 0f       	add	r30, r24
    3330:	f9 1f       	adc	r31, r25
    3332:	84 91       	lpm	r24, Z+
    3334:	e0 91 0e 04 	lds	r30, 0x040E
    3338:	f0 91 0f 04 	lds	r31, 0x040F
    333c:	ea 0f       	add	r30, r26
    333e:	fb 1f       	adc	r31, r27
    3340:	e4 0f       	add	r30, r20
    3342:	f1 1d       	adc	r31, r1
    3344:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    3346:	5f 5f       	subi	r21, 0xFF	; 255
    3348:	45 2f       	mov	r20, r21
    334a:	40 0f       	add	r20, r16
    334c:	90 91 14 04 	lds	r25, 0x0414
    3350:	59 17       	cp	r21, r25
    3352:	c0 f2       	brcs	.-80     	; 0x3304 <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret

0000335e <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	18 2f       	mov	r17, r24
    3368:	06 2f       	mov	r16, r22
    336a:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    336c:	80 91 15 04 	lds	r24, 0x0415
    3370:	88 30       	cpi	r24, 0x08	; 8
    3372:	20 f5       	brcc	.+72     	; 0x33bc <glcd_tiny_draw_string_P+0x5e>
		return;
    3374:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    3376:	21 96       	adiw	r28, 0x01	; 1
    3378:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    337a:	44 23       	and	r20, r20
    337c:	f9 f0       	breq	.+62     	; 0x33bc <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    337e:	81 2f       	mov	r24, r17
    3380:	60 2f       	mov	r22, r16
    3382:	0e 94 34 19 	call	0x3268	; 0x3268 <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    3386:	80 91 14 04 	lds	r24, 0x0414
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	18 0f       	add	r17, r24
    338e:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	81 0f       	add	r24, r17
    3394:	91 1d       	adc	r25, r1
    3396:	84 35       	cpi	r24, 0x54	; 84
    3398:	91 05       	cpc	r25, r1
    339a:	14 f0       	brlt	.+4      	; 0x33a0 <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    339c:	0f 5f       	subi	r16, 0xFF	; 255
    339e:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    33a0:	20 2f       	mov	r18, r16
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	60 91 15 04 	lds	r22, 0x0415
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	6f 5f       	subi	r22, 0xFF	; 255
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	80 e3       	ldi	r24, 0x30	; 48
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    33b6:	26 17       	cp	r18, r22
    33b8:	37 07       	cpc	r19, r23
    33ba:	e4 f2       	brlt	.-72     	; 0x3374 <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	08 95       	ret

000033c6 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	18 2f       	mov	r17, r24
    33d0:	06 2f       	mov	r16, r22
    33d2:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    33d4:	80 91 15 04 	lds	r24, 0x0415
    33d8:	88 30       	cpi	r24, 0x08	; 8
    33da:	08 f1       	brcs	.+66     	; 0x341e <glcd_tiny_draw_string+0x58>
    33dc:	23 c0       	rjmp	.+70     	; 0x3424 <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    33de:	81 2f       	mov	r24, r17
    33e0:	60 2f       	mov	r22, r16
    33e2:	0e 94 34 19 	call	0x3268	; 0x3268 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    33e6:	80 91 14 04 	lds	r24, 0x0414
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	18 0f       	add	r17, r24
    33ee:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	81 0f       	add	r24, r17
    33f4:	91 1d       	adc	r25, r1
    33f6:	84 35       	cpi	r24, 0x54	; 84
    33f8:	91 05       	cpc	r25, r1
    33fa:	14 f0       	brlt	.+4      	; 0x3400 <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    33fc:	0f 5f       	subi	r16, 0xFF	; 255
    33fe:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    3400:	20 2f       	mov	r18, r16
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	60 91 15 04 	lds	r22, 0x0415
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	6f 5f       	subi	r22, 0xFF	; 255
    340c:	7f 4f       	sbci	r23, 0xFF	; 255
    340e:	80 e3       	ldi	r24, 0x30	; 48
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    3416:	26 17       	cp	r18, r22
    3418:	37 07       	cpc	r19, r23
    341a:	24 f4       	brge	.+8      	; 0x3424 <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    341c:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    341e:	48 81       	ld	r20, Y
    3420:	44 23       	and	r20, r20
    3422:	e9 f6       	brne	.-70     	; 0x33de <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	08 95       	ret

0000342e <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    342e:	68 2f       	mov	r22, r24
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	83 e0       	ldi	r24, 0x03	; 3
    3434:	66 0f       	add	r22, r22
    3436:	77 1f       	adc	r23, r23
    3438:	8a 95       	dec	r24
    343a:	e1 f7       	brne	.-8      	; 0x3434 <glcd_tiny_invert_line+0x6>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	43 e5       	ldi	r20, 0x53	; 83
    3440:	28 e0       	ldi	r18, 0x08	; 8
    3442:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <glcd_invert_area>
}
    3446:	08 95       	ret

00003448 <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    344e:	0e 94 89 0c 	call	0x1912	; 0x1912 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	65 e0       	ldi	r22, 0x05	; 5
    3456:	a8 01       	movw	r20, r16
    3458:	0e 94 af 19 	call	0x335e	; 0x335e <glcd_tiny_draw_string_P>
	glcd_write();
    345c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
}
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	08 95       	ret

00003466 <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    346c:	0e 94 89 0c 	call	0x1912	; 0x1912 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	65 e0       	ldi	r22, 0x05	; 5
    3474:	a8 01       	movw	r20, r16
    3476:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <glcd_tiny_draw_string>
	glcd_write();
    347a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <glcd_write>
}
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	08 95       	ret

00003484 <EERead1Byte>:
	
	return 0;
}


uint8_t EERead1Byte ( uint16_t u16addr ){
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	18 2f       	mov	r17, r24
    348a:	09 2f       	mov	r16, r25
	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	uint8_t u8data = 0;
	
    TWIStart();
    348c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
	TWIWrite( EEWRITE );
    3490:	80 ea       	ldi	r24, 0xA0	; 160
    3492:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIWrite( addr_l );
    3496:	81 2f       	mov	r24, r17
    3498:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIWrite( addr_h );
    349c:	80 2f       	mov	r24, r16
    349e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
    TWIStart();
    34a2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
	TWIWrite( EEREAD );
    34a6:	81 ea       	ldi	r24, 0xA1	; 161
    34a8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	u8data = TWIReadNACK();
    34ac:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <TWIReadNACK>
    34b0:	18 2f       	mov	r17, r24
    TWIStop();
    34b2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <TWIStop>
	
    return u8data;
}
    34b6:	81 2f       	mov	r24, r17
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	08 95       	ret

000034be <EERead2Bytes>:
	_delay_ms(50);								// for write
	
	return 0;
}

uint16_t EERead2Bytes ( uint16_t u16addr ){
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	8c 01       	movw	r16, r24
	
	uint16_t data_lsb, data_msb;
	
	data_lsb = EERead1Byte ( u16addr );			// read LSB register
    34c6:	0e 94 42 1a 	call	0x3484	; 0x3484 <EERead1Byte>
    34ca:	f8 2e       	mov	r15, r24
	data_msb = EERead1Byte ( u16addr + 0x01 );	// read MSB register
    34cc:	c8 01       	movw	r24, r16
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	0e 94 42 1a 	call	0x3484	; 0x3484 <EERead1Byte>
    34d4:	38 2f       	mov	r19, r24
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	2f 0d       	add	r18, r15
    34da:	31 1d       	adc	r19, r1
	
    return ( data_lsb + ( data_msb << 8 ));	// 16 Bit
    34dc:	c9 01       	movw	r24, r18
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	08 95       	ret

000034e6 <EEWrite1Byte>:

#define EEWRITE		0b10100000
#define EEREAD		0b10100001

// 8 Bit data
uint8_t EEWrite1Byte ( uint16_t u16addr, uint8_t u8data ){
    34e6:	ff 92       	push	r15
    34e8:	0f 93       	push	r16
    34ea:	1f 93       	push	r17
    34ec:	18 2f       	mov	r17, r24
    34ee:	09 2f       	mov	r16, r25
    34f0:	f6 2e       	mov	r15, r22

	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	
    TWIStart();
    34f2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <TWIStart>
	TWIWrite( EEWRITE );  
    34f6:	80 ea       	ldi	r24, 0xA0	; 160
    34f8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIWrite( addr_l );
    34fc:	81 2f       	mov	r24, r17
    34fe:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIWrite( addr_h );
    3502:	80 2f       	mov	r24, r16
    3504:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIWrite( u8data );
    3508:	8f 2d       	mov	r24, r15
    350a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <TWIWrite>
	TWIStop();
    350e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <TWIStop>
	
	return 0;
}
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	ff 90       	pop	r15
    351a:	08 95       	ret

0000351c <EEWrite2Bytes>:
	
    return u8data;
}
//
// 16 Bit data
uint8_t EEWrite2Bytes ( uint16_t u16addr, uint16_t u16data ){
    351c:	df 92       	push	r13
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	7c 01       	movw	r14, r24
    3528:	d7 2e       	mov	r13, r23
	uint8_t data_lsb, data_msb;
	
	data_lsb = u16data;							// LSB data
	data_msb = ( u16data >> 8 );				// MSB data
	
	EEWrite1Byte ( u16addr, data_lsb );			// write LSB register
    352a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <EEWrite1Byte>
    352e:	04 ed       	ldi	r16, 0xD4	; 212
    3530:	10 e3       	ldi	r17, 0x30	; 48
    3532:	c8 01       	movw	r24, r16
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <EEWrite2Bytes+0x18>
	_delay_ms(50);								// for write
	EEWrite1Byte (( u16addr + 1 ),  data_msb );// Write MSB register
    3538:	c7 01       	movw	r24, r14
    353a:	01 96       	adiw	r24, 0x01	; 1
    353c:	6d 2d       	mov	r22, r13
    353e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <EEWrite1Byte>
    3542:	c8 01       	movw	r24, r16
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <EEWrite2Bytes+0x28>
	_delay_ms(50);								// for write
	
	return 0;
}
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ff 90       	pop	r15
    3550:	ef 90       	pop	r14
    3552:	df 90       	pop	r13
    3554:	08 95       	ret

00003556 <TWIInit>:
#include "twi.h"

// Initial TWI
void TWIInit ( void ){
	// set SCL to 400kHz
	TWSR = 0x00;
    3556:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
    355a:	8c e0       	ldi	r24, 0x0C	; 12
    355c:	80 93 b8 00 	sts	0x00B8, r24
	// enable TWI
	TWCR = ( 1 << TWEN );
    3560:	84 e0       	ldi	r24, 0x04	; 4
    3562:	80 93 bc 00 	sts	0x00BC, r24
}
    3566:	08 95       	ret

00003568 <TWIStart>:
//
// Start read/write
void TWIStart ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA ) | ( 1 << TWEN );
    3568:	84 ea       	ldi	r24, 0xA4	; 164
    356a:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    356e:	80 91 bc 00 	lds	r24, 0x00BC
    3572:	87 ff       	sbrs	r24, 7
    3574:	fc cf       	rjmp	.-8      	; 0x356e <TWIStart+0x6>
}
    3576:	08 95       	ret

00003578 <TWIStop>:
//
// Stop read/ write
void TWIStop ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTO ) | ( 1 << TWEN );
    3578:	84 e9       	ldi	r24, 0x94	; 148
    357a:	80 93 bc 00 	sts	0x00BC, r24
}
    357e:	08 95       	ret

00003580 <TWIWrite>:
//
// Write
void TWIWrite ( uint8_t u8data ){

	TWDR = u8data;
    3580:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    3584:	84 e8       	ldi	r24, 0x84	; 132
    3586:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    358a:	80 91 bc 00 	lds	r24, 0x00BC
    358e:	87 ff       	sbrs	r24, 7
    3590:	fc cf       	rjmp	.-8      	; 0x358a <TWIWrite+0xa>
}
    3592:	08 95       	ret

00003594 <TWIReadACK>:
//
// Read
uint8_t TWIReadACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN )|( 1 << TWEA );
    3594:	84 ec       	ldi	r24, 0xC4	; 196
    3596:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    359a:	80 91 bc 00 	lds	r24, 0x00BC
    359e:	87 ff       	sbrs	r24, 7
    35a0:	fc cf       	rjmp	.-8      	; 0x359a <TWIReadACK+0x6>
	return TWDR;
    35a2:	80 91 bb 00 	lds	r24, 0x00BB
}
    35a6:	08 95       	ret

000035a8 <TWIReadNACK>:
//
//
uint8_t TWIReadNACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    35a8:	84 e8       	ldi	r24, 0x84	; 132
    35aa:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    35ae:	80 91 bc 00 	lds	r24, 0x00BC
    35b2:	87 ff       	sbrs	r24, 7
    35b4:	fc cf       	rjmp	.-8      	; 0x35ae <TWIReadNACK+0x6>
	return TWDR;
    35b6:	80 91 bb 00 	lds	r24, 0x00BB
}
    35ba:	08 95       	ret

000035bc <TWIGetStatus>:
// Status
uint8_t TWIGetStatus( void ){

	uint8_t status;
	// mask status
	status = TWSR & 0xF8;
    35bc:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
    35c0:	88 7f       	andi	r24, 0xF8	; 248
    35c2:	08 95       	ret

000035c4 <__cmpsf2>:
    35c4:	6c d0       	rcall	.+216    	; 0x369e <__fp_cmp>
    35c6:	08 f4       	brcc	.+2      	; 0x35ca <__cmpsf2+0x6>
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	08 95       	ret

000035cc <__fixunssfsi>:
    35cc:	94 d0       	rcall	.+296    	; 0x36f6 <__fp_splitA>
    35ce:	88 f0       	brcs	.+34     	; 0x35f2 <__fixunssfsi+0x26>
    35d0:	9f 57       	subi	r25, 0x7F	; 127
    35d2:	90 f0       	brcs	.+36     	; 0x35f8 <__fixunssfsi+0x2c>
    35d4:	b9 2f       	mov	r27, r25
    35d6:	99 27       	eor	r25, r25
    35d8:	b7 51       	subi	r27, 0x17	; 23
    35da:	a0 f0       	brcs	.+40     	; 0x3604 <__fixunssfsi+0x38>
    35dc:	d1 f0       	breq	.+52     	; 0x3612 <__fixunssfsi+0x46>
    35de:	66 0f       	add	r22, r22
    35e0:	77 1f       	adc	r23, r23
    35e2:	88 1f       	adc	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	1a f0       	brmi	.+6      	; 0x35ee <__fixunssfsi+0x22>
    35e8:	ba 95       	dec	r27
    35ea:	c9 f7       	brne	.-14     	; 0x35de <__fixunssfsi+0x12>
    35ec:	12 c0       	rjmp	.+36     	; 0x3612 <__fixunssfsi+0x46>
    35ee:	b1 30       	cpi	r27, 0x01	; 1
    35f0:	81 f0       	breq	.+32     	; 0x3612 <__fixunssfsi+0x46>
    35f2:	9b d0       	rcall	.+310    	; 0x372a <__fp_zero>
    35f4:	b1 e0       	ldi	r27, 0x01	; 1
    35f6:	08 95       	ret
    35f8:	98 c0       	rjmp	.+304    	; 0x372a <__fp_zero>
    35fa:	67 2f       	mov	r22, r23
    35fc:	78 2f       	mov	r23, r24
    35fe:	88 27       	eor	r24, r24
    3600:	b8 5f       	subi	r27, 0xF8	; 248
    3602:	39 f0       	breq	.+14     	; 0x3612 <__fixunssfsi+0x46>
    3604:	b9 3f       	cpi	r27, 0xF9	; 249
    3606:	cc f3       	brlt	.-14     	; 0x35fa <__fixunssfsi+0x2e>
    3608:	86 95       	lsr	r24
    360a:	77 95       	ror	r23
    360c:	67 95       	ror	r22
    360e:	b3 95       	inc	r27
    3610:	d9 f7       	brne	.-10     	; 0x3608 <__fixunssfsi+0x3c>
    3612:	3e f4       	brtc	.+14     	; 0x3622 <__fixunssfsi+0x56>
    3614:	90 95       	com	r25
    3616:	80 95       	com	r24
    3618:	70 95       	com	r23
    361a:	61 95       	neg	r22
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	8f 4f       	sbci	r24, 0xFF	; 255
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	08 95       	ret

00003624 <__floatunsisf>:
    3624:	e8 94       	clt
    3626:	09 c0       	rjmp	.+18     	; 0x363a <__floatsisf+0x12>

00003628 <__floatsisf>:
    3628:	97 fb       	bst	r25, 7
    362a:	3e f4       	brtc	.+14     	; 0x363a <__floatsisf+0x12>
    362c:	90 95       	com	r25
    362e:	80 95       	com	r24
    3630:	70 95       	com	r23
    3632:	61 95       	neg	r22
    3634:	7f 4f       	sbci	r23, 0xFF	; 255
    3636:	8f 4f       	sbci	r24, 0xFF	; 255
    3638:	9f 4f       	sbci	r25, 0xFF	; 255
    363a:	99 23       	and	r25, r25
    363c:	a9 f0       	breq	.+42     	; 0x3668 <__floatsisf+0x40>
    363e:	f9 2f       	mov	r31, r25
    3640:	96 e9       	ldi	r25, 0x96	; 150
    3642:	bb 27       	eor	r27, r27
    3644:	93 95       	inc	r25
    3646:	f6 95       	lsr	r31
    3648:	87 95       	ror	r24
    364a:	77 95       	ror	r23
    364c:	67 95       	ror	r22
    364e:	b7 95       	ror	r27
    3650:	f1 11       	cpse	r31, r1
    3652:	f8 cf       	rjmp	.-16     	; 0x3644 <__floatsisf+0x1c>
    3654:	fa f4       	brpl	.+62     	; 0x3694 <__floatsisf+0x6c>
    3656:	bb 0f       	add	r27, r27
    3658:	11 f4       	brne	.+4      	; 0x365e <__floatsisf+0x36>
    365a:	60 ff       	sbrs	r22, 0
    365c:	1b c0       	rjmp	.+54     	; 0x3694 <__floatsisf+0x6c>
    365e:	6f 5f       	subi	r22, 0xFF	; 255
    3660:	7f 4f       	sbci	r23, 0xFF	; 255
    3662:	8f 4f       	sbci	r24, 0xFF	; 255
    3664:	9f 4f       	sbci	r25, 0xFF	; 255
    3666:	16 c0       	rjmp	.+44     	; 0x3694 <__floatsisf+0x6c>
    3668:	88 23       	and	r24, r24
    366a:	11 f0       	breq	.+4      	; 0x3670 <__floatsisf+0x48>
    366c:	96 e9       	ldi	r25, 0x96	; 150
    366e:	11 c0       	rjmp	.+34     	; 0x3692 <__floatsisf+0x6a>
    3670:	77 23       	and	r23, r23
    3672:	21 f0       	breq	.+8      	; 0x367c <__floatsisf+0x54>
    3674:	9e e8       	ldi	r25, 0x8E	; 142
    3676:	87 2f       	mov	r24, r23
    3678:	76 2f       	mov	r23, r22
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <__floatsisf+0x5e>
    367c:	66 23       	and	r22, r22
    367e:	71 f0       	breq	.+28     	; 0x369c <__floatsisf+0x74>
    3680:	96 e8       	ldi	r25, 0x86	; 134
    3682:	86 2f       	mov	r24, r22
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	2a f0       	brmi	.+10     	; 0x3694 <__floatsisf+0x6c>
    368a:	9a 95       	dec	r25
    368c:	66 0f       	add	r22, r22
    368e:	77 1f       	adc	r23, r23
    3690:	88 1f       	adc	r24, r24
    3692:	da f7       	brpl	.-10     	; 0x368a <__floatsisf+0x62>
    3694:	88 0f       	add	r24, r24
    3696:	96 95       	lsr	r25
    3698:	87 95       	ror	r24
    369a:	97 f9       	bld	r25, 7
    369c:	08 95       	ret

0000369e <__fp_cmp>:
    369e:	99 0f       	add	r25, r25
    36a0:	00 08       	sbc	r0, r0
    36a2:	55 0f       	add	r21, r21
    36a4:	aa 0b       	sbc	r26, r26
    36a6:	e0 e8       	ldi	r30, 0x80	; 128
    36a8:	fe ef       	ldi	r31, 0xFE	; 254
    36aa:	16 16       	cp	r1, r22
    36ac:	17 06       	cpc	r1, r23
    36ae:	e8 07       	cpc	r30, r24
    36b0:	f9 07       	cpc	r31, r25
    36b2:	c0 f0       	brcs	.+48     	; 0x36e4 <__fp_cmp+0x46>
    36b4:	12 16       	cp	r1, r18
    36b6:	13 06       	cpc	r1, r19
    36b8:	e4 07       	cpc	r30, r20
    36ba:	f5 07       	cpc	r31, r21
    36bc:	98 f0       	brcs	.+38     	; 0x36e4 <__fp_cmp+0x46>
    36be:	62 1b       	sub	r22, r18
    36c0:	73 0b       	sbc	r23, r19
    36c2:	84 0b       	sbc	r24, r20
    36c4:	95 0b       	sbc	r25, r21
    36c6:	39 f4       	brne	.+14     	; 0x36d6 <__fp_cmp+0x38>
    36c8:	0a 26       	eor	r0, r26
    36ca:	61 f0       	breq	.+24     	; 0x36e4 <__fp_cmp+0x46>
    36cc:	23 2b       	or	r18, r19
    36ce:	24 2b       	or	r18, r20
    36d0:	25 2b       	or	r18, r21
    36d2:	21 f4       	brne	.+8      	; 0x36dc <__fp_cmp+0x3e>
    36d4:	08 95       	ret
    36d6:	0a 26       	eor	r0, r26
    36d8:	09 f4       	brne	.+2      	; 0x36dc <__fp_cmp+0x3e>
    36da:	a1 40       	sbci	r26, 0x01	; 1
    36dc:	a6 95       	lsr	r26
    36de:	8f ef       	ldi	r24, 0xFF	; 255
    36e0:	81 1d       	adc	r24, r1
    36e2:	81 1d       	adc	r24, r1
    36e4:	08 95       	ret

000036e6 <__fp_split3>:
    36e6:	57 fd       	sbrc	r21, 7
    36e8:	90 58       	subi	r25, 0x80	; 128
    36ea:	44 0f       	add	r20, r20
    36ec:	55 1f       	adc	r21, r21
    36ee:	59 f0       	breq	.+22     	; 0x3706 <__fp_splitA+0x10>
    36f0:	5f 3f       	cpi	r21, 0xFF	; 255
    36f2:	71 f0       	breq	.+28     	; 0x3710 <__fp_splitA+0x1a>
    36f4:	47 95       	ror	r20

000036f6 <__fp_splitA>:
    36f6:	88 0f       	add	r24, r24
    36f8:	97 fb       	bst	r25, 7
    36fa:	99 1f       	adc	r25, r25
    36fc:	61 f0       	breq	.+24     	; 0x3716 <__fp_splitA+0x20>
    36fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3700:	79 f0       	breq	.+30     	; 0x3720 <__fp_splitA+0x2a>
    3702:	87 95       	ror	r24
    3704:	08 95       	ret
    3706:	12 16       	cp	r1, r18
    3708:	13 06       	cpc	r1, r19
    370a:	14 06       	cpc	r1, r20
    370c:	55 1f       	adc	r21, r21
    370e:	f2 cf       	rjmp	.-28     	; 0x36f4 <__fp_split3+0xe>
    3710:	46 95       	lsr	r20
    3712:	f1 df       	rcall	.-30     	; 0x36f6 <__fp_splitA>
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <__fp_splitA+0x30>
    3716:	16 16       	cp	r1, r22
    3718:	17 06       	cpc	r1, r23
    371a:	18 06       	cpc	r1, r24
    371c:	99 1f       	adc	r25, r25
    371e:	f1 cf       	rjmp	.-30     	; 0x3702 <__fp_splitA+0xc>
    3720:	86 95       	lsr	r24
    3722:	71 05       	cpc	r23, r1
    3724:	61 05       	cpc	r22, r1
    3726:	08 94       	sec
    3728:	08 95       	ret

0000372a <__fp_zero>:
    372a:	e8 94       	clt

0000372c <__fp_szero>:
    372c:	bb 27       	eor	r27, r27
    372e:	66 27       	eor	r22, r22
    3730:	77 27       	eor	r23, r23
    3732:	cb 01       	movw	r24, r22
    3734:	97 f9       	bld	r25, 7
    3736:	08 95       	ret

00003738 <__gesf2>:
    3738:	b2 df       	rcall	.-156    	; 0x369e <__fp_cmp>
    373a:	08 f4       	brcc	.+2      	; 0x373e <__gesf2+0x6>
    373c:	8f ef       	ldi	r24, 0xFF	; 255
    373e:	08 95       	ret

00003740 <__mulsf3>:
    3740:	0b d0       	rcall	.+22     	; 0x3758 <__mulsf3x>
    3742:	78 c0       	rjmp	.+240    	; 0x3834 <__fp_round>
    3744:	69 d0       	rcall	.+210    	; 0x3818 <__fp_pscA>
    3746:	28 f0       	brcs	.+10     	; 0x3752 <__mulsf3+0x12>
    3748:	6e d0       	rcall	.+220    	; 0x3826 <__fp_pscB>
    374a:	18 f0       	brcs	.+6      	; 0x3752 <__mulsf3+0x12>
    374c:	95 23       	and	r25, r21
    374e:	09 f0       	breq	.+2      	; 0x3752 <__mulsf3+0x12>
    3750:	5a c0       	rjmp	.+180    	; 0x3806 <__fp_inf>
    3752:	5f c0       	rjmp	.+190    	; 0x3812 <__fp_nan>
    3754:	11 24       	eor	r1, r1
    3756:	ea cf       	rjmp	.-44     	; 0x372c <__fp_szero>

00003758 <__mulsf3x>:
    3758:	c6 df       	rcall	.-116    	; 0x36e6 <__fp_split3>
    375a:	a0 f3       	brcs	.-24     	; 0x3744 <__mulsf3+0x4>

0000375c <__mulsf3_pse>:
    375c:	95 9f       	mul	r25, r21
    375e:	d1 f3       	breq	.-12     	; 0x3754 <__mulsf3+0x14>
    3760:	95 0f       	add	r25, r21
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	55 1f       	adc	r21, r21
    3766:	62 9f       	mul	r22, r18
    3768:	f0 01       	movw	r30, r0
    376a:	72 9f       	mul	r23, r18
    376c:	bb 27       	eor	r27, r27
    376e:	f0 0d       	add	r31, r0
    3770:	b1 1d       	adc	r27, r1
    3772:	63 9f       	mul	r22, r19
    3774:	aa 27       	eor	r26, r26
    3776:	f0 0d       	add	r31, r0
    3778:	b1 1d       	adc	r27, r1
    377a:	aa 1f       	adc	r26, r26
    377c:	64 9f       	mul	r22, r20
    377e:	66 27       	eor	r22, r22
    3780:	b0 0d       	add	r27, r0
    3782:	a1 1d       	adc	r26, r1
    3784:	66 1f       	adc	r22, r22
    3786:	82 9f       	mul	r24, r18
    3788:	22 27       	eor	r18, r18
    378a:	b0 0d       	add	r27, r0
    378c:	a1 1d       	adc	r26, r1
    378e:	62 1f       	adc	r22, r18
    3790:	73 9f       	mul	r23, r19
    3792:	b0 0d       	add	r27, r0
    3794:	a1 1d       	adc	r26, r1
    3796:	62 1f       	adc	r22, r18
    3798:	83 9f       	mul	r24, r19
    379a:	a0 0d       	add	r26, r0
    379c:	61 1d       	adc	r22, r1
    379e:	22 1f       	adc	r18, r18
    37a0:	74 9f       	mul	r23, r20
    37a2:	33 27       	eor	r19, r19
    37a4:	a0 0d       	add	r26, r0
    37a6:	61 1d       	adc	r22, r1
    37a8:	23 1f       	adc	r18, r19
    37aa:	84 9f       	mul	r24, r20
    37ac:	60 0d       	add	r22, r0
    37ae:	21 1d       	adc	r18, r1
    37b0:	82 2f       	mov	r24, r18
    37b2:	76 2f       	mov	r23, r22
    37b4:	6a 2f       	mov	r22, r26
    37b6:	11 24       	eor	r1, r1
    37b8:	9f 57       	subi	r25, 0x7F	; 127
    37ba:	50 40       	sbci	r21, 0x00	; 0
    37bc:	8a f0       	brmi	.+34     	; 0x37e0 <__mulsf3_pse+0x84>
    37be:	e1 f0       	breq	.+56     	; 0x37f8 <__mulsf3_pse+0x9c>
    37c0:	88 23       	and	r24, r24
    37c2:	4a f0       	brmi	.+18     	; 0x37d6 <__mulsf3_pse+0x7a>
    37c4:	ee 0f       	add	r30, r30
    37c6:	ff 1f       	adc	r31, r31
    37c8:	bb 1f       	adc	r27, r27
    37ca:	66 1f       	adc	r22, r22
    37cc:	77 1f       	adc	r23, r23
    37ce:	88 1f       	adc	r24, r24
    37d0:	91 50       	subi	r25, 0x01	; 1
    37d2:	50 40       	sbci	r21, 0x00	; 0
    37d4:	a9 f7       	brne	.-22     	; 0x37c0 <__mulsf3_pse+0x64>
    37d6:	9e 3f       	cpi	r25, 0xFE	; 254
    37d8:	51 05       	cpc	r21, r1
    37da:	70 f0       	brcs	.+28     	; 0x37f8 <__mulsf3_pse+0x9c>
    37dc:	14 c0       	rjmp	.+40     	; 0x3806 <__fp_inf>
    37de:	a6 cf       	rjmp	.-180    	; 0x372c <__fp_szero>
    37e0:	5f 3f       	cpi	r21, 0xFF	; 255
    37e2:	ec f3       	brlt	.-6      	; 0x37de <__mulsf3_pse+0x82>
    37e4:	98 3e       	cpi	r25, 0xE8	; 232
    37e6:	dc f3       	brlt	.-10     	; 0x37de <__mulsf3_pse+0x82>
    37e8:	86 95       	lsr	r24
    37ea:	77 95       	ror	r23
    37ec:	67 95       	ror	r22
    37ee:	b7 95       	ror	r27
    37f0:	f7 95       	ror	r31
    37f2:	e7 95       	ror	r30
    37f4:	9f 5f       	subi	r25, 0xFF	; 255
    37f6:	c1 f7       	brne	.-16     	; 0x37e8 <__mulsf3_pse+0x8c>
    37f8:	fe 2b       	or	r31, r30
    37fa:	88 0f       	add	r24, r24
    37fc:	91 1d       	adc	r25, r1
    37fe:	96 95       	lsr	r25
    3800:	87 95       	ror	r24
    3802:	97 f9       	bld	r25, 7
    3804:	08 95       	ret

00003806 <__fp_inf>:
    3806:	97 f9       	bld	r25, 7
    3808:	9f 67       	ori	r25, 0x7F	; 127
    380a:	80 e8       	ldi	r24, 0x80	; 128
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	08 95       	ret

00003812 <__fp_nan>:
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	80 ec       	ldi	r24, 0xC0	; 192
    3816:	08 95       	ret

00003818 <__fp_pscA>:
    3818:	00 24       	eor	r0, r0
    381a:	0a 94       	dec	r0
    381c:	16 16       	cp	r1, r22
    381e:	17 06       	cpc	r1, r23
    3820:	18 06       	cpc	r1, r24
    3822:	09 06       	cpc	r0, r25
    3824:	08 95       	ret

00003826 <__fp_pscB>:
    3826:	00 24       	eor	r0, r0
    3828:	0a 94       	dec	r0
    382a:	12 16       	cp	r1, r18
    382c:	13 06       	cpc	r1, r19
    382e:	14 06       	cpc	r1, r20
    3830:	05 06       	cpc	r0, r21
    3832:	08 95       	ret

00003834 <__fp_round>:
    3834:	09 2e       	mov	r0, r25
    3836:	03 94       	inc	r0
    3838:	00 0c       	add	r0, r0
    383a:	11 f4       	brne	.+4      	; 0x3840 <__fp_round+0xc>
    383c:	88 23       	and	r24, r24
    383e:	52 f0       	brmi	.+20     	; 0x3854 <__fp_round+0x20>
    3840:	bb 0f       	add	r27, r27
    3842:	40 f4       	brcc	.+16     	; 0x3854 <__fp_round+0x20>
    3844:	bf 2b       	or	r27, r31
    3846:	11 f4       	brne	.+4      	; 0x384c <__fp_round+0x18>
    3848:	60 ff       	sbrs	r22, 0
    384a:	04 c0       	rjmp	.+8      	; 0x3854 <__fp_round+0x20>
    384c:	6f 5f       	subi	r22, 0xFF	; 255
    384e:	7f 4f       	sbci	r23, 0xFF	; 255
    3850:	8f 4f       	sbci	r24, 0xFF	; 255
    3852:	9f 4f       	sbci	r25, 0xFF	; 255
    3854:	08 95       	ret

00003856 <__divmodhi4>:
    3856:	97 fb       	bst	r25, 7
    3858:	09 2e       	mov	r0, r25
    385a:	07 26       	eor	r0, r23
    385c:	0a d0       	rcall	.+20     	; 0x3872 <__divmodhi4_neg1>
    385e:	77 fd       	sbrc	r23, 7
    3860:	04 d0       	rcall	.+8      	; 0x386a <__divmodhi4_neg2>
    3862:	0c d0       	rcall	.+24     	; 0x387c <__udivmodhi4>
    3864:	06 d0       	rcall	.+12     	; 0x3872 <__divmodhi4_neg1>
    3866:	00 20       	and	r0, r0
    3868:	1a f4       	brpl	.+6      	; 0x3870 <__divmodhi4_exit>

0000386a <__divmodhi4_neg2>:
    386a:	70 95       	com	r23
    386c:	61 95       	neg	r22
    386e:	7f 4f       	sbci	r23, 0xFF	; 255

00003870 <__divmodhi4_exit>:
    3870:	08 95       	ret

00003872 <__divmodhi4_neg1>:
    3872:	f6 f7       	brtc	.-4      	; 0x3870 <__divmodhi4_exit>
    3874:	90 95       	com	r25
    3876:	81 95       	neg	r24
    3878:	9f 4f       	sbci	r25, 0xFF	; 255
    387a:	08 95       	ret

0000387c <__udivmodhi4>:
    387c:	aa 1b       	sub	r26, r26
    387e:	bb 1b       	sub	r27, r27
    3880:	51 e1       	ldi	r21, 0x11	; 17
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <__udivmodhi4_ep>

00003884 <__udivmodhi4_loop>:
    3884:	aa 1f       	adc	r26, r26
    3886:	bb 1f       	adc	r27, r27
    3888:	a6 17       	cp	r26, r22
    388a:	b7 07       	cpc	r27, r23
    388c:	10 f0       	brcs	.+4      	; 0x3892 <__udivmodhi4_ep>
    388e:	a6 1b       	sub	r26, r22
    3890:	b7 0b       	sbc	r27, r23

00003892 <__udivmodhi4_ep>:
    3892:	88 1f       	adc	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	5a 95       	dec	r21
    3898:	a9 f7       	brne	.-22     	; 0x3884 <__udivmodhi4_loop>
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	bc 01       	movw	r22, r24
    38a0:	cd 01       	movw	r24, r26
    38a2:	08 95       	ret

000038a4 <do_rand>:
    38a4:	a0 e0       	ldi	r26, 0x00	; 0
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e8 e5       	ldi	r30, 0x58	; 88
    38aa:	fc e1       	ldi	r31, 0x1C	; 28
    38ac:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__prologue_saves__+0x10>
    38b0:	ec 01       	movw	r28, r24
    38b2:	a8 80       	ld	r10, Y
    38b4:	b9 80       	ldd	r11, Y+1	; 0x01
    38b6:	ca 80       	ldd	r12, Y+2	; 0x02
    38b8:	db 80       	ldd	r13, Y+3	; 0x03
    38ba:	a1 14       	cp	r10, r1
    38bc:	b1 04       	cpc	r11, r1
    38be:	c1 04       	cpc	r12, r1
    38c0:	d1 04       	cpc	r13, r1
    38c2:	41 f4       	brne	.+16     	; 0x38d4 <do_rand+0x30>
    38c4:	84 e2       	ldi	r24, 0x24	; 36
    38c6:	a8 2e       	mov	r10, r24
    38c8:	89 ed       	ldi	r24, 0xD9	; 217
    38ca:	b8 2e       	mov	r11, r24
    38cc:	8b e5       	ldi	r24, 0x5B	; 91
    38ce:	c8 2e       	mov	r12, r24
    38d0:	87 e0       	ldi	r24, 0x07	; 7
    38d2:	d8 2e       	mov	r13, r24
    38d4:	c6 01       	movw	r24, r12
    38d6:	b5 01       	movw	r22, r10
    38d8:	2d e1       	ldi	r18, 0x1D	; 29
    38da:	33 ef       	ldi	r19, 0xF3	; 243
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__divmodsi4>
    38e4:	27 ea       	ldi	r18, 0xA7	; 167
    38e6:	31 e4       	ldi	r19, 0x41	; 65
    38e8:	40 e0       	ldi	r20, 0x00	; 0
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__mulsi3>
    38f0:	7b 01       	movw	r14, r22
    38f2:	8c 01       	movw	r16, r24
    38f4:	c6 01       	movw	r24, r12
    38f6:	b5 01       	movw	r22, r10
    38f8:	2d e1       	ldi	r18, 0x1D	; 29
    38fa:	33 ef       	ldi	r19, 0xF3	; 243
    38fc:	41 e0       	ldi	r20, 0x01	; 1
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__divmodsi4>
    3904:	ca 01       	movw	r24, r20
    3906:	b9 01       	movw	r22, r18
    3908:	2c ee       	ldi	r18, 0xEC	; 236
    390a:	34 ef       	ldi	r19, 0xF4	; 244
    390c:	4f ef       	ldi	r20, 0xFF	; 255
    390e:	5f ef       	ldi	r21, 0xFF	; 255
    3910:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__mulsi3>
    3914:	6e 0d       	add	r22, r14
    3916:	7f 1d       	adc	r23, r15
    3918:	80 1f       	adc	r24, r16
    391a:	91 1f       	adc	r25, r17
    391c:	97 ff       	sbrs	r25, 7
    391e:	04 c0       	rjmp	.+8      	; 0x3928 <do_rand+0x84>
    3920:	61 50       	subi	r22, 0x01	; 1
    3922:	70 40       	sbci	r23, 0x00	; 0
    3924:	80 40       	sbci	r24, 0x00	; 0
    3926:	90 48       	sbci	r25, 0x80	; 128
    3928:	68 83       	st	Y, r22
    392a:	79 83       	std	Y+1, r23	; 0x01
    392c:	8a 83       	std	Y+2, r24	; 0x02
    392e:	9b 83       	std	Y+3, r25	; 0x03
    3930:	9b 01       	movw	r18, r22
    3932:	3f 77       	andi	r19, 0x7F	; 127
    3934:	c9 01       	movw	r24, r18
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	ea e0       	ldi	r30, 0x0A	; 10
    393c:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__epilogue_restores__+0x10>

00003940 <rand_r>:
    3940:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <do_rand>
    3944:	08 95       	ret

00003946 <rand>:
    3946:	85 e0       	ldi	r24, 0x05	; 5
    3948:	92 e0       	ldi	r25, 0x02	; 2
    394a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <do_rand>
    394e:	08 95       	ret

00003950 <srand>:
    3950:	a0 e0       	ldi	r26, 0x00	; 0
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	80 93 05 02 	sts	0x0205, r24
    3958:	90 93 06 02 	sts	0x0206, r25
    395c:	a0 93 07 02 	sts	0x0207, r26
    3960:	b0 93 08 02 	sts	0x0208, r27
    3964:	08 95       	ret

00003966 <memcpy_P>:
    3966:	fb 01       	movw	r30, r22
    3968:	dc 01       	movw	r26, r24
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <memcpy_P+0xa>
    396c:	05 90       	lpm	r0, Z+
    396e:	0d 92       	st	X+, r0
    3970:	41 50       	subi	r20, 0x01	; 1
    3972:	50 40       	sbci	r21, 0x00	; 0
    3974:	d8 f7       	brcc	.-10     	; 0x396c <memcpy_P+0x6>
    3976:	08 95       	ret

00003978 <strcpy>:
    3978:	fb 01       	movw	r30, r22
    397a:	dc 01       	movw	r26, r24
    397c:	01 90       	ld	r0, Z+
    397e:	0d 92       	st	X+, r0
    3980:	00 20       	and	r0, r0
    3982:	e1 f7       	brne	.-8      	; 0x397c <strcpy+0x4>
    3984:	08 95       	ret

00003986 <sprintf>:
    3986:	ae e0       	ldi	r26, 0x0E	; 14
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e9 ec       	ldi	r30, 0xC9	; 201
    398c:	fc e1       	ldi	r31, 0x1C	; 28
    398e:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <__prologue_saves__+0x1c>
    3992:	0d 89       	ldd	r16, Y+21	; 0x15
    3994:	1e 89       	ldd	r17, Y+22	; 0x16
    3996:	86 e0       	ldi	r24, 0x06	; 6
    3998:	8c 83       	std	Y+4, r24	; 0x04
    399a:	1a 83       	std	Y+2, r17	; 0x02
    399c:	09 83       	std	Y+1, r16	; 0x01
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	9f e7       	ldi	r25, 0x7F	; 127
    39a2:	9e 83       	std	Y+6, r25	; 0x06
    39a4:	8d 83       	std	Y+5, r24	; 0x05
    39a6:	9e 01       	movw	r18, r28
    39a8:	27 5e       	subi	r18, 0xE7	; 231
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	ce 01       	movw	r24, r28
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	6f 89       	ldd	r22, Y+23	; 0x17
    39b2:	78 8d       	ldd	r23, Y+24	; 0x18
    39b4:	a9 01       	movw	r20, r18
    39b6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <vfprintf>
    39ba:	2f 81       	ldd	r18, Y+7	; 0x07
    39bc:	38 85       	ldd	r19, Y+8	; 0x08
    39be:	02 0f       	add	r16, r18
    39c0:	13 1f       	adc	r17, r19
    39c2:	f8 01       	movw	r30, r16
    39c4:	10 82       	st	Z, r1
    39c6:	2e 96       	adiw	r28, 0x0e	; 14
    39c8:	e4 e0       	ldi	r30, 0x04	; 4
    39ca:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__epilogue_restores__+0x1c>

000039ce <vfprintf>:
    39ce:	ab e0       	ldi	r26, 0x0B	; 11
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	ed ee       	ldi	r30, 0xED	; 237
    39d4:	fc e1       	ldi	r31, 0x1C	; 28
    39d6:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__prologue_saves__>
    39da:	3c 01       	movw	r6, r24
    39dc:	2b 01       	movw	r4, r22
    39de:	5a 01       	movw	r10, r20
    39e0:	fc 01       	movw	r30, r24
    39e2:	17 82       	std	Z+7, r1	; 0x07
    39e4:	16 82       	std	Z+6, r1	; 0x06
    39e6:	83 81       	ldd	r24, Z+3	; 0x03
    39e8:	81 fd       	sbrc	r24, 1
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <vfprintf+0x24>
    39ec:	6f ef       	ldi	r22, 0xFF	; 255
    39ee:	7f ef       	ldi	r23, 0xFF	; 255
    39f0:	c6 c1       	rjmp	.+908    	; 0x3d7e <vfprintf+0x3b0>
    39f2:	9a e0       	ldi	r25, 0x0A	; 10
    39f4:	89 2e       	mov	r8, r25
    39f6:	1e 01       	movw	r2, r28
    39f8:	08 94       	sec
    39fa:	21 1c       	adc	r2, r1
    39fc:	31 1c       	adc	r3, r1
    39fe:	f3 01       	movw	r30, r6
    3a00:	23 81       	ldd	r18, Z+3	; 0x03
    3a02:	f2 01       	movw	r30, r4
    3a04:	23 fd       	sbrc	r18, 3
    3a06:	85 91       	lpm	r24, Z+
    3a08:	23 ff       	sbrs	r18, 3
    3a0a:	81 91       	ld	r24, Z+
    3a0c:	2f 01       	movw	r4, r30
    3a0e:	88 23       	and	r24, r24
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <vfprintf+0x46>
    3a12:	b2 c1       	rjmp	.+868    	; 0x3d78 <vfprintf+0x3aa>
    3a14:	85 32       	cpi	r24, 0x25	; 37
    3a16:	39 f4       	brne	.+14     	; 0x3a26 <vfprintf+0x58>
    3a18:	23 fd       	sbrc	r18, 3
    3a1a:	85 91       	lpm	r24, Z+
    3a1c:	23 ff       	sbrs	r18, 3
    3a1e:	81 91       	ld	r24, Z+
    3a20:	2f 01       	movw	r4, r30
    3a22:	85 32       	cpi	r24, 0x25	; 37
    3a24:	29 f4       	brne	.+10     	; 0x3a30 <vfprintf+0x62>
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	b3 01       	movw	r22, r6
    3a2a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3a2e:	e7 cf       	rjmp	.-50     	; 0x39fe <vfprintf+0x30>
    3a30:	98 2f       	mov	r25, r24
    3a32:	ff 24       	eor	r15, r15
    3a34:	ee 24       	eor	r14, r14
    3a36:	99 24       	eor	r9, r9
    3a38:	ff e1       	ldi	r31, 0x1F	; 31
    3a3a:	ff 15       	cp	r31, r15
    3a3c:	d0 f0       	brcs	.+52     	; 0x3a72 <vfprintf+0xa4>
    3a3e:	9b 32       	cpi	r25, 0x2B	; 43
    3a40:	69 f0       	breq	.+26     	; 0x3a5c <vfprintf+0x8e>
    3a42:	9c 32       	cpi	r25, 0x2C	; 44
    3a44:	28 f4       	brcc	.+10     	; 0x3a50 <vfprintf+0x82>
    3a46:	90 32       	cpi	r25, 0x20	; 32
    3a48:	59 f0       	breq	.+22     	; 0x3a60 <vfprintf+0x92>
    3a4a:	93 32       	cpi	r25, 0x23	; 35
    3a4c:	91 f4       	brne	.+36     	; 0x3a72 <vfprintf+0xa4>
    3a4e:	0e c0       	rjmp	.+28     	; 0x3a6c <vfprintf+0x9e>
    3a50:	9d 32       	cpi	r25, 0x2D	; 45
    3a52:	49 f0       	breq	.+18     	; 0x3a66 <vfprintf+0x98>
    3a54:	90 33       	cpi	r25, 0x30	; 48
    3a56:	69 f4       	brne	.+26     	; 0x3a72 <vfprintf+0xa4>
    3a58:	41 e0       	ldi	r20, 0x01	; 1
    3a5a:	24 c0       	rjmp	.+72     	; 0x3aa4 <vfprintf+0xd6>
    3a5c:	52 e0       	ldi	r21, 0x02	; 2
    3a5e:	f5 2a       	or	r15, r21
    3a60:	84 e0       	ldi	r24, 0x04	; 4
    3a62:	f8 2a       	or	r15, r24
    3a64:	28 c0       	rjmp	.+80     	; 0x3ab6 <vfprintf+0xe8>
    3a66:	98 e0       	ldi	r25, 0x08	; 8
    3a68:	f9 2a       	or	r15, r25
    3a6a:	25 c0       	rjmp	.+74     	; 0x3ab6 <vfprintf+0xe8>
    3a6c:	e0 e1       	ldi	r30, 0x10	; 16
    3a6e:	fe 2a       	or	r15, r30
    3a70:	22 c0       	rjmp	.+68     	; 0x3ab6 <vfprintf+0xe8>
    3a72:	f7 fc       	sbrc	r15, 7
    3a74:	29 c0       	rjmp	.+82     	; 0x3ac8 <vfprintf+0xfa>
    3a76:	89 2f       	mov	r24, r25
    3a78:	80 53       	subi	r24, 0x30	; 48
    3a7a:	8a 30       	cpi	r24, 0x0A	; 10
    3a7c:	70 f4       	brcc	.+28     	; 0x3a9a <vfprintf+0xcc>
    3a7e:	f6 fe       	sbrs	r15, 6
    3a80:	05 c0       	rjmp	.+10     	; 0x3a8c <vfprintf+0xbe>
    3a82:	98 9c       	mul	r9, r8
    3a84:	90 2c       	mov	r9, r0
    3a86:	11 24       	eor	r1, r1
    3a88:	98 0e       	add	r9, r24
    3a8a:	15 c0       	rjmp	.+42     	; 0x3ab6 <vfprintf+0xe8>
    3a8c:	e8 9c       	mul	r14, r8
    3a8e:	e0 2c       	mov	r14, r0
    3a90:	11 24       	eor	r1, r1
    3a92:	e8 0e       	add	r14, r24
    3a94:	f0 e2       	ldi	r31, 0x20	; 32
    3a96:	ff 2a       	or	r15, r31
    3a98:	0e c0       	rjmp	.+28     	; 0x3ab6 <vfprintf+0xe8>
    3a9a:	9e 32       	cpi	r25, 0x2E	; 46
    3a9c:	29 f4       	brne	.+10     	; 0x3aa8 <vfprintf+0xda>
    3a9e:	f6 fc       	sbrc	r15, 6
    3aa0:	6b c1       	rjmp	.+726    	; 0x3d78 <vfprintf+0x3aa>
    3aa2:	40 e4       	ldi	r20, 0x40	; 64
    3aa4:	f4 2a       	or	r15, r20
    3aa6:	07 c0       	rjmp	.+14     	; 0x3ab6 <vfprintf+0xe8>
    3aa8:	9c 36       	cpi	r25, 0x6C	; 108
    3aaa:	19 f4       	brne	.+6      	; 0x3ab2 <vfprintf+0xe4>
    3aac:	50 e8       	ldi	r21, 0x80	; 128
    3aae:	f5 2a       	or	r15, r21
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <vfprintf+0xe8>
    3ab2:	98 36       	cpi	r25, 0x68	; 104
    3ab4:	49 f4       	brne	.+18     	; 0x3ac8 <vfprintf+0xfa>
    3ab6:	f2 01       	movw	r30, r4
    3ab8:	23 fd       	sbrc	r18, 3
    3aba:	95 91       	lpm	r25, Z+
    3abc:	23 ff       	sbrs	r18, 3
    3abe:	91 91       	ld	r25, Z+
    3ac0:	2f 01       	movw	r4, r30
    3ac2:	99 23       	and	r25, r25
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <vfprintf+0xfa>
    3ac6:	b8 cf       	rjmp	.-144    	; 0x3a38 <vfprintf+0x6a>
    3ac8:	89 2f       	mov	r24, r25
    3aca:	85 54       	subi	r24, 0x45	; 69
    3acc:	83 30       	cpi	r24, 0x03	; 3
    3ace:	18 f0       	brcs	.+6      	; 0x3ad6 <vfprintf+0x108>
    3ad0:	80 52       	subi	r24, 0x20	; 32
    3ad2:	83 30       	cpi	r24, 0x03	; 3
    3ad4:	38 f4       	brcc	.+14     	; 0x3ae4 <vfprintf+0x116>
    3ad6:	44 e0       	ldi	r20, 0x04	; 4
    3ad8:	50 e0       	ldi	r21, 0x00	; 0
    3ada:	a4 0e       	add	r10, r20
    3adc:	b5 1e       	adc	r11, r21
    3ade:	5f e3       	ldi	r21, 0x3F	; 63
    3ae0:	59 83       	std	Y+1, r21	; 0x01
    3ae2:	0f c0       	rjmp	.+30     	; 0x3b02 <vfprintf+0x134>
    3ae4:	93 36       	cpi	r25, 0x63	; 99
    3ae6:	31 f0       	breq	.+12     	; 0x3af4 <vfprintf+0x126>
    3ae8:	93 37       	cpi	r25, 0x73	; 115
    3aea:	79 f0       	breq	.+30     	; 0x3b0a <vfprintf+0x13c>
    3aec:	93 35       	cpi	r25, 0x53	; 83
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <vfprintf+0x124>
    3af0:	56 c0       	rjmp	.+172    	; 0x3b9e <vfprintf+0x1d0>
    3af2:	20 c0       	rjmp	.+64     	; 0x3b34 <vfprintf+0x166>
    3af4:	f5 01       	movw	r30, r10
    3af6:	80 81       	ld	r24, Z
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	42 e0       	ldi	r20, 0x02	; 2
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	a4 0e       	add	r10, r20
    3b00:	b5 1e       	adc	r11, r21
    3b02:	61 01       	movw	r12, r2
    3b04:	01 e0       	ldi	r16, 0x01	; 1
    3b06:	10 e0       	ldi	r17, 0x00	; 0
    3b08:	12 c0       	rjmp	.+36     	; 0x3b2e <vfprintf+0x160>
    3b0a:	f5 01       	movw	r30, r10
    3b0c:	c0 80       	ld	r12, Z
    3b0e:	d1 80       	ldd	r13, Z+1	; 0x01
    3b10:	f6 fc       	sbrc	r15, 6
    3b12:	03 c0       	rjmp	.+6      	; 0x3b1a <vfprintf+0x14c>
    3b14:	6f ef       	ldi	r22, 0xFF	; 255
    3b16:	7f ef       	ldi	r23, 0xFF	; 255
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <vfprintf+0x150>
    3b1a:	69 2d       	mov	r22, r9
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	42 e0       	ldi	r20, 0x02	; 2
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	a4 0e       	add	r10, r20
    3b24:	b5 1e       	adc	r11, r21
    3b26:	c6 01       	movw	r24, r12
    3b28:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <strnlen>
    3b2c:	8c 01       	movw	r16, r24
    3b2e:	5f e7       	ldi	r21, 0x7F	; 127
    3b30:	f5 22       	and	r15, r21
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <vfprintf+0x18e>
    3b34:	f5 01       	movw	r30, r10
    3b36:	c0 80       	ld	r12, Z
    3b38:	d1 80       	ldd	r13, Z+1	; 0x01
    3b3a:	f6 fc       	sbrc	r15, 6
    3b3c:	03 c0       	rjmp	.+6      	; 0x3b44 <vfprintf+0x176>
    3b3e:	6f ef       	ldi	r22, 0xFF	; 255
    3b40:	7f ef       	ldi	r23, 0xFF	; 255
    3b42:	02 c0       	rjmp	.+4      	; 0x3b48 <vfprintf+0x17a>
    3b44:	69 2d       	mov	r22, r9
    3b46:	70 e0       	ldi	r23, 0x00	; 0
    3b48:	42 e0       	ldi	r20, 0x02	; 2
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	a4 0e       	add	r10, r20
    3b4e:	b5 1e       	adc	r11, r21
    3b50:	c6 01       	movw	r24, r12
    3b52:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <strnlen_P>
    3b56:	8c 01       	movw	r16, r24
    3b58:	50 e8       	ldi	r21, 0x80	; 128
    3b5a:	f5 2a       	or	r15, r21
    3b5c:	f3 fe       	sbrs	r15, 3
    3b5e:	07 c0       	rjmp	.+14     	; 0x3b6e <vfprintf+0x1a0>
    3b60:	1a c0       	rjmp	.+52     	; 0x3b96 <vfprintf+0x1c8>
    3b62:	80 e2       	ldi	r24, 0x20	; 32
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	b3 01       	movw	r22, r6
    3b68:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3b6c:	ea 94       	dec	r14
    3b6e:	8e 2d       	mov	r24, r14
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	08 17       	cp	r16, r24
    3b74:	19 07       	cpc	r17, r25
    3b76:	a8 f3       	brcs	.-22     	; 0x3b62 <vfprintf+0x194>
    3b78:	0e c0       	rjmp	.+28     	; 0x3b96 <vfprintf+0x1c8>
    3b7a:	f6 01       	movw	r30, r12
    3b7c:	f7 fc       	sbrc	r15, 7
    3b7e:	85 91       	lpm	r24, Z+
    3b80:	f7 fe       	sbrs	r15, 7
    3b82:	81 91       	ld	r24, Z+
    3b84:	6f 01       	movw	r12, r30
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	b3 01       	movw	r22, r6
    3b8a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3b8e:	e1 10       	cpse	r14, r1
    3b90:	ea 94       	dec	r14
    3b92:	01 50       	subi	r16, 0x01	; 1
    3b94:	10 40       	sbci	r17, 0x00	; 0
    3b96:	01 15       	cp	r16, r1
    3b98:	11 05       	cpc	r17, r1
    3b9a:	79 f7       	brne	.-34     	; 0x3b7a <vfprintf+0x1ac>
    3b9c:	ea c0       	rjmp	.+468    	; 0x3d72 <vfprintf+0x3a4>
    3b9e:	94 36       	cpi	r25, 0x64	; 100
    3ba0:	11 f0       	breq	.+4      	; 0x3ba6 <vfprintf+0x1d8>
    3ba2:	99 36       	cpi	r25, 0x69	; 105
    3ba4:	69 f5       	brne	.+90     	; 0x3c00 <vfprintf+0x232>
    3ba6:	f7 fe       	sbrs	r15, 7
    3ba8:	08 c0       	rjmp	.+16     	; 0x3bba <vfprintf+0x1ec>
    3baa:	f5 01       	movw	r30, r10
    3bac:	20 81       	ld	r18, Z
    3bae:	31 81       	ldd	r19, Z+1	; 0x01
    3bb0:	42 81       	ldd	r20, Z+2	; 0x02
    3bb2:	53 81       	ldd	r21, Z+3	; 0x03
    3bb4:	84 e0       	ldi	r24, 0x04	; 4
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0a c0       	rjmp	.+20     	; 0x3bce <vfprintf+0x200>
    3bba:	f5 01       	movw	r30, r10
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	9c 01       	movw	r18, r24
    3bc2:	44 27       	eor	r20, r20
    3bc4:	37 fd       	sbrc	r19, 7
    3bc6:	40 95       	com	r20
    3bc8:	54 2f       	mov	r21, r20
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	a8 0e       	add	r10, r24
    3bd0:	b9 1e       	adc	r11, r25
    3bd2:	9f e6       	ldi	r25, 0x6F	; 111
    3bd4:	f9 22       	and	r15, r25
    3bd6:	57 ff       	sbrs	r21, 7
    3bd8:	09 c0       	rjmp	.+18     	; 0x3bec <vfprintf+0x21e>
    3bda:	50 95       	com	r21
    3bdc:	40 95       	com	r20
    3bde:	30 95       	com	r19
    3be0:	21 95       	neg	r18
    3be2:	3f 4f       	sbci	r19, 0xFF	; 255
    3be4:	4f 4f       	sbci	r20, 0xFF	; 255
    3be6:	5f 4f       	sbci	r21, 0xFF	; 255
    3be8:	e0 e8       	ldi	r30, 0x80	; 128
    3bea:	fe 2a       	or	r15, r30
    3bec:	ca 01       	movw	r24, r20
    3bee:	b9 01       	movw	r22, r18
    3bf0:	a1 01       	movw	r20, r2
    3bf2:	2a e0       	ldi	r18, 0x0A	; 10
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__ultoa_invert>
    3bfa:	d8 2e       	mov	r13, r24
    3bfc:	d2 18       	sub	r13, r2
    3bfe:	40 c0       	rjmp	.+128    	; 0x3c80 <vfprintf+0x2b2>
    3c00:	95 37       	cpi	r25, 0x75	; 117
    3c02:	29 f4       	brne	.+10     	; 0x3c0e <vfprintf+0x240>
    3c04:	1f 2d       	mov	r17, r15
    3c06:	1f 7e       	andi	r17, 0xEF	; 239
    3c08:	2a e0       	ldi	r18, 0x0A	; 10
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	1d c0       	rjmp	.+58     	; 0x3c48 <vfprintf+0x27a>
    3c0e:	1f 2d       	mov	r17, r15
    3c10:	19 7f       	andi	r17, 0xF9	; 249
    3c12:	9f 36       	cpi	r25, 0x6F	; 111
    3c14:	61 f0       	breq	.+24     	; 0x3c2e <vfprintf+0x260>
    3c16:	90 37       	cpi	r25, 0x70	; 112
    3c18:	20 f4       	brcc	.+8      	; 0x3c22 <vfprintf+0x254>
    3c1a:	98 35       	cpi	r25, 0x58	; 88
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <vfprintf+0x252>
    3c1e:	ac c0       	rjmp	.+344    	; 0x3d78 <vfprintf+0x3aa>
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <vfprintf+0x272>
    3c22:	90 37       	cpi	r25, 0x70	; 112
    3c24:	39 f0       	breq	.+14     	; 0x3c34 <vfprintf+0x266>
    3c26:	98 37       	cpi	r25, 0x78	; 120
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <vfprintf+0x25e>
    3c2a:	a6 c0       	rjmp	.+332    	; 0x3d78 <vfprintf+0x3aa>
    3c2c:	04 c0       	rjmp	.+8      	; 0x3c36 <vfprintf+0x268>
    3c2e:	28 e0       	ldi	r18, 0x08	; 8
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	0a c0       	rjmp	.+20     	; 0x3c48 <vfprintf+0x27a>
    3c34:	10 61       	ori	r17, 0x10	; 16
    3c36:	14 fd       	sbrc	r17, 4
    3c38:	14 60       	ori	r17, 0x04	; 4
    3c3a:	20 e1       	ldi	r18, 0x10	; 16
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	04 c0       	rjmp	.+8      	; 0x3c48 <vfprintf+0x27a>
    3c40:	14 fd       	sbrc	r17, 4
    3c42:	16 60       	ori	r17, 0x06	; 6
    3c44:	20 e1       	ldi	r18, 0x10	; 16
    3c46:	32 e0       	ldi	r19, 0x02	; 2
    3c48:	17 ff       	sbrs	r17, 7
    3c4a:	08 c0       	rjmp	.+16     	; 0x3c5c <vfprintf+0x28e>
    3c4c:	f5 01       	movw	r30, r10
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	44 e0       	ldi	r20, 0x04	; 4
    3c58:	50 e0       	ldi	r21, 0x00	; 0
    3c5a:	08 c0       	rjmp	.+16     	; 0x3c6c <vfprintf+0x29e>
    3c5c:	f5 01       	movw	r30, r10
    3c5e:	80 81       	ld	r24, Z
    3c60:	91 81       	ldd	r25, Z+1	; 0x01
    3c62:	bc 01       	movw	r22, r24
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	42 e0       	ldi	r20, 0x02	; 2
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	a4 0e       	add	r10, r20
    3c6e:	b5 1e       	adc	r11, r21
    3c70:	a1 01       	movw	r20, r2
    3c72:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__ultoa_invert>
    3c76:	d8 2e       	mov	r13, r24
    3c78:	d2 18       	sub	r13, r2
    3c7a:	8f e7       	ldi	r24, 0x7F	; 127
    3c7c:	f8 2e       	mov	r15, r24
    3c7e:	f1 22       	and	r15, r17
    3c80:	f6 fe       	sbrs	r15, 6
    3c82:	0b c0       	rjmp	.+22     	; 0x3c9a <vfprintf+0x2cc>
    3c84:	5e ef       	ldi	r21, 0xFE	; 254
    3c86:	f5 22       	and	r15, r21
    3c88:	d9 14       	cp	r13, r9
    3c8a:	38 f4       	brcc	.+14     	; 0x3c9a <vfprintf+0x2cc>
    3c8c:	f4 fe       	sbrs	r15, 4
    3c8e:	07 c0       	rjmp	.+14     	; 0x3c9e <vfprintf+0x2d0>
    3c90:	f2 fc       	sbrc	r15, 2
    3c92:	05 c0       	rjmp	.+10     	; 0x3c9e <vfprintf+0x2d0>
    3c94:	8f ee       	ldi	r24, 0xEF	; 239
    3c96:	f8 22       	and	r15, r24
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <vfprintf+0x2d0>
    3c9a:	1d 2d       	mov	r17, r13
    3c9c:	01 c0       	rjmp	.+2      	; 0x3ca0 <vfprintf+0x2d2>
    3c9e:	19 2d       	mov	r17, r9
    3ca0:	f4 fe       	sbrs	r15, 4
    3ca2:	0d c0       	rjmp	.+26     	; 0x3cbe <vfprintf+0x2f0>
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ed 0d       	add	r30, r13
    3ca8:	f1 1d       	adc	r31, r1
    3caa:	80 81       	ld	r24, Z
    3cac:	80 33       	cpi	r24, 0x30	; 48
    3cae:	19 f4       	brne	.+6      	; 0x3cb6 <vfprintf+0x2e8>
    3cb0:	99 ee       	ldi	r25, 0xE9	; 233
    3cb2:	f9 22       	and	r15, r25
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <vfprintf+0x2f8>
    3cb6:	1f 5f       	subi	r17, 0xFF	; 255
    3cb8:	f2 fe       	sbrs	r15, 2
    3cba:	05 c0       	rjmp	.+10     	; 0x3cc6 <vfprintf+0x2f8>
    3cbc:	03 c0       	rjmp	.+6      	; 0x3cc4 <vfprintf+0x2f6>
    3cbe:	8f 2d       	mov	r24, r15
    3cc0:	86 78       	andi	r24, 0x86	; 134
    3cc2:	09 f0       	breq	.+2      	; 0x3cc6 <vfprintf+0x2f8>
    3cc4:	1f 5f       	subi	r17, 0xFF	; 255
    3cc6:	0f 2d       	mov	r16, r15
    3cc8:	f3 fc       	sbrc	r15, 3
    3cca:	14 c0       	rjmp	.+40     	; 0x3cf4 <vfprintf+0x326>
    3ccc:	f0 fe       	sbrs	r15, 0
    3cce:	0f c0       	rjmp	.+30     	; 0x3cee <vfprintf+0x320>
    3cd0:	1e 15       	cp	r17, r14
    3cd2:	10 f0       	brcs	.+4      	; 0x3cd8 <vfprintf+0x30a>
    3cd4:	9d 2c       	mov	r9, r13
    3cd6:	0b c0       	rjmp	.+22     	; 0x3cee <vfprintf+0x320>
    3cd8:	9d 2c       	mov	r9, r13
    3cda:	9e 0c       	add	r9, r14
    3cdc:	91 1a       	sub	r9, r17
    3cde:	1e 2d       	mov	r17, r14
    3ce0:	06 c0       	rjmp	.+12     	; 0x3cee <vfprintf+0x320>
    3ce2:	80 e2       	ldi	r24, 0x20	; 32
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	b3 01       	movw	r22, r6
    3ce8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3cec:	1f 5f       	subi	r17, 0xFF	; 255
    3cee:	1e 15       	cp	r17, r14
    3cf0:	c0 f3       	brcs	.-16     	; 0x3ce2 <vfprintf+0x314>
    3cf2:	04 c0       	rjmp	.+8      	; 0x3cfc <vfprintf+0x32e>
    3cf4:	1e 15       	cp	r17, r14
    3cf6:	10 f4       	brcc	.+4      	; 0x3cfc <vfprintf+0x32e>
    3cf8:	e1 1a       	sub	r14, r17
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <vfprintf+0x330>
    3cfc:	ee 24       	eor	r14, r14
    3cfe:	04 ff       	sbrs	r16, 4
    3d00:	0f c0       	rjmp	.+30     	; 0x3d20 <vfprintf+0x352>
    3d02:	80 e3       	ldi	r24, 0x30	; 48
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	b3 01       	movw	r22, r6
    3d08:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3d0c:	02 ff       	sbrs	r16, 2
    3d0e:	1d c0       	rjmp	.+58     	; 0x3d4a <vfprintf+0x37c>
    3d10:	01 fd       	sbrc	r16, 1
    3d12:	03 c0       	rjmp	.+6      	; 0x3d1a <vfprintf+0x34c>
    3d14:	88 e7       	ldi	r24, 0x78	; 120
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	0e c0       	rjmp	.+28     	; 0x3d36 <vfprintf+0x368>
    3d1a:	88 e5       	ldi	r24, 0x58	; 88
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	0b c0       	rjmp	.+22     	; 0x3d36 <vfprintf+0x368>
    3d20:	80 2f       	mov	r24, r16
    3d22:	86 78       	andi	r24, 0x86	; 134
    3d24:	91 f0       	breq	.+36     	; 0x3d4a <vfprintf+0x37c>
    3d26:	01 ff       	sbrs	r16, 1
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <vfprintf+0x360>
    3d2a:	8b e2       	ldi	r24, 0x2B	; 43
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <vfprintf+0x362>
    3d2e:	80 e2       	ldi	r24, 0x20	; 32
    3d30:	f7 fc       	sbrc	r15, 7
    3d32:	8d e2       	ldi	r24, 0x2D	; 45
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	b3 01       	movw	r22, r6
    3d38:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3d3c:	06 c0       	rjmp	.+12     	; 0x3d4a <vfprintf+0x37c>
    3d3e:	80 e3       	ldi	r24, 0x30	; 48
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	b3 01       	movw	r22, r6
    3d44:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3d48:	9a 94       	dec	r9
    3d4a:	d9 14       	cp	r13, r9
    3d4c:	c0 f3       	brcs	.-16     	; 0x3d3e <vfprintf+0x370>
    3d4e:	da 94       	dec	r13
    3d50:	f1 01       	movw	r30, r2
    3d52:	ed 0d       	add	r30, r13
    3d54:	f1 1d       	adc	r31, r1
    3d56:	80 81       	ld	r24, Z
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	b3 01       	movw	r22, r6
    3d5c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3d60:	dd 20       	and	r13, r13
    3d62:	a9 f7       	brne	.-22     	; 0x3d4e <vfprintf+0x380>
    3d64:	06 c0       	rjmp	.+12     	; 0x3d72 <vfprintf+0x3a4>
    3d66:	80 e2       	ldi	r24, 0x20	; 32
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	b3 01       	movw	r22, r6
    3d6c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <fputc>
    3d70:	ea 94       	dec	r14
    3d72:	ee 20       	and	r14, r14
    3d74:	c1 f7       	brne	.-16     	; 0x3d66 <vfprintf+0x398>
    3d76:	43 ce       	rjmp	.-890    	; 0x39fe <vfprintf+0x30>
    3d78:	f3 01       	movw	r30, r6
    3d7a:	66 81       	ldd	r22, Z+6	; 0x06
    3d7c:	77 81       	ldd	r23, Z+7	; 0x07
    3d7e:	cb 01       	movw	r24, r22
    3d80:	2b 96       	adiw	r28, 0x0b	; 11
    3d82:	e2 e1       	ldi	r30, 0x12	; 18
    3d84:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__epilogue_restores__>

00003d88 <strnlen_P>:
    3d88:	fc 01       	movw	r30, r24
    3d8a:	05 90       	lpm	r0, Z+
    3d8c:	61 50       	subi	r22, 0x01	; 1
    3d8e:	70 40       	sbci	r23, 0x00	; 0
    3d90:	01 10       	cpse	r0, r1
    3d92:	d8 f7       	brcc	.-10     	; 0x3d8a <strnlen_P+0x2>
    3d94:	80 95       	com	r24
    3d96:	90 95       	com	r25
    3d98:	8e 0f       	add	r24, r30
    3d9a:	9f 1f       	adc	r25, r31
    3d9c:	08 95       	ret

00003d9e <strnlen>:
    3d9e:	fc 01       	movw	r30, r24
    3da0:	61 50       	subi	r22, 0x01	; 1
    3da2:	70 40       	sbci	r23, 0x00	; 0
    3da4:	01 90       	ld	r0, Z+
    3da6:	01 10       	cpse	r0, r1
    3da8:	d8 f7       	brcc	.-10     	; 0x3da0 <strnlen+0x2>
    3daa:	80 95       	com	r24
    3dac:	90 95       	com	r25
    3dae:	8e 0f       	add	r24, r30
    3db0:	9f 1f       	adc	r25, r31
    3db2:	08 95       	ret

00003db4 <fputc>:
    3db4:	0f 93       	push	r16
    3db6:	1f 93       	push	r17
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	8c 01       	movw	r16, r24
    3dbe:	eb 01       	movw	r28, r22
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	81 ff       	sbrs	r24, 1
    3dc4:	1b c0       	rjmp	.+54     	; 0x3dfc <fputc+0x48>
    3dc6:	82 ff       	sbrs	r24, 2
    3dc8:	0d c0       	rjmp	.+26     	; 0x3de4 <fputc+0x30>
    3dca:	2e 81       	ldd	r18, Y+6	; 0x06
    3dcc:	3f 81       	ldd	r19, Y+7	; 0x07
    3dce:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd2:	28 17       	cp	r18, r24
    3dd4:	39 07       	cpc	r19, r25
    3dd6:	64 f4       	brge	.+24     	; 0x3df0 <fputc+0x3c>
    3dd8:	e8 81       	ld	r30, Y
    3dda:	f9 81       	ldd	r31, Y+1	; 0x01
    3ddc:	01 93       	st	Z+, r16
    3dde:	f9 83       	std	Y+1, r31	; 0x01
    3de0:	e8 83       	st	Y, r30
    3de2:	06 c0       	rjmp	.+12     	; 0x3df0 <fputc+0x3c>
    3de4:	e8 85       	ldd	r30, Y+8	; 0x08
    3de6:	f9 85       	ldd	r31, Y+9	; 0x09
    3de8:	80 2f       	mov	r24, r16
    3dea:	09 95       	icall
    3dec:	89 2b       	or	r24, r25
    3dee:	31 f4       	brne	.+12     	; 0x3dfc <fputc+0x48>
    3df0:	8e 81       	ldd	r24, Y+6	; 0x06
    3df2:	9f 81       	ldd	r25, Y+7	; 0x07
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	9f 83       	std	Y+7, r25	; 0x07
    3df8:	8e 83       	std	Y+6, r24	; 0x06
    3dfa:	02 c0       	rjmp	.+4      	; 0x3e00 <fputc+0x4c>
    3dfc:	0f ef       	ldi	r16, 0xFF	; 255
    3dfe:	1f ef       	ldi	r17, 0xFF	; 255
    3e00:	c8 01       	movw	r24, r16
    3e02:	df 91       	pop	r29
    3e04:	cf 91       	pop	r28
    3e06:	1f 91       	pop	r17
    3e08:	0f 91       	pop	r16
    3e0a:	08 95       	ret

00003e0c <__ultoa_invert>:
    3e0c:	fa 01       	movw	r30, r20
    3e0e:	aa 27       	eor	r26, r26
    3e10:	28 30       	cpi	r18, 0x08	; 8
    3e12:	51 f1       	breq	.+84     	; 0x3e68 <__ultoa_invert+0x5c>
    3e14:	20 31       	cpi	r18, 0x10	; 16
    3e16:	81 f1       	breq	.+96     	; 0x3e78 <__ultoa_invert+0x6c>
    3e18:	e8 94       	clt
    3e1a:	6f 93       	push	r22
    3e1c:	6e 7f       	andi	r22, 0xFE	; 254
    3e1e:	6e 5f       	subi	r22, 0xFE	; 254
    3e20:	7f 4f       	sbci	r23, 0xFF	; 255
    3e22:	8f 4f       	sbci	r24, 0xFF	; 255
    3e24:	9f 4f       	sbci	r25, 0xFF	; 255
    3e26:	af 4f       	sbci	r26, 0xFF	; 255
    3e28:	b1 e0       	ldi	r27, 0x01	; 1
    3e2a:	3e d0       	rcall	.+124    	; 0x3ea8 <__ultoa_invert+0x9c>
    3e2c:	b4 e0       	ldi	r27, 0x04	; 4
    3e2e:	3c d0       	rcall	.+120    	; 0x3ea8 <__ultoa_invert+0x9c>
    3e30:	67 0f       	add	r22, r23
    3e32:	78 1f       	adc	r23, r24
    3e34:	89 1f       	adc	r24, r25
    3e36:	9a 1f       	adc	r25, r26
    3e38:	a1 1d       	adc	r26, r1
    3e3a:	68 0f       	add	r22, r24
    3e3c:	79 1f       	adc	r23, r25
    3e3e:	8a 1f       	adc	r24, r26
    3e40:	91 1d       	adc	r25, r1
    3e42:	a1 1d       	adc	r26, r1
    3e44:	6a 0f       	add	r22, r26
    3e46:	71 1d       	adc	r23, r1
    3e48:	81 1d       	adc	r24, r1
    3e4a:	91 1d       	adc	r25, r1
    3e4c:	a1 1d       	adc	r26, r1
    3e4e:	20 d0       	rcall	.+64     	; 0x3e90 <__ultoa_invert+0x84>
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <__ultoa_invert+0x48>
    3e52:	68 94       	set
    3e54:	3f 91       	pop	r19
    3e56:	2a e0       	ldi	r18, 0x0A	; 10
    3e58:	26 9f       	mul	r18, r22
    3e5a:	11 24       	eor	r1, r1
    3e5c:	30 19       	sub	r19, r0
    3e5e:	30 5d       	subi	r19, 0xD0	; 208
    3e60:	31 93       	st	Z+, r19
    3e62:	de f6       	brtc	.-74     	; 0x3e1a <__ultoa_invert+0xe>
    3e64:	cf 01       	movw	r24, r30
    3e66:	08 95       	ret
    3e68:	46 2f       	mov	r20, r22
    3e6a:	47 70       	andi	r20, 0x07	; 7
    3e6c:	40 5d       	subi	r20, 0xD0	; 208
    3e6e:	41 93       	st	Z+, r20
    3e70:	b3 e0       	ldi	r27, 0x03	; 3
    3e72:	0f d0       	rcall	.+30     	; 0x3e92 <__ultoa_invert+0x86>
    3e74:	c9 f7       	brne	.-14     	; 0x3e68 <__ultoa_invert+0x5c>
    3e76:	f6 cf       	rjmp	.-20     	; 0x3e64 <__ultoa_invert+0x58>
    3e78:	46 2f       	mov	r20, r22
    3e7a:	4f 70       	andi	r20, 0x0F	; 15
    3e7c:	40 5d       	subi	r20, 0xD0	; 208
    3e7e:	4a 33       	cpi	r20, 0x3A	; 58
    3e80:	18 f0       	brcs	.+6      	; 0x3e88 <__ultoa_invert+0x7c>
    3e82:	49 5d       	subi	r20, 0xD9	; 217
    3e84:	31 fd       	sbrc	r19, 1
    3e86:	40 52       	subi	r20, 0x20	; 32
    3e88:	41 93       	st	Z+, r20
    3e8a:	02 d0       	rcall	.+4      	; 0x3e90 <__ultoa_invert+0x84>
    3e8c:	a9 f7       	brne	.-22     	; 0x3e78 <__ultoa_invert+0x6c>
    3e8e:	ea cf       	rjmp	.-44     	; 0x3e64 <__ultoa_invert+0x58>
    3e90:	b4 e0       	ldi	r27, 0x04	; 4
    3e92:	a6 95       	lsr	r26
    3e94:	97 95       	ror	r25
    3e96:	87 95       	ror	r24
    3e98:	77 95       	ror	r23
    3e9a:	67 95       	ror	r22
    3e9c:	ba 95       	dec	r27
    3e9e:	c9 f7       	brne	.-14     	; 0x3e92 <__ultoa_invert+0x86>
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	61 05       	cpc	r22, r1
    3ea4:	71 05       	cpc	r23, r1
    3ea6:	08 95       	ret
    3ea8:	9b 01       	movw	r18, r22
    3eaa:	ac 01       	movw	r20, r24
    3eac:	0a 2e       	mov	r0, r26
    3eae:	06 94       	lsr	r0
    3eb0:	57 95       	ror	r21
    3eb2:	47 95       	ror	r20
    3eb4:	37 95       	ror	r19
    3eb6:	27 95       	ror	r18
    3eb8:	ba 95       	dec	r27
    3eba:	c9 f7       	brne	.-14     	; 0x3eae <__ultoa_invert+0xa2>
    3ebc:	62 0f       	add	r22, r18
    3ebe:	73 1f       	adc	r23, r19
    3ec0:	84 1f       	adc	r24, r20
    3ec2:	95 1f       	adc	r25, r21
    3ec4:	a0 1d       	adc	r26, r0
    3ec6:	08 95       	ret

00003ec8 <__mulsi3>:
    3ec8:	62 9f       	mul	r22, r18
    3eca:	d0 01       	movw	r26, r0
    3ecc:	73 9f       	mul	r23, r19
    3ece:	f0 01       	movw	r30, r0
    3ed0:	82 9f       	mul	r24, r18
    3ed2:	e0 0d       	add	r30, r0
    3ed4:	f1 1d       	adc	r31, r1
    3ed6:	64 9f       	mul	r22, r20
    3ed8:	e0 0d       	add	r30, r0
    3eda:	f1 1d       	adc	r31, r1
    3edc:	92 9f       	mul	r25, r18
    3ede:	f0 0d       	add	r31, r0
    3ee0:	83 9f       	mul	r24, r19
    3ee2:	f0 0d       	add	r31, r0
    3ee4:	74 9f       	mul	r23, r20
    3ee6:	f0 0d       	add	r31, r0
    3ee8:	65 9f       	mul	r22, r21
    3eea:	f0 0d       	add	r31, r0
    3eec:	99 27       	eor	r25, r25
    3eee:	72 9f       	mul	r23, r18
    3ef0:	b0 0d       	add	r27, r0
    3ef2:	e1 1d       	adc	r30, r1
    3ef4:	f9 1f       	adc	r31, r25
    3ef6:	63 9f       	mul	r22, r19
    3ef8:	b0 0d       	add	r27, r0
    3efa:	e1 1d       	adc	r30, r1
    3efc:	f9 1f       	adc	r31, r25
    3efe:	bd 01       	movw	r22, r26
    3f00:	cf 01       	movw	r24, r30
    3f02:	11 24       	eor	r1, r1
    3f04:	08 95       	ret

00003f06 <__divmodsi4>:
    3f06:	97 fb       	bst	r25, 7
    3f08:	09 2e       	mov	r0, r25
    3f0a:	05 26       	eor	r0, r21
    3f0c:	0e d0       	rcall	.+28     	; 0x3f2a <__divmodsi4_neg1>
    3f0e:	57 fd       	sbrc	r21, 7
    3f10:	04 d0       	rcall	.+8      	; 0x3f1a <__divmodsi4_neg2>
    3f12:	4b d0       	rcall	.+150    	; 0x3faa <__udivmodsi4>
    3f14:	0a d0       	rcall	.+20     	; 0x3f2a <__divmodsi4_neg1>
    3f16:	00 1c       	adc	r0, r0
    3f18:	38 f4       	brcc	.+14     	; 0x3f28 <__divmodsi4_exit>

00003f1a <__divmodsi4_neg2>:
    3f1a:	50 95       	com	r21
    3f1c:	40 95       	com	r20
    3f1e:	30 95       	com	r19
    3f20:	21 95       	neg	r18
    3f22:	3f 4f       	sbci	r19, 0xFF	; 255
    3f24:	4f 4f       	sbci	r20, 0xFF	; 255
    3f26:	5f 4f       	sbci	r21, 0xFF	; 255

00003f28 <__divmodsi4_exit>:
    3f28:	08 95       	ret

00003f2a <__divmodsi4_neg1>:
    3f2a:	f6 f7       	brtc	.-4      	; 0x3f28 <__divmodsi4_exit>
    3f2c:	90 95       	com	r25
    3f2e:	80 95       	com	r24
    3f30:	70 95       	com	r23
    3f32:	61 95       	neg	r22
    3f34:	7f 4f       	sbci	r23, 0xFF	; 255
    3f36:	8f 4f       	sbci	r24, 0xFF	; 255
    3f38:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3a:	08 95       	ret

00003f3c <__prologue_saves__>:
    3f3c:	2f 92       	push	r2
    3f3e:	3f 92       	push	r3
    3f40:	4f 92       	push	r4
    3f42:	5f 92       	push	r5
    3f44:	6f 92       	push	r6
    3f46:	7f 92       	push	r7
    3f48:	8f 92       	push	r8
    3f4a:	9f 92       	push	r9
    3f4c:	af 92       	push	r10
    3f4e:	bf 92       	push	r11
    3f50:	cf 92       	push	r12
    3f52:	df 92       	push	r13
    3f54:	ef 92       	push	r14
    3f56:	ff 92       	push	r15
    3f58:	0f 93       	push	r16
    3f5a:	1f 93       	push	r17
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	ca 1b       	sub	r28, r26
    3f66:	db 0b       	sbc	r29, r27
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	f8 94       	cli
    3f6c:	de bf       	out	0x3e, r29	; 62
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	09 94       	ijmp

00003f74 <__epilogue_restores__>:
    3f74:	2a 88       	ldd	r2, Y+18	; 0x12
    3f76:	39 88       	ldd	r3, Y+17	; 0x11
    3f78:	48 88       	ldd	r4, Y+16	; 0x10
    3f7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f80:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f82:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f84:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f86:	b9 84       	ldd	r11, Y+9	; 0x09
    3f88:	c8 84       	ldd	r12, Y+8	; 0x08
    3f8a:	df 80       	ldd	r13, Y+7	; 0x07
    3f8c:	ee 80       	ldd	r14, Y+6	; 0x06
    3f8e:	fd 80       	ldd	r15, Y+5	; 0x05
    3f90:	0c 81       	ldd	r16, Y+4	; 0x04
    3f92:	1b 81       	ldd	r17, Y+3	; 0x03
    3f94:	aa 81       	ldd	r26, Y+2	; 0x02
    3f96:	b9 81       	ldd	r27, Y+1	; 0x01
    3f98:	ce 0f       	add	r28, r30
    3f9a:	d1 1d       	adc	r29, r1
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	0f be       	out	0x3f, r0	; 63
    3fa4:	cd bf       	out	0x3d, r28	; 61
    3fa6:	ed 01       	movw	r28, r26
    3fa8:	08 95       	ret

00003faa <__udivmodsi4>:
    3faa:	a1 e2       	ldi	r26, 0x21	; 33
    3fac:	1a 2e       	mov	r1, r26
    3fae:	aa 1b       	sub	r26, r26
    3fb0:	bb 1b       	sub	r27, r27
    3fb2:	fd 01       	movw	r30, r26
    3fb4:	0d c0       	rjmp	.+26     	; 0x3fd0 <__udivmodsi4_ep>

00003fb6 <__udivmodsi4_loop>:
    3fb6:	aa 1f       	adc	r26, r26
    3fb8:	bb 1f       	adc	r27, r27
    3fba:	ee 1f       	adc	r30, r30
    3fbc:	ff 1f       	adc	r31, r31
    3fbe:	a2 17       	cp	r26, r18
    3fc0:	b3 07       	cpc	r27, r19
    3fc2:	e4 07       	cpc	r30, r20
    3fc4:	f5 07       	cpc	r31, r21
    3fc6:	20 f0       	brcs	.+8      	; 0x3fd0 <__udivmodsi4_ep>
    3fc8:	a2 1b       	sub	r26, r18
    3fca:	b3 0b       	sbc	r27, r19
    3fcc:	e4 0b       	sbc	r30, r20
    3fce:	f5 0b       	sbc	r31, r21

00003fd0 <__udivmodsi4_ep>:
    3fd0:	66 1f       	adc	r22, r22
    3fd2:	77 1f       	adc	r23, r23
    3fd4:	88 1f       	adc	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	1a 94       	dec	r1
    3fda:	69 f7       	brne	.-38     	; 0x3fb6 <__udivmodsi4_loop>
    3fdc:	60 95       	com	r22
    3fde:	70 95       	com	r23
    3fe0:	80 95       	com	r24
    3fe2:	90 95       	com	r25
    3fe4:	9b 01       	movw	r18, r22
    3fe6:	ac 01       	movw	r20, r24
    3fe8:	bd 01       	movw	r22, r26
    3fea:	cf 01       	movw	r24, r30
    3fec:	08 95       	ret

00003fee <_exit>:
    3fee:	f8 94       	cli

00003ff0 <__stop_program>:
    3ff0:	ff cf       	rjmp	.-2      	; 0x3ff0 <__stop_program>
