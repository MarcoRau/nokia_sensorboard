
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00003f5a  00003fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800242  00800242  00004130  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008a5  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033bb  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f08  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e14  00000000  00000000  00008e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  0000bc2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a80  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ec2  00000000  00000000  0000ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000fb7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	12 e0       	ldi	r17, 0x02	; 2
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	ea e5       	ldi	r30, 0x5A	; 90
     bcc:	ff e3       	ldi	r31, 0x3F	; 63
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	a2 34       	cpi	r26, 0x42	; 66
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	14 e0       	ldi	r17, 0x04	; 4
     bdc:	a2 e4       	ldi	r26, 0x42	; 66
     bde:	b2 e0       	ldi	r27, 0x02	; 2
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	a1 35       	cpi	r26, 0x51	; 81
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 3a 06 	call	0xc74	; 0xc74 <main>
     bee:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <__vector_11>:
}

uint8_t ms, ms10,ms100,sec,min,entprell, state;

ISR (TIMER1_COMPA_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
	ms10++;
     c04:	90 91 45 02 	lds	r25, 0x0245
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 45 02 	sts	0x0245, r25
	
	if(entprell != 0){
     c0e:	80 91 46 02 	lds	r24, 0x0246
     c12:	88 23       	and	r24, r24
     c14:	19 f0       	breq	.+6      	; 0xc1c <__vector_11+0x26>
		entprell--;
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 46 02 	sts	0x0246, r24
	}
	
	//10ms
	if(ms10 == 10){
     c1c:	9a 30       	cpi	r25, 0x0A	; 10
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__vector_11+0x38>
		ms10 = 0;
     c20:	10 92 45 02 	sts	0x0245, r1
		ms100++;
     c24:	80 91 48 02 	lds	r24, 0x0248
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 48 02 	sts	0x0248, r24
	}
	
	//100ms
    if(ms100 == 10){
     c2e:	80 91 48 02 	lds	r24, 0x0248
     c32:	8a 30       	cpi	r24, 0x0A	; 10
     c34:	39 f4       	brne	.+14     	; 0xc44 <__vector_11+0x4e>
		ms100 = 0;
     c36:	10 92 48 02 	sts	0x0248, r1
		sec++;
     c3a:	80 91 49 02 	lds	r24, 0x0249
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	80 93 49 02 	sts	0x0249, r24
	}
	
	//Minute
	if(sec == 10){
     c44:	90 91 49 02 	lds	r25, 0x0249
     c48:	9a 30       	cpi	r25, 0x0A	; 10
     c4a:	69 f4       	brne	.+26     	; 0xc66 <__vector_11+0x70>
		sec = 0;
     c4c:	10 92 49 02 	sts	0x0249, r1
		min++;
     c50:	80 91 47 02 	lds	r24, 0x0247
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 47 02 	sts	0x0247, r24
		if(state == 11){
     c5a:	80 91 44 02 	lds	r24, 0x0244
     c5e:	8b 30       	cpi	r24, 0x0B	; 11
     c60:	11 f4       	brne	.+4      	; 0xc66 <__vector_11+0x70>
			state = 10;
     c62:	90 93 44 02 	sts	0x0244, r25
		}
	}
}
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <main>:

int main(void)
{	
     c74:	2f 92       	push	r2
     c76:	3f 92       	push	r3
     c78:	4f 92       	push	r4
     c7a:	5f 92       	push	r5
     c7c:	6f 92       	push	r6
     c7e:	7f 92       	push	r7
     c80:	8f 92       	push	r8
     c82:	9f 92       	push	r9
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	aa 97       	sbiw	r28, 0x2a	; 42
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	char string[30] = " ";
     ca8:	80 e2       	ldi	r24, 0x20	; 32
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	ab 83       	std	Y+3, r26	; 0x03
     cb6:	bc 83       	std	Y+4, r27	; 0x04
     cb8:	fe 01       	movw	r30, r28
     cba:	35 96       	adiw	r30, 0x05	; 5
     cbc:	8a e1       	ldi	r24, 0x1A	; 26
     cbe:	df 01       	movw	r26, r30
     cc0:	1d 92       	st	X+, r1
     cc2:	8a 95       	dec	r24
     cc4:	e9 f7       	brne	.-6      	; 0xcc0 <main+0x4c>
	uint8_t minute		= 0;
	uint8_t second		= 0;
	
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
     cc6:	22 9a       	sbi	0x04, 2	; 4
	// PORTB |= (1<<PB2);
	PORTB &= ~(1<<PB2);
     cc8:	2a 98       	cbi	0x05, 2	; 5
	
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	// Taster 1-3
     cca:	8a b1       	in	r24, 0x0a	; 10
     ccc:	8b 79       	andi	r24, 0x9B	; 155
     cce:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	// PUllups für Taster einschalten
     cd0:	8b b1       	in	r24, 0x0b	; 11
     cd2:	84 66       	ori	r24, 0x64	; 100
     cd4:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<PD4); 							// T0 Counter Input
     cd6:	54 98       	cbi	0x0a, 4	; 10
	TCCR0B |= (1<<CS02) | (1<<CS01) | (1<<CS00);	// Counter 0 enabled clock on rising edge
     cd8:	85 b5       	in	r24, 0x25	; 37
     cda:	87 60       	ori	r24, 0x07	; 7
     cdc:	85 bd       	out	0x25, r24	; 37
	
	// Timer 1 Configuration
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
     cde:	8c e9       	ldi	r24, 0x9C	; 156
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	90 93 89 00 	sts	0x0089, r25
     ce6:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     cea:	80 91 81 00 	lds	r24, 0x0081
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     cf4:	80 91 6f 00 	lds	r24, 0x006F
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	80 93 6f 00 	sts	0x006F, r24
    // Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
     cfe:	80 91 81 00 	lds	r24, 0x0081
     d02:	85 60       	ori	r24, 0x05	; 5
     d04:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 1024 and start the timer

    sei();
     d08:	78 94       	sei
static void setup(void);

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     d0a:	0e 94 ef 0b 	call	0x17de	; 0x17de <glcd_init>
    sei();
    // enable interrupts
	
	setup();
	
	glcd_clear();
     d0e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
	glcd_write();
     d12:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
	glcd_tiny_set_font(Font5x7,5,7,32,127);
     d16:	88 e6       	ldi	r24, 0x68	; 104
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	65 e0       	ldi	r22, 0x05	; 5
     d1c:	47 e0       	ldi	r20, 0x07	; 7
     d1e:	20 e2       	ldi	r18, 0x20	; 32
     d20:	0f e7       	ldi	r16, 0x7F	; 127
     d22:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <glcd_tiny_set_font>
	glcd_clear_buffer();
     d26:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
	
	min = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 47 02 	sts	0x0247, r24
	
	TWIInit();
     d30:	0e 94 3f 19 	call	0x327e	; 0x327e <TWIInit>
	InitRTC();
     d34:	0e 94 8d 1a 	call	0x351a	; 0x351a <InitRTC>
     d38:	01 e0       	ldi	r16, 0x01	; 1
     d3a:	11 e0       	ldi	r17, 0x01	; 1
     d3c:	ee 24       	eor	r14, r14
     d3e:	1d a2       	std	Y+37, r1	; 0x25
     d40:	1c a2       	std	Y+36, r1	; 0x24
     d42:	1b a3       	std	Y+35, r17	; 0x23
     d44:	1a a3       	std	Y+34, r17	; 0x22
     d46:	33 24       	eor	r3, r3
     d48:	33 94       	inc	r3
     d4a:	19 a2       	std	Y+33, r1	; 0x21
     d4c:	18 a2       	std	Y+32, r1	; 0x20
     d4e:	1f 8e       	std	Y+31, r1	; 0x1f
						year_ten	= (RTCReadByte(0x06) & 0b00110000 ) >> 4;
						
						glcd_clear();
						glcd_clear_buffer();
						
						sprintf(string,"%d%d.%d%d.%d%d", date_ten , date_one, month_ten, month_one, year_ten, year_one);
     d50:	3e 01       	movw	r6, r28
     d52:	08 94       	sec
     d54:	61 1c       	adc	r6, r1
     d56:	71 1c       	adc	r7, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d58:	f0 e9       	ldi	r31, 0x90	; 144
     d5a:	4f 2e       	mov	r4, r31
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	5f 2e       	mov	r5, r31
	
	TWIInit();
	InitRTC();
	
	while( 1 ){
		switch( state ){
     d60:	11 30       	cpi	r17, 0x01	; 1
     d62:	09 f4       	brne	.+2      	; 0xd66 <main+0xf2>
     d64:	ae c0       	rjmp	.+348    	; 0xec2 <main+0x24e>
     d66:	11 30       	cpi	r17, 0x01	; 1
     d68:	30 f0       	brcs	.+12     	; 0xd76 <main+0x102>
     d6a:	12 30       	cpi	r17, 0x02	; 2
     d6c:	09 f4       	brne	.+2      	; 0xd70 <main+0xfc>
     d6e:	b7 c0       	rjmp	.+366    	; 0xede <main+0x26a>
     d70:	14 30       	cpi	r17, 0x04	; 4
     d72:	b1 f7       	brne	.-20     	; 0xd60 <main+0xec>
     d74:	df c1       	rjmp	.+958    	; 0x1134 <main+0x4c0>
			case menu:				// -----> MENU <-----
				if(!(PIND & (1<<PD5))){
     d76:	4d 99       	sbic	0x09, 5	; 9
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <main+0x124>
					choice++;
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
					if( choice == 5 ){
     d7c:	05 30       	cpi	r16, 0x05	; 5
     d7e:	09 f4       	brne	.+2      	; 0xd82 <main+0x10e>
     d80:	01 e0       	ldi	r16, 0x01	; 1
     d82:	86 eb       	ldi	r24, 0xB6	; 182
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	f2 01       	movw	r30, r4
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <main+0x114>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8e:	d9 f7       	brne	.-10     	; 0xd86 <main+0x112>
						choice = 1;
					}
					_delay_ms(delay_time);
					glcd_clear();
     d90:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
					glcd_clear_buffer();
     d94:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				}
				if(!(PIND & (1<<PD6))){
     d98:	4e 99       	sbic	0x09, 6	; 9
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <main+0x144>
					choice--;
     d9c:	01 50       	subi	r16, 0x01	; 1
					if( choice == 0 ){
     d9e:	09 f4       	brne	.+2      	; 0xda2 <main+0x12e>
     da0:	04 e0       	ldi	r16, 0x04	; 4
     da2:	86 eb       	ldi	r24, 0xB6	; 182
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	f2 01       	movw	r30, r4
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <main+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	d9 f7       	brne	.-10     	; 0xda6 <main+0x132>
						choice = 4;
					}
					_delay_ms(delay_time);
					glcd_clear();
     db0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
					glcd_clear_buffer();
     db4:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				}
				
				// Inhaltsverzeichnis
				sprintf(string,"OFF");
     db8:	c3 01       	movw	r24, r6
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,0,string);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	a3 01       	movw	r20, r6
     dc8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				glcd_write();
     dcc:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				sprintf(string,"Time");
     dd0:	c3 01       	movw	r24, r6
     dd2:	64 e0       	ldi	r22, 0x04	; 4
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,8,string);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	68 e0       	ldi	r22, 0x08	; 8
     dde:	a3 01       	movw	r20, r6
     de0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				glcd_write();
     de4:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				sprintf(string,"Alarm 1");
     de8:	c3 01       	movw	r24, r6
     dea:	69 e0       	ldi	r22, 0x09	; 9
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,16,string);
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	60 e1       	ldi	r22, 0x10	; 16
     df6:	a3 01       	movw	r20, r6
     df8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				glcd_write();
     dfc:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				sprintf(string,"Settings");
     e00:	c3 01       	movw	r24, r6
     e02:	61 e1       	ldi	r22, 0x11	; 17
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,24,string);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	68 e1       	ldi	r22, 0x18	; 24
     e0e:	a3 01       	movw	r20, r6
     e10:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				glcd_write();
     e14:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				
				// Auswahl von Inhaltsverzeichnis
				sprintf(string,"<");
     e18:	c3 01       	movw	r24, r6
     e1a:	6a e1       	ldi	r22, 0x1A	; 26
     e1c:	71 e0       	ldi	r23, 0x01	; 1
     e1e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				switch ( choice ){
     e22:	02 30       	cpi	r16, 0x02	; 2
     e24:	e1 f0       	breq	.+56     	; 0xe5e <main+0x1ea>
     e26:	03 30       	cpi	r16, 0x03	; 3
     e28:	20 f4       	brcc	.+8      	; 0xe32 <main+0x1be>
     e2a:	01 30       	cpi	r16, 0x01	; 1
     e2c:	09 f0       	breq	.+2      	; 0xe30 <main+0x1bc>
     e2e:	46 c0       	rjmp	.+140    	; 0xebc <main+0x248>
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <main+0x1ca>
     e32:	03 30       	cpi	r16, 0x03	; 3
     e34:	21 f1       	breq	.+72     	; 0xe7e <main+0x20a>
     e36:	04 30       	cpi	r16, 0x04	; 4
     e38:	09 f0       	breq	.+2      	; 0xe3c <main+0x1c8>
     e3a:	40 c0       	rjmp	.+128    	; 0xebc <main+0x248>
     e3c:	30 c0       	rjmp	.+96     	; 0xe9e <main+0x22a>
					case 1: // off
						glcd_draw_string_xy(78,0,string);
     e3e:	8e e4       	ldi	r24, 0x4E	; 78
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	a3 01       	movw	r20, r6
     e44:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						if(!(PIND & (1<<PD2))){
     e48:	4a 99       	sbic	0x09, 2	; 9
     e4a:	38 c0       	rjmp	.+112    	; 0xebc <main+0x248>
     e4c:	86 eb       	ldi	r24, 0xB6	; 182
     e4e:	93 e0       	ldi	r25, 0x03	; 3
     e50:	f2 01       	movw	r30, r4
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <main+0x1de>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e58:	d9 f7       	brne	.-10     	; 0xe50 <main+0x1dc>
     e5a:	11 e0       	ldi	r17, 0x01	; 1
     e5c:	2f c0       	rjmp	.+94     	; 0xebc <main+0x248>
							state = off;
							_delay_ms(delay_time);
						}
					break;
					case 2: // time
						glcd_draw_string_xy(78,8,string);
     e5e:	8e e4       	ldi	r24, 0x4E	; 78
     e60:	68 e0       	ldi	r22, 0x08	; 8
     e62:	a3 01       	movw	r20, r6
     e64:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						if(!(PIND & (1<<PD2))){
     e68:	4a 99       	sbic	0x09, 2	; 9
     e6a:	28 c0       	rjmp	.+80     	; 0xebc <main+0x248>
     e6c:	86 eb       	ldi	r24, 0xB6	; 182
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	f2 01       	movw	r30, r4
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <main+0x1fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	d9 f7       	brne	.-10     	; 0xe70 <main+0x1fc>
     e7a:	12 e0       	ldi	r17, 0x02	; 2
     e7c:	1f c0       	rjmp	.+62     	; 0xebc <main+0x248>
							state = time;
							_delay_ms(delay_time);
						}
					break;
					case 3: // alarm
						glcd_draw_string_xy(78,16,string);
     e7e:	8e e4       	ldi	r24, 0x4E	; 78
     e80:	60 e1       	ldi	r22, 0x10	; 16
     e82:	a3 01       	movw	r20, r6
     e84:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						if(!(PIND & (1<<PD2))){
     e88:	4a 99       	sbic	0x09, 2	; 9
     e8a:	18 c0       	rjmp	.+48     	; 0xebc <main+0x248>
     e8c:	86 eb       	ldi	r24, 0xB6	; 182
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	f2 01       	movw	r30, r4
     e92:	31 97       	sbiw	r30, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <main+0x21e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	d9 f7       	brne	.-10     	; 0xe90 <main+0x21c>
     e9a:	13 e0       	ldi	r17, 0x03	; 3
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <main+0x248>
							state = alarm1;
							_delay_ms(delay_time);
						}
					break;
					case 4: // settings
						glcd_draw_string_xy(78,24,string);
     e9e:	8e e4       	ldi	r24, 0x4E	; 78
     ea0:	68 e1       	ldi	r22, 0x18	; 24
     ea2:	a3 01       	movw	r20, r6
     ea4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						if(!(PIND & (1<<PD2))){
     ea8:	4a 99       	sbic	0x09, 2	; 9
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <main+0x248>
     eac:	86 eb       	ldi	r24, 0xB6	; 182
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	f2 01       	movw	r30, r4
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <main+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <main+0x23c>
     eba:	14 e0       	ldi	r17, 0x04	; 4
							state = settings;
							_delay_ms(delay_time);
						}
					break;
				}
				glcd_write();
     ebc:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
     ec0:	4f cf       	rjmp	.-354    	; 0xd60 <main+0xec>
			break;
			case off:				// -----> OFF <-----
				glcd_clear();
     ec2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
     ec6:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				
				while((PIND & (1<<PD2)));
     eca:	4a 99       	sbic	0x09, 2	; 9
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <main+0x256>
     ece:	86 eb       	ldi	r24, 0xB6	; 182
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	f2 01       	movw	r30, r4
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <main+0x260>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eda:	d9 f7       	brne	.-10     	; 0xed2 <main+0x25e>
     edc:	c3 c3       	rjmp	.+1926   	; 0x1664 <main+0x9f0>
				_delay_ms(delay_time);
				glcd_clear();
				glcd_clear_buffer();
			break;
			case time:				// -----> TIME <-----
				glcd_clear();
     ede:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
     ee2:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				for( circle = 0; circle < 1; ){
					
					sec_one	= (RTCReadByte(0x00) & 0b00001111 );
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     eec:	ef e0       	ldi	r30, 0x0F	; 15
     eee:	8e 2e       	mov	r8, r30
     ef0:	88 22       	and	r8, r24
					
					if( sec_one != sec_old ){
     ef2:	8e 14       	cp	r8, r14
     ef4:	09 f4       	brne	.+2      	; 0xef8 <main+0x284>
     ef6:	0e c1       	rjmp	.+540    	; 0x1114 <main+0x4a0>
						
						sec_ten	= (RTCReadByte(0x00) & 0b01110000 ) >> 4;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     efe:	8a a7       	std	Y+42, r24	; 0x2a
						min_one	= (RTCReadByte(0x01) & 0b00001111 );
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f06:	89 a7       	std	Y+41, r24	; 0x29
						min_ten	= (RTCReadByte(0x01) & 0b01110000 ) >> 4;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f0e:	88 a7       	std	Y+40, r24	; 0x28
						h_one	= (RTCReadByte(0x02) & 0b00001111 );
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f16:	28 2e       	mov	r2, r24
						h_ten	= (RTCReadByte(0x02) & 0b00110000 ) >> 4;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f1e:	8f a3       	std	Y+39, r24	; 0x27
						
						week		= (RTCReadByte(0x03) & 0b00000111 );
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f26:	8e a3       	std	Y+38, r24	; 0x26
						date_one	= (RTCReadByte(0x04) & 0b00001111 );
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f2e:	b8 2e       	mov	r11, r24
						date_ten	= (RTCReadByte(0x04) & 0b00110000 ) >> 4;
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f36:	08 2f       	mov	r16, r24
						month_one	= (RTCReadByte(0x05) & 0b00001111 );
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f3e:	a8 2e       	mov	r10, r24
						month_ten	= (RTCReadByte(0x05) & 0b00110000 ) >> 4;
     f40:	85 e0       	ldi	r24, 0x05	; 5
     f42:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f46:	e8 2e       	mov	r14, r24
						year_one	= (RTCReadByte(0x06) & 0b00001111 );
     f48:	86 e0       	ldi	r24, 0x06	; 6
     f4a:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f4e:	98 2e       	mov	r9, r24
						year_ten	= (RTCReadByte(0x06) & 0b00110000 ) >> 4;
     f50:	86 e0       	ldi	r24, 0x06	; 6
     f52:	0e 94 df 19 	call	0x33be	; 0x33be <RTCReadByte>
     f56:	c8 2e       	mov	r12, r24
						
						glcd_clear();
     f58:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
						glcd_clear_buffer();
     f5c:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
						
						sprintf(string,"%d%d.%d%d.%d%d", date_ten , date_one, month_ten, month_one, year_ten, year_one);
     f60:	8d b7       	in	r24, 0x3d	; 61
     f62:	9e b7       	in	r25, 0x3e	; 62
     f64:	40 97       	sbiw	r24, 0x10	; 16
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	9e bf       	out	0x3e, r25	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	8d bf       	out	0x3d, r24	; 61
     f70:	ed b7       	in	r30, 0x3d	; 61
     f72:	fe b7       	in	r31, 0x3e	; 62
     f74:	31 96       	adiw	r30, 0x01	; 1
     f76:	ad b7       	in	r26, 0x3d	; 61
     f78:	be b7       	in	r27, 0x3e	; 62
     f7a:	12 96       	adiw	r26, 0x02	; 2
     f7c:	7c 92       	st	X, r7
     f7e:	6e 92       	st	-X, r6
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	8c e1       	ldi	r24, 0x1C	; 28
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	93 83       	std	Z+3, r25	; 0x03
     f88:	82 83       	std	Z+2, r24	; 0x02
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	00 73       	andi	r16, 0x30	; 48
     f8e:	10 70       	andi	r17, 0x00	; 0
     f90:	74 e0       	ldi	r23, 0x04	; 4
     f92:	15 95       	asr	r17
     f94:	07 95       	ror	r16
     f96:	7a 95       	dec	r23
     f98:	e1 f7       	brne	.-8      	; 0xf92 <main+0x31e>
     f9a:	04 83       	std	Z+4, r16	; 0x04
     f9c:	15 82       	std	Z+5, r1	; 0x05
     f9e:	9f e0       	ldi	r25, 0x0F	; 15
     fa0:	b9 22       	and	r11, r25
     fa2:	b6 82       	std	Z+6, r11	; 0x06
     fa4:	17 82       	std	Z+7, r1	; 0x07
     fa6:	ff 24       	eor	r15, r15
     fa8:	a0 e3       	ldi	r26, 0x30	; 48
     faa:	ea 22       	and	r14, r26
     fac:	ff 24       	eor	r15, r15
     fae:	64 e0       	ldi	r22, 0x04	; 4
     fb0:	f5 94       	asr	r15
     fb2:	e7 94       	ror	r14
     fb4:	6a 95       	dec	r22
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <main+0x33c>
     fb8:	e0 86       	std	Z+8, r14	; 0x08
     fba:	11 86       	std	Z+9, r1	; 0x09
     fbc:	a9 22       	and	r10, r25
     fbe:	a2 86       	std	Z+10, r10	; 0x0a
     fc0:	13 86       	std	Z+11, r1	; 0x0b
     fc2:	dd 24       	eor	r13, r13
     fc4:	b0 e3       	ldi	r27, 0x30	; 48
     fc6:	cb 22       	and	r12, r27
     fc8:	dd 24       	eor	r13, r13
     fca:	54 e0       	ldi	r21, 0x04	; 4
     fcc:	d5 94       	asr	r13
     fce:	c7 94       	ror	r12
     fd0:	5a 95       	dec	r21
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <main+0x358>
     fd4:	c4 86       	std	Z+12, r12	; 0x0c
     fd6:	15 86       	std	Z+13, r1	; 0x0d
     fd8:	99 22       	and	r9, r25
     fda:	96 86       	std	Z+14, r9	; 0x0e
     fdc:	17 86       	std	Z+15, r1	; 0x0f
     fde:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
						glcd_draw_string_xy(0,0,string);
     fe2:	8d b7       	in	r24, 0x3d	; 61
     fe4:	9e b7       	in	r25, 0x3e	; 62
     fe6:	40 96       	adiw	r24, 0x10	; 16
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	9e bf       	out	0x3e, r25	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	8d bf       	out	0x3d, r24	; 61
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	a3 01       	movw	r20, r6
     ff8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						glcd_write();
     ffc:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
						
						switch ( week ){
    1000:	8e a1       	ldd	r24, Y+38	; 0x26
    1002:	87 70       	andi	r24, 0x07	; 7
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	e1 f0       	breq	.+56     	; 0x1040 <main+0x3cc>
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	38 f4       	brcc	.+14     	; 0x101a <main+0x3a6>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	81 f0       	breq	.+32     	; 0x1030 <main+0x3bc>
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	90 f4       	brcc	.+36     	; 0x1038 <main+0x3c4>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	29 f5       	brne	.+74     	; 0x1062 <main+0x3ee>
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <main+0x3b4>
    101a:	86 30       	cpi	r24, 0x06	; 6
    101c:	c9 f0       	breq	.+50     	; 0x1050 <main+0x3dc>
    101e:	86 30       	cpi	r24, 0x06	; 6
    1020:	98 f0       	brcs	.+38     	; 0x1048 <main+0x3d4>
    1022:	87 30       	cpi	r24, 0x07	; 7
    1024:	f1 f4       	brne	.+60     	; 0x1062 <main+0x3ee>
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <main+0x3e4>
							case 1:
								sprintf(string,"Monday   ");
    1028:	c3 01       	movw	r24, r6
    102a:	6b e2       	ldi	r22, 0x2B	; 43
    102c:	71 e0       	ldi	r23, 0x01	; 1
    102e:	17 c0       	rjmp	.+46     	; 0x105e <main+0x3ea>
							break;
							case 2:
								sprintf(string,"Tuesday  ");
    1030:	c3 01       	movw	r24, r6
    1032:	65 e3       	ldi	r22, 0x35	; 53
    1034:	71 e0       	ldi	r23, 0x01	; 1
    1036:	13 c0       	rjmp	.+38     	; 0x105e <main+0x3ea>
							break;
							case 3:
								sprintf(string,"Wednesday");
    1038:	c3 01       	movw	r24, r6
    103a:	6f e3       	ldi	r22, 0x3F	; 63
    103c:	71 e0       	ldi	r23, 0x01	; 1
    103e:	0f c0       	rjmp	.+30     	; 0x105e <main+0x3ea>
							break;
							case 4:
								sprintf(string,"Thursday ");
    1040:	c3 01       	movw	r24, r6
    1042:	69 e4       	ldi	r22, 0x49	; 73
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	0b c0       	rjmp	.+22     	; 0x105e <main+0x3ea>
							break;
							case 5:
								sprintf(string,"Friday   ");
    1048:	c3 01       	movw	r24, r6
    104a:	63 e5       	ldi	r22, 0x53	; 83
    104c:	71 e0       	ldi	r23, 0x01	; 1
    104e:	07 c0       	rjmp	.+14     	; 0x105e <main+0x3ea>
							break;
							case 6:
								sprintf(string,"Saturday ");
    1050:	c3 01       	movw	r24, r6
    1052:	6d e5       	ldi	r22, 0x5D	; 93
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	03 c0       	rjmp	.+6      	; 0x105e <main+0x3ea>
							break;
							case 7:
								sprintf(string,"Sunday   ");
    1058:	c3 01       	movw	r24, r6
    105a:	67 e6       	ldi	r22, 0x67	; 103
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
							break;
						}
						glcd_draw_string_xy(0,16,string);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	60 e1       	ldi	r22, 0x10	; 16
    1066:	a3 01       	movw	r20, r6
    1068:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						glcd_write();
    106c:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
						
						sprintf(string,"%d%d:%d%d:%d%d ", h_ten , h_one, min_ten, min_one, sec_ten, sec_one);
    1070:	ad b7       	in	r26, 0x3d	; 61
    1072:	be b7       	in	r27, 0x3e	; 62
    1074:	50 97       	sbiw	r26, 0x10	; 16
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	be bf       	out	0x3e, r27	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	ad bf       	out	0x3d, r26	; 61
    1080:	ed b7       	in	r30, 0x3d	; 61
    1082:	fe b7       	in	r31, 0x3e	; 62
    1084:	31 96       	adiw	r30, 0x01	; 1
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	7c 92       	st	X, r7
    108a:	6e 92       	st	-X, r6
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	81 e7       	ldi	r24, 0x71	; 113
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	93 83       	std	Z+3, r25	; 0x03
    1094:	82 83       	std	Z+2, r24	; 0x02
    1096:	af a1       	ldd	r26, Y+39	; 0x27
    1098:	8a 2f       	mov	r24, r26
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	80 73       	andi	r24, 0x30	; 48
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	44 e0       	ldi	r20, 0x04	; 4
    10a2:	95 95       	asr	r25
    10a4:	87 95       	ror	r24
    10a6:	4a 95       	dec	r20
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <main+0x42e>
    10aa:	84 83       	std	Z+4, r24	; 0x04
    10ac:	15 82       	std	Z+5, r1	; 0x05
    10ae:	bf e0       	ldi	r27, 0x0F	; 15
    10b0:	2b 22       	and	r2, r27
    10b2:	26 82       	std	Z+6, r2	; 0x06
    10b4:	17 82       	std	Z+7, r1	; 0x07
    10b6:	28 a5       	ldd	r18, Y+40	; 0x28
    10b8:	82 2f       	mov	r24, r18
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	80 77       	andi	r24, 0x70	; 112
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	34 e0       	ldi	r19, 0x04	; 4
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	3a 95       	dec	r19
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <main+0x44e>
    10ca:	80 87       	std	Z+8, r24	; 0x08
    10cc:	11 86       	std	Z+9, r1	; 0x09
    10ce:	89 a5       	ldd	r24, Y+41	; 0x29
    10d0:	8f 70       	andi	r24, 0x0F	; 15
    10d2:	82 87       	std	Z+10, r24	; 0x0a
    10d4:	13 86       	std	Z+11, r1	; 0x0b
    10d6:	aa a5       	ldd	r26, Y+42	; 0x2a
    10d8:	8a 2f       	mov	r24, r26
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	80 77       	andi	r24, 0x70	; 112
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	24 e0       	ldi	r18, 0x04	; 4
    10e2:	95 95       	asr	r25
    10e4:	87 95       	ror	r24
    10e6:	2a 95       	dec	r18
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <main+0x46e>
    10ea:	84 87       	std	Z+12, r24	; 0x0c
    10ec:	15 86       	std	Z+13, r1	; 0x0d
    10ee:	86 86       	std	Z+14, r8	; 0x0e
    10f0:	17 86       	std	Z+15, r1	; 0x0f
    10f2:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
						glcd_draw_string_xy(0,32,string);
    10f6:	8d b7       	in	r24, 0x3d	; 61
    10f8:	9e b7       	in	r25, 0x3e	; 62
    10fa:	40 96       	adiw	r24, 0x10	; 16
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	9e bf       	out	0x3e, r25	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	8d bf       	out	0x3d, r24	; 61
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	60 e2       	ldi	r22, 0x20	; 32
    110a:	a3 01       	movw	r20, r6
    110c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
						glcd_write();
    1110:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					}
					sec_old = sec_one;
					if(!(PIND & (1<<PD2))){
    1114:	e8 2c       	mov	r14, r8
    1116:	4a 99       	sbic	0x09, 2	; 9
    1118:	e6 ce       	rjmp	.-564    	; 0xee6 <main+0x272>
    111a:	86 eb       	ldi	r24, 0xB6	; 182
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	f2 01       	movw	r30, r4
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <main+0x4ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	d9 f7       	brne	.-10     	; 0x111e <main+0x4aa>
					}
				}
				state = menu;		// menu
				choice = 1; 		// off
				
				glcd_clear();
    1128:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
    112c:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
    1130:	e8 2c       	mov	r14, r8
    1132:	9c c2       	rjmp	.+1336   	; 0x166c <main+0x9f8>
			break;
			case alarm1:			// -----> ALARM 1<-----
			break;
			case settings:			// -----> SETTINGS <-----
				glcd_clear();
    1134:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
    1138:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				
				sprintf(string,"Year   :" );
    113c:	c3 01       	movw	r24, r6
    113e:	61 e8       	ldi	r22, 0x81	; 129
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,0,string);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	a3 01       	movw	r20, r6
    114c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				sprintf(string,"Month  :" );
    1150:	c3 01       	movw	r24, r6
    1152:	6a e8       	ldi	r22, 0x8A	; 138
    1154:	71 e0       	ldi	r23, 0x01	; 1
    1156:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,8,string);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	68 e0       	ldi	r22, 0x08	; 8
    115e:	a3 01       	movw	r20, r6
    1160:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				sprintf(string,"Date   :" );
    1164:	c3 01       	movw	r24, r6
    1166:	63 e9       	ldi	r22, 0x93	; 147
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,16,string);
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	60 e1       	ldi	r22, 0x10	; 16
    1172:	a3 01       	movw	r20, r6
    1174:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				sprintf(string,"Weekday:" );
    1178:	c3 01       	movw	r24, r6
    117a:	6c e9       	ldi	r22, 0x9C	; 156
    117c:	71 e0       	ldi	r23, 0x01	; 1
    117e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,32,string);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	60 e2       	ldi	r22, 0x20	; 32
    1186:	48 c0       	rjmp	.+144    	; 0x1218 <main+0x5a4>
				
				glcd_write();
				
				while ( PIND & (1<<PD2) ){			// Year
					if(!(PIND & (1<<PD6))){
    1188:	4e 99       	sbic	0x09, 6	; 9
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <main+0x53e>
						year--;
    118c:	ac a1       	ldd	r26, Y+36	; 0x24
    118e:	bd a1       	ldd	r27, Y+37	; 0x25
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	bd a3       	std	Y+37, r27	; 0x25
    1194:	ac a3       	std	Y+36, r26	; 0x24
						if( year == 65535 ){			// Year down
    1196:	af 5f       	subi	r26, 0xFF	; 255
    1198:	bf 4f       	sbci	r27, 0xFF	; 255
    119a:	21 f4       	brne	.+8      	; 0x11a4 <main+0x530>
    119c:	83 e6       	ldi	r24, 0x63	; 99
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9d a3       	std	Y+37, r25	; 0x25
    11a2:	8c a3       	std	Y+36, r24	; 0x24
    11a4:	86 eb       	ldi	r24, 0xB6	; 182
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	f2 01       	movw	r30, r4
    11aa:	31 97       	sbiw	r30, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <main+0x536>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	d9 f7       	brne	.-10     	; 0x11a8 <main+0x534>
							year = 99;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Year up
    11b2:	4d 99       	sbic	0x09, 5	; 9
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <main+0x564>
						year++;
    11b6:	ac a1       	ldd	r26, Y+36	; 0x24
    11b8:	bd a1       	ldd	r27, Y+37	; 0x25
    11ba:	11 96       	adiw	r26, 0x01	; 1
    11bc:	bd a3       	std	Y+37, r27	; 0x25
    11be:	ac a3       	std	Y+36, r26	; 0x24
						if( year == 100 ){
    11c0:	a4 36       	cpi	r26, 0x64	; 100
    11c2:	b1 05       	cpc	r27, r1
    11c4:	11 f4       	brne	.+4      	; 0x11ca <main+0x556>
    11c6:	1d a2       	std	Y+37, r1	; 0x25
    11c8:	1c a2       	std	Y+36, r1	; 0x24
    11ca:	86 eb       	ldi	r24, 0xB6	; 182
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	f2 01       	movw	r30, r4
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <main+0x55c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	d9 f7       	brne	.-10     	; 0x11ce <main+0x55a>
							year = 0;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", year );
    11d8:	00 d0       	rcall	.+0      	; 0x11da <main+0x566>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <main+0x568>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <main+0x56a>
    11de:	ed b7       	in	r30, 0x3d	; 61
    11e0:	fe b7       	in	r31, 0x3e	; 62
    11e2:	31 96       	adiw	r30, 0x01	; 1
    11e4:	ad b7       	in	r26, 0x3d	; 61
    11e6:	be b7       	in	r27, 0x3e	; 62
    11e8:	12 96       	adiw	r26, 0x02	; 2
    11ea:	7c 92       	st	X, r7
    11ec:	6e 92       	st	-X, r6
    11ee:	11 97       	sbiw	r26, 0x01	; 1
    11f0:	85 ea       	ldi	r24, 0xA5	; 165
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	93 83       	std	Z+3, r25	; 0x03
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	ac a1       	ldd	r26, Y+36	; 0x24
    11fa:	bd a1       	ldd	r27, Y+37	; 0x25
    11fc:	b5 83       	std	Z+5, r27	; 0x05
    11fe:	a4 83       	std	Z+4, r26	; 0x04
    1200:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,0,string);
    1204:	8d b7       	in	r24, 0x3d	; 61
    1206:	9e b7       	in	r25, 0x3e	; 62
    1208:	06 96       	adiw	r24, 0x06	; 6
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	9e bf       	out	0x3e, r25	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	8d bf       	out	0x3d, r24	; 61
    1214:	82 e3       	ldi	r24, 0x32	; 50
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	a3 01       	movw	r20, r6
    121a:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    121e:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				sprintf(string,"Weekday:" );
				glcd_draw_string_xy(0,32,string);
				
				glcd_write();
				
				while ( PIND & (1<<PD2) ){			// Year
    1222:	4a 99       	sbic	0x09, 2	; 9
    1224:	b1 cf       	rjmp	.-158    	; 0x1188 <main+0x514>
					}
					sprintf(string,"%d     ", year );
					glcd_draw_string_xy(50,0,string);
					glcd_write();
				}
				RTCSetYear( year );
    1226:	8c a1       	ldd	r24, Y+36	; 0x24
    1228:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <RTCSetYear>
    122c:	86 eb       	ldi	r24, 0xB6	; 182
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	f2 01       	movw	r30, r4
    1232:	31 97       	sbiw	r30, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <main+0x5be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	d9 f7       	brne	.-10     	; 0x1230 <main+0x5bc>
    123a:	44 c0       	rjmp	.+136    	; 0x12c4 <main+0x650>
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Month
					if(!(PIND & (1<<PD6))){
    123c:	4e 99       	sbic	0x09, 6	; 9
    123e:	0e c0       	rjmp	.+28     	; 0x125c <main+0x5e8>
						month--;
    1240:	9a a1       	ldd	r25, Y+34	; 0x22
    1242:	91 50       	subi	r25, 0x01	; 1
    1244:	9a a3       	std	Y+34, r25	; 0x22
						if( month == 0 ){			// Month down
    1246:	99 23       	and	r25, r25
    1248:	11 f4       	brne	.+4      	; 0x124e <main+0x5da>
    124a:	ac e0       	ldi	r26, 0x0C	; 12
    124c:	aa a3       	std	Y+34, r26	; 0x22
    124e:	86 eb       	ldi	r24, 0xB6	; 182
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	f2 01       	movw	r30, r4
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <main+0x5e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	d9 f7       	brne	.-10     	; 0x1252 <main+0x5de>
							month = 12;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Month up
    125c:	4d 99       	sbic	0x09, 5	; 9
    125e:	0e c0       	rjmp	.+28     	; 0x127c <main+0x608>
						month++;
    1260:	ba a1       	ldd	r27, Y+34	; 0x22
    1262:	bf 5f       	subi	r27, 0xFF	; 255
    1264:	ba a3       	std	Y+34, r27	; 0x22
						if( month == 13 ){
    1266:	bd 30       	cpi	r27, 0x0D	; 13
    1268:	11 f4       	brne	.+4      	; 0x126e <main+0x5fa>
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	2a a3       	std	Y+34, r18	; 0x22
    126e:	86 eb       	ldi	r24, 0xB6	; 182
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	f2 01       	movw	r30, r4
    1274:	31 97       	sbiw	r30, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <main+0x600>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	d9 f7       	brne	.-10     	; 0x1272 <main+0x5fe>
							month = 1;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", month );
    127c:	00 d0       	rcall	.+0      	; 0x127e <main+0x60a>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <main+0x60c>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <main+0x60e>
    1282:	ed b7       	in	r30, 0x3d	; 61
    1284:	fe b7       	in	r31, 0x3e	; 62
    1286:	31 96       	adiw	r30, 0x01	; 1
    1288:	ad b7       	in	r26, 0x3d	; 61
    128a:	be b7       	in	r27, 0x3e	; 62
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	7c 92       	st	X, r7
    1290:	6e 92       	st	-X, r6
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	85 ea       	ldi	r24, 0xA5	; 165
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	9a a1       	ldd	r25, Y+34	; 0x22
    129e:	94 83       	std	Z+4, r25	; 0x04
    12a0:	15 82       	std	Z+5, r1	; 0x05
    12a2:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,8,string);
    12a6:	ad b7       	in	r26, 0x3d	; 61
    12a8:	be b7       	in	r27, 0x3e	; 62
    12aa:	16 96       	adiw	r26, 0x06	; 6
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	be bf       	out	0x3e, r27	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	ad bf       	out	0x3d, r26	; 61
    12b6:	82 e3       	ldi	r24, 0x32	; 50
    12b8:	68 e0       	ldi	r22, 0x08	; 8
    12ba:	a3 01       	movw	r20, r6
    12bc:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    12c0:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					glcd_draw_string_xy(50,0,string);
					glcd_write();
				}
				RTCSetYear( year );
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Month
    12c4:	4a 99       	sbic	0x09, 2	; 9
    12c6:	ba cf       	rjmp	.-140    	; 0x123c <main+0x5c8>
					}
					sprintf(string,"%d     ", month );
					glcd_draw_string_xy(50,8,string);
					glcd_write();
				}
				RTCSetMonth( month );
    12c8:	8a a1       	ldd	r24, Y+34	; 0x22
    12ca:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <RTCSetMonth>
    12ce:	86 eb       	ldi	r24, 0xB6	; 182
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    12d2:	f2 01       	movw	r30, r4
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <main+0x660>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	d9 f7       	brne	.-10     	; 0x12d2 <main+0x65e>
    12dc:	44 c0       	rjmp	.+136    	; 0x1366 <main+0x6f2>
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Date
					if(!(PIND & (1<<PD6))){		// Date down
    12de:	4e 99       	sbic	0x09, 6	; 9
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <main+0x68a>
						date--;
    12e2:	bb a1       	ldd	r27, Y+35	; 0x23
    12e4:	b1 50       	subi	r27, 0x01	; 1
    12e6:	bb a3       	std	Y+35, r27	; 0x23
						if( date == 0 ){
    12e8:	bb 23       	and	r27, r27
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <main+0x67c>
    12ec:	20 e2       	ldi	r18, 0x20	; 32
    12ee:	2b a3       	std	Y+35, r18	; 0x23
    12f0:	86 eb       	ldi	r24, 0xB6	; 182
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	f2 01       	movw	r30, r4
    12f6:	31 97       	sbiw	r30, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <main+0x682>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	d9 f7       	brne	.-10     	; 0x12f4 <main+0x680>
							date = 32;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Date up
    12fe:	4d 99       	sbic	0x09, 5	; 9
    1300:	0e c0       	rjmp	.+28     	; 0x131e <main+0x6aa>
						date++;
    1302:	8b a1       	ldd	r24, Y+35	; 0x23
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	8b a3       	std	Y+35, r24	; 0x23
						if( date == 33 ){
    1308:	81 32       	cpi	r24, 0x21	; 33
    130a:	11 f4       	brne	.+4      	; 0x1310 <main+0x69c>
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	9b a3       	std	Y+35, r25	; 0x23
    1310:	86 eb       	ldi	r24, 0xB6	; 182
    1312:	93 e0       	ldi	r25, 0x03	; 3
    1314:	f2 01       	movw	r30, r4
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <main+0x6a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	d9 f7       	brne	.-10     	; 0x1314 <main+0x6a0>
							date = 1;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", date );
    131e:	00 d0       	rcall	.+0      	; 0x1320 <main+0x6ac>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <main+0x6ae>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <main+0x6b0>
    1324:	ed b7       	in	r30, 0x3d	; 61
    1326:	fe b7       	in	r31, 0x3e	; 62
    1328:	31 96       	adiw	r30, 0x01	; 1
    132a:	ad b7       	in	r26, 0x3d	; 61
    132c:	be b7       	in	r27, 0x3e	; 62
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	7c 92       	st	X, r7
    1332:	6e 92       	st	-X, r6
    1334:	11 97       	sbiw	r26, 0x01	; 1
    1336:	85 ea       	ldi	r24, 0xA5	; 165
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	9b a1       	ldd	r25, Y+35	; 0x23
    1340:	94 83       	std	Z+4, r25	; 0x04
    1342:	15 82       	std	Z+5, r1	; 0x05
    1344:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,16,string);
    1348:	ad b7       	in	r26, 0x3d	; 61
    134a:	be b7       	in	r27, 0x3e	; 62
    134c:	16 96       	adiw	r26, 0x06	; 6
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	be bf       	out	0x3e, r27	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	ad bf       	out	0x3d, r26	; 61
    1358:	82 e3       	ldi	r24, 0x32	; 50
    135a:	60 e1       	ldi	r22, 0x10	; 16
    135c:	a3 01       	movw	r20, r6
    135e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    1362:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					glcd_draw_string_xy(50,8,string);
					glcd_write();
				}
				RTCSetMonth( month );
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Date
    1366:	4a 99       	sbic	0x09, 2	; 9
    1368:	ba cf       	rjmp	.-140    	; 0x12de <main+0x66a>
					}
					sprintf(string,"%d     ", date );
					glcd_draw_string_xy(50,16,string);
					glcd_write();
				}
				RTCSetDate( date );
    136a:	8b a1       	ldd	r24, Y+35	; 0x23
    136c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <RTCSetDate>
    1370:	86 eb       	ldi	r24, 0xB6	; 182
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	f2 01       	movw	r30, r4
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <main+0x702>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137c:	d9 f7       	brne	.-10     	; 0x1374 <main+0x700>
    137e:	57 c0       	rjmp	.+174    	; 0x142e <main+0x7ba>
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Weekday
					switch ( weekday ){
    1380:	b4 e0       	ldi	r27, 0x04	; 4
    1382:	3b 16       	cp	r3, r27
    1384:	01 f1       	breq	.+64     	; 0x13c6 <main+0x752>
    1386:	b3 15       	cp	r27, r3
    1388:	48 f0       	brcs	.+18     	; 0x139c <main+0x728>
    138a:	22 e0       	ldi	r18, 0x02	; 2
    138c:	32 16       	cp	r3, r18
    138e:	99 f0       	breq	.+38     	; 0x13b6 <main+0x742>
    1390:	23 15       	cp	r18, r3
    1392:	a8 f0       	brcs	.+42     	; 0x13be <main+0x74a>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	38 16       	cp	r3, r24
    1398:	39 f5       	brne	.+78     	; 0x13e8 <main+0x774>
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <main+0x73a>
    139c:	96 e0       	ldi	r25, 0x06	; 6
    139e:	39 16       	cp	r3, r25
    13a0:	d1 f0       	breq	.+52     	; 0x13d6 <main+0x762>
    13a2:	39 16       	cp	r3, r25
    13a4:	a0 f0       	brcs	.+40     	; 0x13ce <main+0x75a>
    13a6:	a7 e0       	ldi	r26, 0x07	; 7
    13a8:	3a 16       	cp	r3, r26
    13aa:	f1 f4       	brne	.+60     	; 0x13e8 <main+0x774>
    13ac:	18 c0       	rjmp	.+48     	; 0x13de <main+0x76a>
						case 1:
							sprintf(string,"Mo");
    13ae:	c3 01       	movw	r24, r6
    13b0:	6d ea       	ldi	r22, 0xAD	; 173
    13b2:	71 e0       	ldi	r23, 0x01	; 1
    13b4:	17 c0       	rjmp	.+46     	; 0x13e4 <main+0x770>
						break;
						case 2:
							sprintf(string,"Tu");
    13b6:	c3 01       	movw	r24, r6
    13b8:	60 eb       	ldi	r22, 0xB0	; 176
    13ba:	71 e0       	ldi	r23, 0x01	; 1
    13bc:	13 c0       	rjmp	.+38     	; 0x13e4 <main+0x770>
						break;
						case 3:
							sprintf(string,"We");
    13be:	c3 01       	movw	r24, r6
    13c0:	63 eb       	ldi	r22, 0xB3	; 179
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <main+0x770>
						break;
						case 4:
							sprintf(string,"Th");
    13c6:	c3 01       	movw	r24, r6
    13c8:	66 eb       	ldi	r22, 0xB6	; 182
    13ca:	71 e0       	ldi	r23, 0x01	; 1
    13cc:	0b c0       	rjmp	.+22     	; 0x13e4 <main+0x770>
						break;
						case 5:
							sprintf(string,"Fr");
    13ce:	c3 01       	movw	r24, r6
    13d0:	69 eb       	ldi	r22, 0xB9	; 185
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <main+0x770>
						break;
						case 6:
							sprintf(string,"Sa");
    13d6:	c3 01       	movw	r24, r6
    13d8:	6c eb       	ldi	r22, 0xBC	; 188
    13da:	71 e0       	ldi	r23, 0x01	; 1
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <main+0x770>
						break;
						case 7:
							sprintf(string,"Su");
    13de:	c3 01       	movw	r24, r6
    13e0:	6f eb       	ldi	r22, 0xBF	; 191
    13e2:	71 e0       	ldi	r23, 0x01	; 1
    13e4:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
						break;
					}
					if(!(PIND & (1<<PD6))){		// Weekday down
    13e8:	4e 99       	sbic	0x09, 6	; 9
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <main+0x78e>
						weekday--;
    13ec:	3a 94       	dec	r3
						if( weekday == 0 ){
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <main+0x780>
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	38 2e       	mov	r3, r24
    13f4:	86 eb       	ldi	r24, 0xB6	; 182
    13f6:	93 e0       	ldi	r25, 0x03	; 3
    13f8:	f2 01       	movw	r30, r4
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <main+0x786>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	d9 f7       	brne	.-10     	; 0x13f8 <main+0x784>
							weekday = 7;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Weekday up
    1402:	4d 99       	sbic	0x09, 5	; 9
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <main+0x7ac>
						weekday++;
    1406:	33 94       	inc	r3
						if( weekday == 8 ){
    1408:	b8 e0       	ldi	r27, 0x08	; 8
    140a:	3b 16       	cp	r3, r27
    140c:	11 f4       	brne	.+4      	; 0x1412 <main+0x79e>
    140e:	33 24       	eor	r3, r3
    1410:	33 94       	inc	r3
    1412:	86 eb       	ldi	r24, 0xB6	; 182
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	f2 01       	movw	r30, r4
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x7a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141e:	d9 f7       	brne	.-10     	; 0x1416 <main+0x7a2>
							weekday = 1;
						}
						_delay_ms(delay_time);
					}
					glcd_draw_string_xy(50,32,string);
    1420:	82 e3       	ldi	r24, 0x32	; 50
    1422:	60 e2       	ldi	r22, 0x20	; 32
    1424:	a3 01       	movw	r20, r6
    1426:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    142a:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					glcd_draw_string_xy(50,16,string);
					glcd_write();
				}
				RTCSetDate( date );
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Weekday
    142e:	4a 99       	sbic	0x09, 2	; 9
    1430:	a7 cf       	rjmp	.-178    	; 0x1380 <main+0x70c>
						_delay_ms(delay_time);
					}
					glcd_draw_string_xy(50,32,string);
					glcd_write();
				}
				RTCSetWeekday( weekday );
    1432:	83 2d       	mov	r24, r3
    1434:	0e 94 45 1a 	call	0x348a	; 0x348a <RTCSetWeekday>
    1438:	86 eb       	ldi	r24, 0xB6	; 182
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	f2 01       	movw	r30, r4
    143e:	31 97       	sbiw	r30, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <main+0x7ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1444:	d9 f7       	brne	.-10     	; 0x143c <main+0x7c8>
				_delay_ms(delay_time);
				
				glcd_clear();
    1446:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
    144a:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
				sprintf(string,"Hour   :" );
    144e:	c3 01       	movw	r24, r6
    1450:	62 ec       	ldi	r22, 0xC2	; 194
    1452:	71 e0       	ldi	r23, 0x01	; 1
    1454:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,0,string);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	a3 01       	movw	r20, r6
    145e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				sprintf(string,"Minute :" );
    1462:	c3 01       	movw	r24, r6
    1464:	6b ec       	ldi	r22, 0xCB	; 203
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,8,string);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	68 e0       	ldi	r22, 0x08	; 8
    1470:	a3 01       	movw	r20, r6
    1472:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
				sprintf(string,"Second :" );
    1476:	c3 01       	movw	r24, r6
    1478:	64 ed       	ldi	r22, 0xD4	; 212
    147a:	71 e0       	ldi	r23, 0x01	; 1
    147c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <strcpy>
				glcd_draw_string_xy(0,16,string);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	60 e1       	ldi	r22, 0x10	; 16
    1484:	3e c0       	rjmp	.+124    	; 0x1502 <main+0x88e>
				glcd_write();
				
				while ( PIND & (1<<PD2) ){			// Hour
					if(!(PIND & (1<<PD6))){		// Hour down
    1486:	4e 99       	sbic	0x09, 6	; 9
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <main+0x832>
						hour--;
    148a:	29 a1       	ldd	r18, Y+33	; 0x21
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	29 a3       	std	Y+33, r18	; 0x21
						if( hour == 255 ){
    1490:	2f 3f       	cpi	r18, 0xFF	; 255
    1492:	11 f4       	brne	.+4      	; 0x1498 <main+0x824>
    1494:	88 e1       	ldi	r24, 0x18	; 24
    1496:	89 a3       	std	Y+33, r24	; 0x21
    1498:	86 eb       	ldi	r24, 0xB6	; 182
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	f2 01       	movw	r30, r4
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <main+0x82a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	d9 f7       	brne	.-10     	; 0x149c <main+0x828>
							hour = 24;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Hour up
    14a6:	4d 99       	sbic	0x09, 5	; 9
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <main+0x850>
						hour++;
    14aa:	99 a1       	ldd	r25, Y+33	; 0x21
    14ac:	9f 5f       	subi	r25, 0xFF	; 255
    14ae:	99 a3       	std	Y+33, r25	; 0x21
						if( hour == 25 ){
    14b0:	99 31       	cpi	r25, 0x19	; 25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <main+0x842>
    14b4:	19 a2       	std	Y+33, r1	; 0x21
    14b6:	86 eb       	ldi	r24, 0xB6	; 182
    14b8:	93 e0       	ldi	r25, 0x03	; 3
    14ba:	f2 01       	movw	r30, r4
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <main+0x848>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	d9 f7       	brne	.-10     	; 0x14ba <main+0x846>
							hour = 0;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", hour );
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <main+0x852>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <main+0x854>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <main+0x856>
    14ca:	ed b7       	in	r30, 0x3d	; 61
    14cc:	fe b7       	in	r31, 0x3e	; 62
    14ce:	31 96       	adiw	r30, 0x01	; 1
    14d0:	ad b7       	in	r26, 0x3d	; 61
    14d2:	be b7       	in	r27, 0x3e	; 62
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	7c 92       	st	X, r7
    14d8:	6e 92       	st	-X, r6
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	85 ea       	ldi	r24, 0xA5	; 165
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	93 83       	std	Z+3, r25	; 0x03
    14e2:	82 83       	std	Z+2, r24	; 0x02
    14e4:	99 a1       	ldd	r25, Y+33	; 0x21
    14e6:	94 83       	std	Z+4, r25	; 0x04
    14e8:	15 82       	std	Z+5, r1	; 0x05
    14ea:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,0,string);
    14ee:	ad b7       	in	r26, 0x3d	; 61
    14f0:	be b7       	in	r27, 0x3e	; 62
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	be bf       	out	0x3e, r27	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	ad bf       	out	0x3d, r26	; 61
    14fe:	82 e3       	ldi	r24, 0x32	; 50
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	a3 01       	movw	r20, r6
    1504:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    1508:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
				glcd_draw_string_xy(0,8,string);
				sprintf(string,"Second :" );
				glcd_draw_string_xy(0,16,string);
				glcd_write();
				
				while ( PIND & (1<<PD2) ){			// Hour
    150c:	4a 99       	sbic	0x09, 2	; 9
    150e:	bb cf       	rjmp	.-138    	; 0x1486 <main+0x812>
					}
					sprintf(string,"%d     ", hour );
					glcd_draw_string_xy(50,0,string);
					glcd_write();
				}
				RTCSetHour( hour );
    1510:	89 a1       	ldd	r24, Y+33	; 0x21
    1512:	0e 94 33 1a 	call	0x3466	; 0x3466 <RTCSetHour>
    1516:	86 eb       	ldi	r24, 0xB6	; 182
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	f2 01       	movw	r30, r4
    151c:	31 97       	sbiw	r30, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <main+0x8a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	d9 f7       	brne	.-10     	; 0x151a <main+0x8a6>
    1524:	43 c0       	rjmp	.+134    	; 0x15ac <main+0x938>
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Minute
					if(!(PIND & (1<<PD6))){		// Minute down
    1526:	4e 99       	sbic	0x09, 6	; 9
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <main+0x8d2>
						minute--;
    152a:	b8 a1       	ldd	r27, Y+32	; 0x20
    152c:	b1 50       	subi	r27, 0x01	; 1
    152e:	b8 a3       	std	Y+32, r27	; 0x20
						if( minute == 255 ){
    1530:	bf 3f       	cpi	r27, 0xFF	; 255
    1532:	11 f4       	brne	.+4      	; 0x1538 <main+0x8c4>
    1534:	2b e3       	ldi	r18, 0x3B	; 59
    1536:	28 a3       	std	Y+32, r18	; 0x20
    1538:	86 eb       	ldi	r24, 0xB6	; 182
    153a:	93 e0       	ldi	r25, 0x03	; 3
    153c:	f2 01       	movw	r30, r4
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <main+0x8ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	d9 f7       	brne	.-10     	; 0x153c <main+0x8c8>
							minute = 59;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Minute up
    1546:	4d 99       	sbic	0x09, 5	; 9
    1548:	0d c0       	rjmp	.+26     	; 0x1564 <main+0x8f0>
						minute++;
    154a:	88 a1       	ldd	r24, Y+32	; 0x20
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	88 a3       	std	Y+32, r24	; 0x20
						if( minute == 60 ){
    1550:	8c 33       	cpi	r24, 0x3C	; 60
    1552:	09 f4       	brne	.+2      	; 0x1556 <main+0x8e2>
    1554:	18 a2       	std	Y+32, r1	; 0x20
    1556:	86 eb       	ldi	r24, 0xB6	; 182
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	f2 01       	movw	r30, r4
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <main+0x8e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	d9 f7       	brne	.-10     	; 0x155a <main+0x8e6>
							minute = 0;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", minute );
    1564:	00 d0       	rcall	.+0      	; 0x1566 <main+0x8f2>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <main+0x8f4>
    1568:	00 d0       	rcall	.+0      	; 0x156a <main+0x8f6>
    156a:	ed b7       	in	r30, 0x3d	; 61
    156c:	fe b7       	in	r31, 0x3e	; 62
    156e:	31 96       	adiw	r30, 0x01	; 1
    1570:	ad b7       	in	r26, 0x3d	; 61
    1572:	be b7       	in	r27, 0x3e	; 62
    1574:	12 96       	adiw	r26, 0x02	; 2
    1576:	7c 92       	st	X, r7
    1578:	6e 92       	st	-X, r6
    157a:	11 97       	sbiw	r26, 0x01	; 1
    157c:	85 ea       	ldi	r24, 0xA5	; 165
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	93 83       	std	Z+3, r25	; 0x03
    1582:	82 83       	std	Z+2, r24	; 0x02
    1584:	98 a1       	ldd	r25, Y+32	; 0x20
    1586:	94 83       	std	Z+4, r25	; 0x04
    1588:	15 82       	std	Z+5, r1	; 0x05
    158a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,8,string);
    158e:	ad b7       	in	r26, 0x3d	; 61
    1590:	be b7       	in	r27, 0x3e	; 62
    1592:	16 96       	adiw	r26, 0x06	; 6
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	be bf       	out	0x3e, r27	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	ad bf       	out	0x3d, r26	; 61
    159e:	82 e3       	ldi	r24, 0x32	; 50
    15a0:	68 e0       	ldi	r22, 0x08	; 8
    15a2:	a3 01       	movw	r20, r6
    15a4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    15a8:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					glcd_draw_string_xy(50,0,string);
					glcd_write();
				}
				RTCSetHour( hour );
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Minute
    15ac:	4a 99       	sbic	0x09, 2	; 9
    15ae:	bb cf       	rjmp	.-138    	; 0x1526 <main+0x8b2>
					}
					sprintf(string,"%d     ", minute );
					glcd_draw_string_xy(50,8,string);
					glcd_write();
				}
				RTCSetMinute( minute );
    15b0:	88 a1       	ldd	r24, Y+32	; 0x20
    15b2:	0e 94 21 1a 	call	0x3442	; 0x3442 <RTCSetMinute>
    15b6:	86 eb       	ldi	r24, 0xB6	; 182
    15b8:	93 e0       	ldi	r25, 0x03	; 3
    15ba:	f2 01       	movw	r30, r4
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <main+0x948>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	d9 f7       	brne	.-10     	; 0x15ba <main+0x946>
    15c4:	43 c0       	rjmp	.+134    	; 0x164c <main+0x9d8>
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Second
					
					if(!(PIND & (1<<PD6))){		// Second down
    15c6:	4e 99       	sbic	0x09, 6	; 9
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <main+0x972>
						second--;
    15ca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    15cc:	b1 50       	subi	r27, 0x01	; 1
    15ce:	bf 8f       	std	Y+31, r27	; 0x1f
						if( second == 255 ){
    15d0:	bf 3f       	cpi	r27, 0xFF	; 255
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <main+0x964>
    15d4:	2b e3       	ldi	r18, 0x3B	; 59
    15d6:	2f 8f       	std	Y+31, r18	; 0x1f
    15d8:	86 eb       	ldi	r24, 0xB6	; 182
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	f2 01       	movw	r30, r4
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <main+0x96a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e4:	d9 f7       	brne	.-10     	; 0x15dc <main+0x968>
							second = 59;
						}
						_delay_ms(delay_time);
					}
					if(!(PIND & (1<<PD5))){		// Second up
    15e6:	4d 99       	sbic	0x09, 5	; 9
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <main+0x990>
						second++;
    15ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	8f 8f       	std	Y+31, r24	; 0x1f
						if( second == 60 ){
    15f0:	8c 33       	cpi	r24, 0x3C	; 60
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <main+0x982>
    15f4:	1f 8e       	std	Y+31, r1	; 0x1f
    15f6:	86 eb       	ldi	r24, 0xB6	; 182
    15f8:	93 e0       	ldi	r25, 0x03	; 3
    15fa:	f2 01       	movw	r30, r4
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <main+0x988>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	d9 f7       	brne	.-10     	; 0x15fa <main+0x986>
							second = 0;
						}
						_delay_ms(delay_time);
					}
					sprintf(string,"%d     ", second );
    1604:	00 d0       	rcall	.+0      	; 0x1606 <main+0x992>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <main+0x994>
    1608:	00 d0       	rcall	.+0      	; 0x160a <main+0x996>
    160a:	ed b7       	in	r30, 0x3d	; 61
    160c:	fe b7       	in	r31, 0x3e	; 62
    160e:	31 96       	adiw	r30, 0x01	; 1
    1610:	ad b7       	in	r26, 0x3d	; 61
    1612:	be b7       	in	r27, 0x3e	; 62
    1614:	12 96       	adiw	r26, 0x02	; 2
    1616:	7c 92       	st	X, r7
    1618:	6e 92       	st	-X, r6
    161a:	11 97       	sbiw	r26, 0x01	; 1
    161c:	85 ea       	ldi	r24, 0xA5	; 165
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	93 83       	std	Z+3, r25	; 0x03
    1622:	82 83       	std	Z+2, r24	; 0x02
    1624:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1626:	94 83       	std	Z+4, r25	; 0x04
    1628:	15 82       	std	Z+5, r1	; 0x05
    162a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
					glcd_draw_string_xy(50,16,string);
    162e:	ad b7       	in	r26, 0x3d	; 61
    1630:	be b7       	in	r27, 0x3e	; 62
    1632:	16 96       	adiw	r26, 0x06	; 6
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	be bf       	out	0x3e, r27	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	ad bf       	out	0x3d, r26	; 61
    163e:	82 e3       	ldi	r24, 0x32	; 50
    1640:	60 e1       	ldi	r22, 0x10	; 16
    1642:	a3 01       	movw	r20, r6
    1644:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
					glcd_write();
    1648:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
					glcd_draw_string_xy(50,8,string);
					glcd_write();
				}
				RTCSetMinute( minute );
				_delay_ms(delay_time);
				while ( PIND & (1<<PD2) ){			// Second
    164c:	4a 99       	sbic	0x09, 2	; 9
    164e:	bb cf       	rjmp	.-138    	; 0x15c6 <main+0x952>
					}
					sprintf(string,"%d     ", second );
					glcd_draw_string_xy(50,16,string);
					glcd_write();
				}
				RTCSetSecond( second );
    1650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1652:	0e 94 0f 1a 	call	0x341e	; 0x341e <RTCSetSecond>
    1656:	86 eb       	ldi	r24, 0xB6	; 182
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	f2 01       	movw	r30, r4
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <main+0x9e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	d9 f7       	brne	.-10     	; 0x165a <main+0x9e6>
				_delay_ms(delay_time);
				state = menu;
				choice = 1;
				glcd_clear();
    1664:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
				glcd_clear_buffer();
    1668:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
    166c:	01 e0       	ldi	r16, 0x01	; 1
    166e:	10 e0       	ldi	r17, 0x00	; 0
    1670:	82 cb       	rjmp	.-2300   	; 0xd76 <main+0x102>

00001672 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
    1672:	98 2f       	mov	r25, r24
    1674:	84 35       	cpi	r24, 0x54	; 84
    1676:	08 f0       	brcs	.+2      	; 0x167a <glcd_update_bbox+0x8>
    1678:	93 e5       	ldi	r25, 0x53	; 83
    167a:	44 35       	cpi	r20, 0x54	; 84
    167c:	08 f0       	brcs	.+2      	; 0x1680 <glcd_update_bbox+0xe>
    167e:	43 e5       	ldi	r20, 0x53	; 83
    1680:	60 33       	cpi	r22, 0x30	; 48
    1682:	08 f0       	brcs	.+2      	; 0x1686 <glcd_update_bbox+0x14>
    1684:	6f e2       	ldi	r22, 0x2F	; 47
    1686:	20 33       	cpi	r18, 0x30	; 48
    1688:	08 f0       	brcs	.+2      	; 0x168c <glcd_update_bbox+0x1a>
    168a:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
    168c:	e0 91 48 04 	lds	r30, 0x0448
    1690:	f0 91 49 04 	lds	r31, 0x0449
    1694:	80 81       	ld	r24, Z
    1696:	98 17       	cp	r25, r24
    1698:	08 f4       	brcc	.+2      	; 0x169c <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
    169a:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	84 17       	cp	r24, r20
    16a0:	08 f4       	brcc	.+2      	; 0x16a4 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
    16a2:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
    16a4:	81 81       	ldd	r24, Z+1	; 0x01
    16a6:	68 17       	cp	r22, r24
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
    16aa:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
    16ac:	83 81       	ldd	r24, Z+3	; 0x03
    16ae:	82 17       	cp	r24, r18
    16b0:	08 f4       	brcc	.+2      	; 0x16b4 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
    16b2:	23 83       	std	Z+3, r18	; 0x03
    16b4:	08 95       	ret

000016b6 <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    16b6:	e0 91 48 04 	lds	r30, 0x0448
    16ba:	f0 91 49 04 	lds	r31, 0x0449
    16be:	83 e5       	ldi	r24, 0x53	; 83
    16c0:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    16c2:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    16c4:	8f e2       	ldi	r24, 0x2F	; 47
    16c6:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    16c8:	13 82       	std	Z+3, r1	; 0x03
}
    16ca:	08 95       	ret

000016cc <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
    16cc:	e0 91 48 04 	lds	r30, 0x0448
    16d0:	f0 91 49 04 	lds	r31, 0x0449
    16d4:	83 e5       	ldi	r24, 0x53	; 83
    16d6:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
    16d8:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    16da:	8f e2       	ldi	r24, 0x2F	; 47
    16dc:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    16de:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
    16e0:	08 95       	ret

000016e2 <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
    16e2:	e0 91 48 04 	lds	r30, 0x0448
    16e6:	f0 91 49 04 	lds	r31, 0x0449
    16ea:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
    16ec:	83 e5       	ldi	r24, 0x53	; 83
    16ee:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
    16f0:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
    16f2:	8f e2       	ldi	r24, 0x2F	; 47
    16f4:	83 83       	std	Z+3, r24	; 0x03
}
    16f6:	08 95       	ret

000016f8 <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
    16f8:	90 93 47 04 	sts	0x0447, r25
    16fc:	80 93 46 04 	sts	0x0446, r24
	glcd_bbox_selected = bbox;
    1700:	70 93 49 04 	sts	0x0449, r23
    1704:	60 93 48 04 	sts	0x0448, r22
}
    1708:	08 95       	ret

0000170a <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
    170a:	08 95       	ret

0000170c <glcd_scroll_line>:

void glcd_scroll_line(void)
{
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    1714:	64 e5       	ldi	r22, 0x54	; 84
    1716:	80 91 46 04 	lds	r24, 0x0446
    171a:	90 91 47 04 	lds	r25, 0x0447
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
    171e:	45 30       	cpi	r20, 0x05	; 5
    1720:	51 05       	cpc	r21, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
    1724:	dc 01       	movw	r26, r24
    1726:	a2 0f       	add	r26, r18
    1728:	b3 1f       	adc	r27, r19
    172a:	2c 5a       	subi	r18, 0xAC	; 172
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	fc 01       	movw	r30, r24
    1730:	e2 0f       	add	r30, r18
    1732:	f3 1f       	adc	r31, r19
    1734:	24 55       	subi	r18, 0x54	; 84
    1736:	30 40       	sbci	r19, 0x00	; 0
    1738:	84 e5       	ldi	r24, 0x54	; 84
    173a:	01 90       	ld	r0, Z+
    173c:	0d 92       	st	X+, r0
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	e1 f7       	brne	.-8      	; 0x173a <glcd_scroll_line+0x2e>
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    1744:	8c 55       	subi	r24, 0x5C	; 92
    1746:	9e 4f       	sbci	r25, 0xFE	; 254
    1748:	dc 01       	movw	r26, r24
    174a:	86 2f       	mov	r24, r22
    174c:	1d 92       	st	X+, r1
    174e:	8a 95       	dec	r24
    1750:	e9 f7       	brne	.-6      	; 0x174c <glcd_scroll_line+0x40>
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	2c 5a       	subi	r18, 0xAC	; 172
    1758:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
    175a:	46 30       	cpi	r20, 0x06	; 6
    175c:	51 05       	cpc	r21, r1
    175e:	d9 f6       	brne	.-74     	; 0x1716 <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	43 e5       	ldi	r20, 0x53	; 83
    1766:	2f e2       	ldi	r18, 0x2F	; 47
    1768:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
}
    176c:	08 95       	ret

0000176e <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    176e:	e0 91 46 04 	lds	r30, 0x0446
    1772:	f0 91 47 04 	lds	r31, 0x0447
    1776:	88 ef       	ldi	r24, 0xF8	; 248
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	df 01       	movw	r26, r30
    177c:	9c 01       	movw	r18, r24
    177e:	1d 92       	st	X+, r1
    1780:	21 50       	subi	r18, 0x01	; 1
    1782:	30 40       	sbci	r19, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	43 e5       	ldi	r20, 0x53	; 83
    178c:	2f e2       	ldi	r18, 0x2F	; 47
    178e:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
}
    1792:	08 95       	ret

00001794 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    1794:	e0 91 46 04 	lds	r30, 0x0446
    1798:	f0 91 47 04 	lds	r31, 0x0447
    179c:	88 ef       	ldi	r24, 0xF8	; 248
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	df 01       	movw	r26, r30
    17a2:	9c 01       	movw	r18, r24
    17a4:	1d 92       	st	X+, r1
    17a6:	21 50       	subi	r18, 0x01	; 1
    17a8:	30 40       	sbci	r19, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	43 e5       	ldi	r20, 0x53	; 83
    17b2:	2f e2       	ldi	r18, 0x2F	; 47
    17b4:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	glcd_write();
    17b8:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
}
    17bc:	08 95       	ret

000017be <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
    17be:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
    17c0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
    17c2:	0d b4       	in	r0, 0x2d	; 45
    17c4:	07 fe       	sbrs	r0, 7
    17c6:	fd cf       	rjmp	.-6      	; 0x17c2 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
    17c8:	28 9a       	sbi	0x05, 0	; 5
}
    17ca:	08 95       	ret

000017cc <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
    17cc:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
    17ce:	5f 98       	cbi	0x0b, 7	; 11
    17d0:	80 ea       	ldi	r24, 0xA0	; 160
    17d2:	9f e0       	ldi	r25, 0x0F	; 15
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
    17d8:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
    17da:	28 9a       	sbi	0x05, 0	; 5
}
    17dc:	08 95       	ret

000017de <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
    17de:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
    17e0:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
    17e2:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
    17e4:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
    17e6:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
    17e8:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
    17ea:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
    17ec:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
    17ee:	80 e5       	ldi	r24, 0x50	; 80
    17f0:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    17f2:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    17f4:	0e 94 0d 0c 	call	0x181a	; 0x181a <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    17f8:	8e e4       	ldi	r24, 0x4E	; 78
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	6a e4       	ldi	r22, 0x4A	; 74
    17fe:	72 e0       	ldi	r23, 0x02	; 2
    1800:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    1804:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
    1808:	08 95       	ret

0000180a <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    180a:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    180c:	0e 94 df 0b 	call	0x17be	; 0x17be <glcd_spi_write>
}
    1810:	08 95       	ret

00001812 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    1812:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    1814:	0e 94 df 0b 	call	0x17be	; 0x17be <glcd_spi_write>
}
    1818:	08 95       	ret

0000181a <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
    181a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    181e:	81 e2       	ldi	r24, 0x21	; 33
    1820:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    1824:	82 e1       	ldi	r24, 0x12	; 18
    1826:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    182a:	8c eb       	ldi	r24, 0xBC	; 188
    182c:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1836:	8c e0       	ldi	r24, 0x0C	; 12
    1838:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    183c:	08 95       	ret

0000183e <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	c0 e0       	ldi	r28, 0x00	; 0
    1852:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1854:	e0 91 48 04 	lds	r30, 0x0448
    1858:	f0 91 49 04 	lds	r31, 0x0449
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	e8 2e       	mov	r14, r24
    1860:	f1 2c       	mov	r15, r1
    1862:	e2 0e       	add	r14, r18
    1864:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1866:	81 81       	ldd	r24, Z+1	; 0x01
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	8e 15       	cp	r24, r14
    186c:	9f 05       	cpc	r25, r15
    186e:	54 f5       	brge	.+84     	; 0x18c4 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
    1870:	83 81       	ldd	r24, Z+3	; 0x03
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	82 17       	cp	r24, r18
    1876:	93 07       	cpc	r25, r19
    1878:	64 f1       	brlt	.+88     	; 0x18d2 <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    187a:	80 2f       	mov	r24, r16
    187c:	80 64       	ori	r24, 0x40	; 64
    187e:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    1882:	e0 91 48 04 	lds	r30, 0x0448
    1886:	f0 91 49 04 	lds	r31, 0x0449
    188a:	80 81       	ld	r24, Z
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1892:	e0 91 48 04 	lds	r30, 0x0448
    1896:	f0 91 49 04 	lds	r31, 0x0449
    189a:	10 81       	ld	r17, Z
    189c:	0c c0       	rjmp	.+24     	; 0x18b6 <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    189e:	e0 91 46 04 	lds	r30, 0x0446
    18a2:	f0 91 47 04 	lds	r31, 0x0447
    18a6:	ec 0f       	add	r30, r28
    18a8:	fd 1f       	adc	r31, r29
    18aa:	e1 0f       	add	r30, r17
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	0e 94 05 0c 	call	0x180a	; 0x180a <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    18b4:	1f 5f       	subi	r17, 0xFF	; 255
    18b6:	e0 91 48 04 	lds	r30, 0x0448
    18ba:	f0 91 49 04 	lds	r31, 0x0449
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	81 17       	cp	r24, r17
    18c2:	68 f7       	brcc	.-38     	; 0x189e <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    18c4:	0f 5f       	subi	r16, 0xFF	; 255
    18c6:	cc 5a       	subi	r28, 0xAC	; 172
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	06 30       	cpi	r16, 0x06	; 6
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <glcd_write+0x94>
    18ce:	97 01       	movw	r18, r14
    18d0:	c1 cf       	rjmp	.-126    	; 0x1854 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    18d2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <glcd_reset_bbox>

}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	08 95       	ret

000018e4 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    18ea:	08 95       	ret

000018ec <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    18ec:	86 30       	cpi	r24, 0x06	; 6
    18ee:	10 f0       	brcs	.+4      	; 0x18f4 <glcd_set_y_address+0x8>
    18f0:	85 e4       	ldi	r24, 0x45	; 69
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <glcd_set_y_address+0xa>
    18f4:	80 64       	ori	r24, 0x40	; 64
    18f6:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    18fa:	08 95       	ret

000018fc <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    1902:	08 95       	ret

00001904 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    1904:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    1908:	84 e2       	ldi	r24, 0x24	; 36
    190a:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    190e:	08 95       	ret

00001910 <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    1910:	1f 93       	push	r17
    1912:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1914:	81 e2       	ldi	r24, 0x21	; 33
    1916:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    191a:	81 2f       	mov	r24, r17
    191c:	80 68       	ori	r24, 0x80	; 128
    191e:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    1928:	8c e0       	ldi	r24, 0x0C	; 12
    192a:	0e 94 09 0c 	call	0x1812	; 0x1812 <glcd_command>
}
    192e:	1f 91       	pop	r17
    1930:	08 95       	ret

00001932 <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    1932:	28 2f       	mov	r18, r24
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	68 1b       	sub	r22, r24
    193a:	71 09       	sbc	r23, r1
    193c:	46 9f       	mul	r20, r22
    193e:	c0 01       	movw	r24, r0
    1940:	47 9f       	mul	r20, r23
    1942:	90 0d       	add	r25, r0
    1944:	56 9f       	mul	r21, r22
    1946:	90 0d       	add	r25, r0
    1948:	11 24       	eor	r1, r1
    194a:	6f ef       	ldi	r22, 0xFF	; 255
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    1952:	82 2f       	mov	r24, r18
    1954:	86 0f       	add	r24, r22
    1956:	08 95       	ret

00001958 <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1958:	2f 92       	push	r2
    195a:	3f 92       	push	r3
    195c:	5f 92       	push	r5
    195e:	6f 92       	push	r6
    1960:	7f 92       	push	r7
    1962:	8f 92       	push	r8
    1964:	9f 92       	push	r9
    1966:	af 92       	push	r10
    1968:	bf 92       	push	r11
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	88 2e       	mov	r8, r24
    1982:	b6 2e       	mov	r11, r22
    1984:	94 2e       	mov	r9, r20
    1986:	c2 2e       	mov	r12, r18
    1988:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    198a:	01 e0       	ldi	r16, 0x01	; 1
    198c:	0e 94 3e 13 	call	0x267c	; 0x267c <glcd_draw_rect>
    1990:	dd 24       	eor	r13, r13
    1992:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1994:	0c 2d       	mov	r16, r12
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	38 01       	movw	r6, r16
    199a:	08 94       	sec
    199c:	61 08       	sbc	r6, r1
    199e:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    19a0:	29 2c       	mov	r2, r9
    19a2:	33 24       	eor	r3, r3
    19a4:	08 94       	sec
    19a6:	21 08       	sbc	r2, r1
    19a8:	31 08       	sbc	r3, r1
    19aa:	12 c0       	rjmp	.+36     	; 0x19d0 <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    19ac:	8f 2d       	mov	r24, r15
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	6a 2d       	mov	r22, r10
    19b2:	0e 94 8a 10 	call	0x2114	; 0x2114 <glcd_get_pixel>
    19b6:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    19b8:	8f 2d       	mov	r24, r15
    19ba:	6a 2d       	mov	r22, r10
    19bc:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    19c0:	e3 94       	inc	r14
    19c2:	f3 94       	inc	r15
    19c4:	8e 2d       	mov	r24, r14
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	82 15       	cp	r24, r2
    19ca:	93 05       	cpc	r25, r3
    19cc:	7c f3       	brlt	.-34     	; 0x19ac <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    19ce:	d3 94       	inc	r13
    19d0:	8d 2d       	mov	r24, r13
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	86 15       	cp	r24, r6
    19d6:	97 05       	cpc	r25, r7
    19d8:	34 f4       	brge	.+12     	; 0x19e6 <glcd_scrolling_bar_graph+0x8e>
    19da:	f8 2c       	mov	r15, r8
    19dc:	ee 24       	eor	r14, r14
    19de:	e3 94       	inc	r14
    19e0:	ad 2c       	mov	r10, r13
    19e2:	ab 0c       	add	r10, r11
    19e4:	ee cf       	rjmp	.-36     	; 0x19c2 <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    19e6:	03 50       	subi	r16, 0x03	; 3
    19e8:	10 40       	sbci	r17, 0x00	; 0
    19ea:	85 2d       	mov	r24, r5
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 01       	movw	r18, r24
    19f0:	02 9f       	mul	r16, r18
    19f2:	c0 01       	movw	r24, r0
    19f4:	03 9f       	mul	r16, r19
    19f6:	90 0d       	add	r25, r0
    19f8:	12 9f       	mul	r17, r18
    19fa:	90 0d       	add	r25, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	6f ef       	ldi	r22, 0xFF	; 255
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    1a06:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	86 2f       	mov	r24, r22
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	80 17       	cp	r24, r16
    1a12:	91 07       	cpc	r25, r17
    1a14:	14 f0       	brlt	.+4      	; 0x1a1a <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    1a16:	2c 2d       	mov	r18, r12
    1a18:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1a1a:	6c 2d       	mov	r22, r12
    1a1c:	6b 0d       	add	r22, r11
    1a1e:	98 2d       	mov	r25, r8
    1a20:	92 50       	subi	r25, 0x02	; 2
    1a22:	99 0d       	add	r25, r9
    1a24:	16 2f       	mov	r17, r22
    1a26:	12 1b       	sub	r17, r18
    1a28:	62 50       	subi	r22, 0x02	; 2
    1a2a:	12 50       	subi	r17, 0x02	; 2
    1a2c:	89 2f       	mov	r24, r25
    1a2e:	49 2f       	mov	r20, r25
    1a30:	21 2f       	mov	r18, r17
    1a32:	01 e0       	ldi	r16, 0x01	; 1
    1a34:	99 83       	std	Y+1, r25	; 0x01
    1a36:	0e 94 02 14 	call	0x2804	; 0x2804 <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    1a3a:	11 50       	subi	r17, 0x01	; 1
    1a3c:	b3 94       	inc	r11
    1a3e:	99 81       	ldd	r25, Y+1	; 0x01
    1a40:	89 2f       	mov	r24, r25
    1a42:	61 2f       	mov	r22, r17
    1a44:	49 2f       	mov	r20, r25
    1a46:	2b 2d       	mov	r18, r11
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	0e 94 02 14 	call	0x2804	; 0x2804 <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    1a4e:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
}
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	3f 90       	pop	r3
    1a74:	2f 90       	pop	r2
    1a76:	08 95       	ret

00001a78 <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    1a78:	7f 92       	push	r7
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	78 2e       	mov	r7, r24
    1a90:	86 2e       	mov	r8, r22
    1a92:	94 2e       	mov	r9, r20
    1a94:	a2 2e       	mov	r10, r18
    1a96:	b0 2e       	mov	r11, r16
    1a98:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    1a9a:	ee 20       	and	r14, r14
    1a9c:	11 f4       	brne	.+4      	; 0x1aa2 <glcd_scrolling_bar_graph_timing+0x2a>
    1a9e:	ff 24       	eor	r15, r15
    1aa0:	f3 94       	inc	r15
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    1aa6:	87 2d       	mov	r24, r7
    1aa8:	68 2d       	mov	r22, r8
    1aaa:	49 2d       	mov	r20, r9
    1aac:	2a 2d       	mov	r18, r10
    1aae:	0b 2d       	mov	r16, r11
    1ab0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    1ab4:	1f 5f       	subi	r17, 0xFF	; 255
    1ab6:	1f 15       	cp	r17, r15
    1ab8:	b0 f3       	brcs	.-20     	; 0x1aa6 <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    1aba:	c1 14       	cp	r12, r1
    1abc:	d1 04       	cpc	r13, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <glcd_scrolling_bar_graph_timing+0x4a>
    1ac0:	41 c0       	rjmp	.+130    	; 0x1b44 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    1ac2:	b6 01       	movw	r22, r12
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 c6 1a 	call	0x358c	; 0x358c <__floatunsisf>
    1acc:	5b 01       	movw	r10, r22
    1ace:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	55 e4       	ldi	r21, 0x45	; 69
    1ad8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1adc:	7b 01       	movw	r14, r22
    1ade:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 96 1a 	call	0x352c	; 0x352c <__cmpsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	1c f4       	brge	.+6      	; 0x1af6 <glcd_scrolling_bar_graph_timing+0x7e>
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	24 c0       	rjmp	.+72     	; 0x1b3e <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1af6:	c8 01       	movw	r24, r16
    1af8:	b7 01       	movw	r22, r14
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__gesf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	b4 f4       	brge	.+44     	; 0x1b36 <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	c6 01       	movw	r24, r12
    1b0c:	b5 01       	movw	r22, r10
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1b1a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fixunssfsi>
    1b1e:	80 e9       	ldi	r24, 0x90	; 144
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <glcd_scrolling_bar_graph_timing+0xb6>
    1b24:	fc 01       	movw	r30, r24
    1b26:	31 97       	sbiw	r30, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	61 50       	subi	r22, 0x01	; 1
    1b2c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	61 15       	cp	r22, r1
    1b30:	71 05       	cpc	r23, r1
    1b32:	c1 f7       	brne	.-16     	; 0x1b24 <glcd_scrolling_bar_graph_timing+0xac>
    1b34:	07 c0       	rjmp	.+14     	; 0x1b44 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	c8 01       	movw	r24, r16
    1b38:	b7 01       	movw	r22, r14
    1b3a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fixunssfsi>
    1b3e:	cb 01       	movw	r24, r22
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	7f 90       	pop	r7
    1b5a:	08 95       	ret

00001b5c <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	e8 2e       	mov	r14, r24
    1b68:	f6 2e       	mov	r15, r22
    1b6a:	d4 2e       	mov	r13, r20
    1b6c:	12 2f       	mov	r17, r18
    1b6e:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    1b70:	62 2f       	mov	r22, r18
    1b72:	62 50       	subi	r22, 0x02	; 2
    1b74:	40 95       	com	r20
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	0e 94 99 0c 	call	0x1932	; 0x1932 <glcd_map>
    1b7c:	f8 0e       	add	r15, r24
    1b7e:	18 1b       	sub	r17, r24
    1b80:	12 50       	subi	r17, 0x02	; 2
    1b82:	8e 2d       	mov	r24, r14
    1b84:	6f 2d       	mov	r22, r15
    1b86:	4d 2d       	mov	r20, r13
    1b88:	21 2f       	mov	r18, r17
    1b8a:	01 e0       	ldi	r16, 0x01	; 1
    1b8c:	0e 94 a7 13 	call	0x274e	; 0x274e <glcd_fill_rect>
}
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	08 95       	ret

00001b9c <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	c8 2e       	mov	r12, r24
    1baa:	d6 2e       	mov	r13, r22
    1bac:	e4 2e       	mov	r14, r20
    1bae:	12 2f       	mov	r17, r18
    1bb0:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    1bb2:	01 e0       	ldi	r16, 0x01	; 1
    1bb4:	0e 94 3e 13 	call	0x267c	; 0x267c <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1bb8:	61 2f       	mov	r22, r17
    1bba:	62 50       	subi	r22, 0x02	; 2
    1bbc:	f0 94       	com	r15
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	4f 2d       	mov	r20, r15
    1bc2:	0e 94 99 0c 	call	0x1932	; 0x1932 <glcd_map>
    1bc6:	68 2f       	mov	r22, r24
    1bc8:	6f 5f       	subi	r22, 0xFF	; 255
    1bca:	6d 0d       	add	r22, r13
    1bcc:	9e ef       	ldi	r25, 0xFE	; 254
    1bce:	e9 0e       	add	r14, r25
    1bd0:	18 1b       	sub	r17, r24
    1bd2:	12 50       	subi	r17, 0x02	; 2
    1bd4:	8c 2d       	mov	r24, r12
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	4e 2d       	mov	r20, r14
    1bda:	21 2f       	mov	r18, r17
    1bdc:	0e 94 a7 13 	call	0x274e	; 0x274e <glcd_fill_rect>
}
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	f8 2e       	mov	r15, r24
    1bf8:	e6 2e       	mov	r14, r22
    1bfa:	12 2f       	mov	r17, r18
	if (height < 3) {
    1bfc:	23 30       	cpi	r18, 0x03	; 3
    1bfe:	60 f0       	brcs	.+24     	; 0x1c18 <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	64 2f       	mov	r22, r20
    1c04:	40 2f       	mov	r20, r16
    1c06:	0e 94 99 0c 	call	0x1932	; 0x1932 <glcd_map>
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8f 2d       	mov	r24, r15
    1c0e:	6e 2d       	mov	r22, r14
    1c10:	21 2f       	mov	r18, r17
    1c12:	01 e0       	ldi	r16, 0x01	; 1
    1c14:	0e 94 a7 13 	call	0x274e	; 0x274e <glcd_fill_rect>
}
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	08 95       	ret

00001c22 <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	c8 2e       	mov	r12, r24
    1c30:	e6 2e       	mov	r14, r22
    1c32:	14 2f       	mov	r17, r20
    1c34:	f2 2e       	mov	r15, r18
    1c36:	d0 2e       	mov	r13, r16
	if (height < 3) {
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	82 17       	cp	r24, r18
    1c3c:	a0 f4       	brcc	.+40     	; 0x1c66 <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    1c3e:	8c 2d       	mov	r24, r12
    1c40:	01 e0       	ldi	r16, 0x01	; 1
    1c42:	0e 94 3e 13 	call	0x267c	; 0x267c <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    1c46:	12 50       	subi	r17, 0x02	; 2
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	61 2f       	mov	r22, r17
    1c4c:	4d 2d       	mov	r20, r13
    1c4e:	0e 94 99 0c 	call	0x1932	; 0x1932 <glcd_map>
    1c52:	48 2f       	mov	r20, r24
    1c54:	e3 94       	inc	r14
    1c56:	8e ef       	ldi	r24, 0xFE	; 254
    1c58:	f8 0e       	add	r15, r24
    1c5a:	8c 2d       	mov	r24, r12
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	6e 2d       	mov	r22, r14
    1c60:	2f 2d       	mov	r18, r15
    1c62:	0e 94 a7 13 	call	0x274e	; 0x274e <glcd_fill_rect>
}
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	cf 90       	pop	r12
    1c72:	08 95       	ret

00001c74 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1c74:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1c76:	90 93 4b 04 	sts	0x044B, r25
    1c7a:	80 93 4a 04 	sts	0x044A, r24
	font_current.width = width;
    1c7e:	60 93 4c 04 	sts	0x044C, r22
	font_current.height = height;
    1c82:	40 93 4d 04 	sts	0x044D, r20
	font_current.start_char = start_char;
    1c86:	20 93 4e 04 	sts	0x044E, r18
	font_current.end_char = end_char;
    1c8a:	00 93 4f 04 	sts	0x044F, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	80 93 50 04 	sts	0x0450, r24
}
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    1c98:	ef 92       	push	r14
    1c9a:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1c9c:	90 93 4b 04 	sts	0x044B, r25
    1ca0:	80 93 4a 04 	sts	0x044A, r24
	font_current.width = width;
    1ca4:	60 93 4c 04 	sts	0x044C, r22
	font_current.height = height;
    1ca8:	40 93 4d 04 	sts	0x044D, r20
	font_current.start_char = start_char;
    1cac:	20 93 4e 04 	sts	0x044E, r18
	font_current.end_char = end_char;
    1cb0:	00 93 4f 04 	sts	0x044F, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    1cb4:	e0 92 50 04 	sts	0x0450, r14
}
    1cb8:	0f 91       	pop	r16
    1cba:	ef 90       	pop	r14
    1cbc:	08 95       	ret

00001cbe <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    1cbe:	2f 92       	push	r2
    1cc0:	3f 92       	push	r3
    1cc2:	4f 92       	push	r4
    1cc4:	5f 92       	push	r5
    1cc6:	6f 92       	push	r6
    1cc8:	7f 92       	push	r7
    1cca:	8f 92       	push	r8
    1ccc:	9f 92       	push	r9
    1cce:	af 92       	push	r10
    1cd0:	bf 92       	push	r11
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	63 97       	sbiw	r28, 0x13	; 19
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	48 2e       	mov	r4, r24
    1cf4:	e6 2e       	mov	r14, r22
    1cf6:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    1cf8:	50 91 4e 04 	lds	r21, 0x044E
    1cfc:	45 17       	cp	r20, r21
    1cfe:	20 f0       	brcs	.+8      	; 0x1d08 <glcd_draw_char_xy+0x4a>
    1d00:	80 91 4f 04 	lds	r24, 0x044F
    1d04:	84 17       	cp	r24, r20
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <glcd_draw_char_xy+0x4c>
    1d08:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1d0a:	80 91 50 04 	lds	r24, 0x0450
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <glcd_draw_char_xy+0x56>
    1d12:	58 c0       	rjmp	.+176    	; 0x1dc4 <glcd_draw_char_xy+0x106>
    1d14:	04 2d       	mov	r16, r4
    1d16:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1d18:	43 2e       	mov	r4, r19
    1d1a:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1d1c:	60 2e       	mov	r6, r16
    1d1e:	77 24       	eor	r7, r7
    1d20:	8e 2c       	mov	r8, r14
    1d22:	99 24       	eor	r9, r9
    1d24:	49 c0       	rjmp	.+146    	; 0x1db8 <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1d26:	4f 2d       	mov	r20, r15
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	80 91 4e 04 	lds	r24, 0x044E
    1d2e:	92 01       	movw	r18, r4
    1d30:	28 1b       	sub	r18, r24
    1d32:	31 09       	sbc	r19, r1
    1d34:	89 2f       	mov	r24, r25
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	bc 01       	movw	r22, r24
    1d3a:	26 9f       	mul	r18, r22
    1d3c:	c0 01       	movw	r24, r0
    1d3e:	27 9f       	mul	r18, r23
    1d40:	90 0d       	add	r25, r0
    1d42:	36 9f       	mul	r19, r22
    1d44:	90 0d       	add	r25, r0
    1d46:	11 24       	eor	r1, r1
    1d48:	84 0f       	add	r24, r20
    1d4a:	95 1f       	adc	r25, r21
    1d4c:	e0 91 4a 04 	lds	r30, 0x044A
    1d50:	f0 91 4b 04 	lds	r31, 0x044B
    1d54:	e8 0f       	add	r30, r24
    1d56:	f9 1f       	adc	r31, r25
    1d58:	e4 91       	lpm	r30, Z+
    1d5a:	1e 2d       	mov	r17, r14
    1d5c:	22 24       	eor	r2, r2
    1d5e:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1d60:	5a 01       	movw	r10, r20
    1d62:	a6 0c       	add	r10, r6
    1d64:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1d66:	ce 2e       	mov	r12, r30
    1d68:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1d6a:	74 e5       	ldi	r23, 0x54	; 84
    1d6c:	a7 16       	cp	r10, r23
    1d6e:	b1 04       	cpc	r11, r1
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <glcd_draw_char_xy+0xb6>
    1d72:	70 c1       	rjmp	.+736    	; 0x2054 <glcd_draw_char_xy+0x396>
    1d74:	c1 01       	movw	r24, r2
    1d76:	88 0d       	add	r24, r8
    1d78:	99 1d       	adc	r25, r9
    1d7a:	c0 97       	sbiw	r24, 0x30	; 48
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <glcd_draw_char_xy+0xc2>
    1d7e:	6a c1       	rjmp	.+724    	; 0x2054 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1d80:	c6 01       	movw	r24, r12
    1d82:	02 2c       	mov	r0, r2
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <glcd_draw_char_xy+0xcc>
    1d86:	95 95       	asr	r25
    1d88:	87 95       	ror	r24
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <glcd_draw_char_xy+0xc8>
    1d8e:	80 ff       	sbrs	r24, 0
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    1d92:	80 2f       	mov	r24, r16
    1d94:	61 2f       	mov	r22, r17
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    1d9a:	80 2f       	mov	r24, r16
    1d9c:	61 2f       	mov	r22, r17
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    1da4:	08 94       	sec
    1da6:	21 1c       	adc	r2, r1
    1da8:	31 1c       	adc	r3, r1
    1daa:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	28 16       	cp	r2, r24
    1db0:	31 04       	cpc	r3, r1
    1db2:	d9 f6       	brne	.-74     	; 0x1d6a <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    1db4:	f3 94       	inc	r15
    1db6:	0f 5f       	subi	r16, 0xFF	; 255
    1db8:	90 91 4c 04 	lds	r25, 0x044C
    1dbc:	f9 16       	cp	r15, r25
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <glcd_draw_char_xy+0x104>
    1dc0:	b2 cf       	rjmp	.-156    	; 0x1d26 <glcd_draw_char_xy+0x68>
    1dc2:	49 c1       	rjmp	.+658    	; 0x2056 <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <glcd_draw_char_xy+0x10c>
    1dc8:	9c c0       	rjmp	.+312    	; 0x1f02 <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    1dca:	20 91 4d 04 	lds	r18, 0x044D
    1dce:	82 2f       	mov	r24, r18
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	87 70       	andi	r24, 0x07	; 7
    1dd4:	90 70       	andi	r25, 0x00	; 0
    1dd6:	26 95       	lsr	r18
    1dd8:	26 95       	lsr	r18
    1dda:	26 95       	lsr	r18
    1ddc:	89 2b       	or	r24, r25
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    1de2:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1de4:	80 91 4c 04 	lds	r24, 0x044C
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	98 9f       	mul	r25, r24
    1dec:	80 2d       	mov	r24, r0
    1dee:	11 24       	eor	r1, r1
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	23 2f       	mov	r18, r19
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	25 1b       	sub	r18, r21
    1dfa:	31 09       	sbc	r19, r1
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	a2 9f       	mul	r26, r18
    1e00:	c0 01       	movw	r24, r0
    1e02:	a3 9f       	mul	r26, r19
    1e04:	90 0d       	add	r25, r0
    1e06:	b2 9f       	mul	r27, r18
    1e08:	90 0d       	add	r25, r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	e0 91 4a 04 	lds	r30, 0x044A
    1e10:	f0 91 4b 04 	lds	r31, 0x044B
    1e14:	e8 0f       	add	r30, r24
    1e16:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    1e18:	b4 91       	lpm	r27, Z+
    1e1a:	bb 83       	std	Y+3, r27	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	23 2f       	mov	r18, r19
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3a 83       	std	Y+2, r19	; 0x02
    1e24:	29 83       	std	Y+1, r18	; 0x01
    1e26:	3f 01       	movw	r6, r30
    1e28:	08 94       	sec
    1e2a:	61 1c       	adc	r6, r1
    1e2c:	71 1c       	adc	r7, r1
    1e2e:	54 2c       	mov	r5, r4
    1e30:	88 24       	eor	r8, r8
    1e32:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1e34:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1e36:	44 2d       	mov	r20, r4
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	5c 87       	std	Y+12, r21	; 0x0c
    1e3c:	4b 87       	std	Y+11, r20	; 0x0b
    1e3e:	4f c0       	rjmp	.+158    	; 0x1ede <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    1e40:	f5 01       	movw	r30, r10
    1e42:	84 91       	lpm	r24, Z+
    1e44:	e8 86       	std	Y+8, r14	; 0x08
    1e46:	86 01       	movw	r16, r12
    1e48:	1b 8a       	std	Y+19, r1	; 0x13
    1e4a:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1e4c:	28 2e       	mov	r2, r24
    1e4e:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1e50:	29 85       	ldd	r18, Y+9	; 0x09
    1e52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e54:	24 35       	cpi	r18, 0x54	; 84
    1e56:	31 05       	cpc	r19, r1
    1e58:	0c f0       	brlt	.+2      	; 0x1e5c <glcd_draw_char_xy+0x19e>
    1e5a:	fc c0       	rjmp	.+504    	; 0x2054 <glcd_draw_char_xy+0x396>
    1e5c:	2a 89       	ldd	r18, Y+18	; 0x12
    1e5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1e60:	9b 89       	ldd	r25, Y+19	; 0x13
    1e62:	8e 0d       	add	r24, r14
    1e64:	9f 1d       	adc	r25, r15
    1e66:	c0 97       	sbiw	r24, 0x30	; 48
    1e68:	0c f0       	brlt	.+2      	; 0x1e6c <glcd_draw_char_xy+0x1ae>
    1e6a:	f4 c0       	rjmp	.+488    	; 0x2054 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1e6c:	80 91 4d 04 	lds	r24, 0x044D
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	08 17       	cp	r16, r24
    1e74:	19 07       	cpc	r17, r25
    1e76:	94 f4       	brge	.+36     	; 0x1e9c <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1e78:	c1 01       	movw	r24, r2
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <glcd_draw_char_xy+0x1c4>
    1e7e:	95 95       	asr	r25
    1e80:	87 95       	ror	r24
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <glcd_draw_char_xy+0x1c0>
    1e86:	68 85       	ldd	r22, Y+8	; 0x08
    1e88:	62 0f       	add	r22, r18
    1e8a:	80 ff       	sbrs	r24, 0
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1e8e:	85 2d       	mov	r24, r5
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1e94:	85 2d       	mov	r24, r5
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    1e9c:	4a 89       	ldd	r20, Y+18	; 0x12
    1e9e:	5b 89       	ldd	r21, Y+19	; 0x13
    1ea0:	4f 5f       	subi	r20, 0xFF	; 255
    1ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea4:	5b 8b       	std	Y+19, r21	; 0x13
    1ea6:	4a 8b       	std	Y+18, r20	; 0x12
    1ea8:	0f 5f       	subi	r16, 0xFF	; 255
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    1eac:	48 30       	cpi	r20, 0x08	; 8
    1eae:	51 05       	cpc	r21, r1
    1eb0:	79 f6       	brne	.-98     	; 0x1e50 <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    1eb2:	43 94       	inc	r4
    1eb4:	68 e0       	ldi	r22, 0x08	; 8
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	e6 0e       	add	r14, r22
    1eba:	f7 1e       	adc	r15, r23
    1ebc:	c6 0e       	add	r12, r22
    1ebe:	d7 1e       	adc	r13, r23
    1ec0:	08 94       	sec
    1ec2:	a1 1c       	adc	r10, r1
    1ec4:	b1 1c       	adc	r11, r1
    1ec6:	7c 81       	ldd	r23, Y+4	; 0x04
    1ec8:	47 16       	cp	r4, r23
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <glcd_draw_char_xy+0x210>
    1ecc:	b9 cf       	rjmp	.-142    	; 0x1e40 <glcd_draw_char_xy+0x182>
    1ece:	08 94       	sec
    1ed0:	81 1c       	adc	r8, r1
    1ed2:	91 1c       	adc	r9, r1
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	68 0e       	add	r6, r24
    1eda:	79 1e       	adc	r7, r25
    1edc:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	89 16       	cp	r8, r25
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <glcd_draw_char_xy+0x228>
    1ee4:	b8 c0       	rjmp	.+368    	; 0x2056 <glcd_draw_char_xy+0x398>
    1ee6:	89 89       	ldd	r24, Y+17	; 0x11
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	7c 01       	movw	r14, r24
    1eec:	53 01       	movw	r10, r6
    1eee:	44 24       	eor	r4, r4
    1ef0:	cc 24       	eor	r12, r12
    1ef2:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1ef4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ef6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ef8:	a8 0d       	add	r26, r8
    1efa:	b9 1d       	adc	r27, r9
    1efc:	ba 87       	std	Y+10, r27	; 0x0a
    1efe:	a9 87       	std	Y+9, r26	; 0x09
    1f00:	e2 cf       	rjmp	.-60     	; 0x1ec6 <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <glcd_draw_char_xy+0x24a>
    1f06:	a6 c0       	rjmp	.+332    	; 0x2054 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    1f08:	b0 90 4d 04 	lds	r11, 0x044D
    1f0c:	b6 94       	lsr	r11
    1f0e:	b6 94       	lsr	r11
    1f10:	b6 94       	lsr	r11
    1f12:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    1f14:	40 91 4c 04 	lds	r20, 0x044C
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1f18:	23 2f       	mov	r18, r19
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	25 1b       	sub	r18, r21
    1f1e:	31 09       	sbc	r19, r1
    1f20:	b4 9e       	mul	r11, r20
    1f22:	80 2d       	mov	r24, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	fc 01       	movw	r30, r24
    1f2a:	2e 9f       	mul	r18, r30
    1f2c:	c0 01       	movw	r24, r0
    1f2e:	2f 9f       	mul	r18, r31
    1f30:	90 0d       	add	r25, r0
    1f32:	3e 9f       	mul	r19, r30
    1f34:	90 0d       	add	r25, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	80 90 4a 04 	lds	r8, 0x044A
    1f3c:	90 90 4b 04 	lds	r9, 0x044B
    1f40:	88 0e       	add	r8, r24
    1f42:	99 1e       	adc	r9, r25
    1f44:	54 2e       	mov	r5, r20
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	41 50       	subi	r20, 0x01	; 1
    1f4c:	50 40       	sbci	r21, 0x00	; 0
    1f4e:	64 2f       	mov	r22, r20
    1f50:	63 1b       	sub	r22, r19
    1f52:	e0 e0       	ldi	r30, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	86 1b       	sub	r24, r22
    1f5e:	f4 01       	movw	r30, r8
    1f60:	e8 0f       	add	r30, r24
    1f62:	f1 1d       	adc	r31, r1
    1f64:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    1f66:	2f 5f       	subi	r18, 0xFF	; 255
    1f68:	96 0f       	add	r25, r22
    1f6a:	2b 15       	cp	r18, r11
    1f6c:	b0 f3       	brcs	.-20     	; 0x1f5a <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    1f6e:	ee 23       	and	r30, r30
    1f70:	21 f4       	brne	.+8      	; 0x1f7a <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    1f72:	5a 94       	dec	r5
				if (var_width == 0) {
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    1f76:	3f 5f       	subi	r19, 0xFF	; 255
    1f78:	ea cf       	rjmp	.-44     	; 0x1f4e <glcd_draw_char_xy+0x290>
		}
    1f7a:	ff 24       	eor	r15, r15
    1f7c:	66 24       	eor	r6, r6
    1f7e:	cc 24       	eor	r12, r12
    1f80:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1f82:	24 2d       	mov	r18, r4
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	38 8b       	std	Y+16, r19	; 0x10
    1f88:	2f 87       	std	Y+15, r18	; 0x0f
    1f8a:	58 c0       	rjmp	.+176    	; 0x203c <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1f8c:	8a 2d       	mov	r24, r10
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	20 91 4c 04 	lds	r18, 0x044C
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4e 81       	ldd	r20, Y+6	; 0x06
    1f98:	5f 81       	ldd	r21, Y+7	; 0x07
    1f9a:	42 9f       	mul	r20, r18
    1f9c:	f0 01       	movw	r30, r0
    1f9e:	43 9f       	mul	r20, r19
    1fa0:	f0 0d       	add	r31, r0
    1fa2:	52 9f       	mul	r21, r18
    1fa4:	f0 0d       	add	r31, r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	e8 0f       	add	r30, r24
    1faa:	f9 1f       	adc	r31, r25
    1fac:	e8 0d       	add	r30, r8
    1fae:	f9 1d       	adc	r31, r9
    1fb0:	e4 91       	lpm	r30, Z+
    1fb2:	86 01       	movw	r16, r12
    1fb4:	1b 8a       	std	Y+19, r1	; 0x13
    1fb6:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1fb8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fba:	78 89       	ldd	r23, Y+16	; 0x10
    1fbc:	68 0f       	add	r22, r24
    1fbe:	79 1f       	adc	r23, r25
    1fc0:	7e 87       	std	Y+14, r23	; 0x0e
    1fc2:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1fc4:	2e 2e       	mov	r2, r30
    1fc6:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fcc:	84 35       	cpi	r24, 0x54	; 84
    1fce:	91 05       	cpc	r25, r1
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <glcd_draw_char_xy+0x316>
    1fd2:	40 c0       	rjmp	.+128    	; 0x2054 <glcd_draw_char_xy+0x396>
    1fd4:	2a 89       	ldd	r18, Y+18	; 0x12
    1fd6:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd8:	9b 89       	ldd	r25, Y+19	; 0x13
    1fda:	8e 0d       	add	r24, r14
    1fdc:	9f 1d       	adc	r25, r15
    1fde:	c0 97       	sbiw	r24, 0x30	; 48
    1fe0:	cc f5       	brge	.+114    	; 0x2054 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1fe2:	80 91 4d 04 	lds	r24, 0x044D
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	08 17       	cp	r16, r24
    1fea:	19 07       	cpc	r17, r25
    1fec:	94 f4       	brge	.+36     	; 0x2012 <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1fee:	c1 01       	movw	r24, r2
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <glcd_draw_char_xy+0x33a>
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <glcd_draw_char_xy+0x336>
    1ffc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ffe:	62 0f       	add	r22, r18
    2000:	80 ff       	sbrs	r24, 0
    2002:	03 c0       	rjmp	.+6      	; 0x200a <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    2004:	87 2d       	mov	r24, r7
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	02 c0       	rjmp	.+4      	; 0x200e <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    200a:	87 2d       	mov	r24, r7
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    2012:	ea 89       	ldd	r30, Y+18	; 0x12
    2014:	fb 89       	ldd	r31, Y+19	; 0x13
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	fb 8b       	std	Y+19, r31	; 0x13
    201a:	ea 8b       	std	Y+18, r30	; 0x12
    201c:	0f 5f       	subi	r16, 0xFF	; 255
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    2020:	38 97       	sbiw	r30, 0x08	; 8
    2022:	91 f6       	brne	.-92     	; 0x1fc8 <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    2024:	a3 94       	inc	r10
    2026:	73 94       	inc	r7
    2028:	a5 14       	cp	r10, r5
    202a:	08 f4       	brcc	.+2      	; 0x202e <glcd_draw_char_xy+0x370>
    202c:	af cf       	rjmp	.-162    	; 0x1f8c <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    202e:	63 94       	inc	r6
    2030:	28 e0       	ldi	r18, 0x08	; 8
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	e2 0e       	add	r14, r18
    2036:	f3 1e       	adc	r15, r19
    2038:	c2 0e       	add	r12, r18
    203a:	d3 1e       	adc	r13, r19
    203c:	6b 14       	cp	r6, r11
    203e:	10 f0       	brcs	.+4      	; 0x2044 <glcd_draw_char_xy+0x386>
    2040:	95 2d       	mov	r25, r5
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    2044:	46 2d       	mov	r20, r6
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	5f 83       	std	Y+7, r21	; 0x07
    204a:	4e 83       	std	Y+6, r20	; 0x06
    204c:	ed 82       	std	Y+5, r14	; 0x05
    204e:	74 2c       	mov	r7, r4
    2050:	aa 24       	eor	r10, r10
    2052:	ea cf       	rjmp	.-44     	; 0x2028 <glcd_draw_char_xy+0x36a>
    2054:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    2056:	89 2f       	mov	r24, r25
    2058:	63 96       	adiw	r28, 0x13	; 19
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	9f 90       	pop	r9
    207a:	8f 90       	pop	r8
    207c:	7f 90       	pop	r7
    207e:	6f 90       	pop	r6
    2080:	5f 90       	pop	r5
    2082:	4f 90       	pop	r4
    2084:	3f 90       	pop	r3
    2086:	2f 90       	pop	r2
    2088:	08 95       	ret

0000208a <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	18 2f       	mov	r17, r24
    2094:	06 2f       	mov	r16, r22
    2096:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    2098:	86 2f       	mov	r24, r22
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	40 91 4d 04 	lds	r20, 0x044D
    20a0:	2f e2       	ldi	r18, 0x2F	; 47
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	24 1b       	sub	r18, r20
    20a6:	31 09       	sbc	r19, r1
    20a8:	28 17       	cp	r18, r24
    20aa:	39 07       	cpc	r19, r25
    20ac:	64 f0       	brlt	.+24     	; 0x20c6 <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    20ae:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    20b0:	21 96       	adiw	r28, 0x01	; 1
    20b2:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    20b4:	44 23       	and	r20, r20
    20b6:	39 f0       	breq	.+14     	; 0x20c6 <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    20b8:	81 2f       	mov	r24, r17
    20ba:	60 2f       	mov	r22, r16
    20bc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <glcd_draw_char_xy>
		x += (width + 1);
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	18 0f       	add	r17, r24
    20c4:	f4 cf       	rjmp	.-24     	; 0x20ae <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	08 95       	ret

000020d0 <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	18 2f       	mov	r17, r24
    20da:	06 2f       	mov	r16, r22
    20dc:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    20de:	86 2f       	mov	r24, r22
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	40 91 4d 04 	lds	r20, 0x044D
    20e6:	2f e2       	ldi	r18, 0x2F	; 47
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	24 1b       	sub	r18, r20
    20ec:	31 09       	sbc	r19, r1
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	44 f4       	brge	.+16     	; 0x2104 <glcd_draw_string_xy+0x34>
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    20f6:	81 2f       	mov	r24, r17
    20f8:	60 2f       	mov	r22, r16
    20fa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <glcd_draw_char_xy>
		x += (width + 1);
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	18 0f       	add	r17, r24
		c++;
    2102:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    2104:	48 81       	ld	r20, Y
    2106:	44 23       	and	r20, r20
    2108:	b1 f7       	brne	.-20     	; 0x20f6 <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    2114:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    2116:	84 35       	cpi	r24, 0x54	; 84
    2118:	f0 f4       	brcc	.+60     	; 0x2156 <glcd_get_pixel+0x42>
    211a:	60 33       	cpi	r22, 0x30	; 48
    211c:	e0 f4       	brcc	.+56     	; 0x2156 <glcd_get_pixel+0x42>
    211e:	86 2f       	mov	r24, r22
    2120:	86 95       	lsr	r24
    2122:	86 95       	lsr	r24
    2124:	86 95       	lsr	r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	24 e5       	ldi	r18, 0x54	; 84
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	82 9f       	mul	r24, r18
    212e:	f0 01       	movw	r30, r0
    2130:	83 9f       	mul	r24, r19
    2132:	f0 0d       	add	r31, r0
    2134:	92 9f       	mul	r25, r18
    2136:	f0 0d       	add	r31, r0
    2138:	11 24       	eor	r1, r1
    213a:	e4 0f       	add	r30, r20
    213c:	f1 1d       	adc	r31, r1
    213e:	e2 5b       	subi	r30, 0xB2	; 178
    2140:	fd 4f       	sbci	r31, 0xFD	; 253
    2142:	80 81       	ld	r24, Z
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	67 70       	andi	r22, 0x07	; 7
    2148:	02 c0       	rjmp	.+4      	; 0x214e <glcd_get_pixel+0x3a>
    214a:	95 95       	asr	r25
    214c:	87 95       	ror	r24
    214e:	6a 95       	dec	r22
    2150:	e2 f7       	brpl	.-8      	; 0x214a <glcd_get_pixel+0x36>
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	08 95       	ret
    2156:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    2158:	08 95       	ret

0000215a <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    215a:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    215c:	80 91 46 04 	lds	r24, 0x0446
    2160:	90 91 47 04 	lds	r25, 0x0447
    2164:	48 ef       	ldi	r20, 0xF8	; 248
    2166:	51 e0       	ldi	r21, 0x01	; 1
    2168:	0e 94 67 1c 	call	0x38ce	; 0x38ce <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    216c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <glcd_bbox_refresh>
}
    2170:	08 95       	ret

00002172 <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	08 2f       	mov	r16, r24
    2178:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    217a:	84 35       	cpi	r24, 0x54	; 84
    217c:	e8 f4       	brcc	.+58     	; 0x21b8 <glcd_invert_pixel+0x46>
    217e:	60 33       	cpi	r22, 0x30	; 48
    2180:	d8 f4       	brcc	.+54     	; 0x21b8 <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    2182:	40 2f       	mov	r20, r16
    2184:	21 2f       	mov	r18, r17
    2186:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    218a:	e1 2f       	mov	r30, r17
    218c:	e6 95       	lsr	r30
    218e:	e6 95       	lsr	r30
    2190:	e6 95       	lsr	r30
    2192:	84 e5       	ldi	r24, 0x54	; 84
    2194:	e8 9f       	mul	r30, r24
    2196:	f0 01       	movw	r30, r0
    2198:	11 24       	eor	r1, r1
    219a:	e0 0f       	add	r30, r16
    219c:	f1 1d       	adc	r31, r1
    219e:	e2 5b       	subi	r30, 0xB2	; 178
    21a0:	fd 4f       	sbci	r31, 0xFD	; 253
    21a2:	17 70       	andi	r17, 0x07	; 7
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <glcd_invert_pixel+0x3c>
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	1a 95       	dec	r17
    21b0:	e2 f7       	brpl	.-8      	; 0x21aa <glcd_invert_pixel+0x38>
    21b2:	20 81       	ld	r18, Z
    21b4:	28 27       	eor	r18, r24
    21b6:	20 83       	st	Z, r18
}
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	08 95       	ret

000021be <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	d6 2e       	mov	r13, r22
    21ce:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    21d0:	e8 2e       	mov	r14, r24
    21d2:	ff 24       	eor	r15, r15
    21d4:	e4 0e       	add	r14, r20
    21d6:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    21d8:	c6 2f       	mov	r28, r22
    21da:	d0 e0       	ldi	r29, 0x00	; 0
    21dc:	c2 0f       	add	r28, r18
    21de:	d1 1d       	adc	r29, r1
    21e0:	0b c0       	rjmp	.+22     	; 0x21f8 <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    21e2:	80 2f       	mov	r24, r16
    21e4:	61 2f       	mov	r22, r17
    21e6:	0e 94 b9 10 	call	0x2172	; 0x2172 <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    21ea:	1f 5f       	subi	r17, 0xFF	; 255
    21ec:	81 2f       	mov	r24, r17
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	8c 17       	cp	r24, r28
    21f2:	9d 07       	cpc	r25, r29
    21f4:	b4 f3       	brlt	.-20     	; 0x21e2 <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    21f6:	0f 5f       	subi	r16, 0xFF	; 255
    21f8:	80 2f       	mov	r24, r16
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	8e 15       	cp	r24, r14
    21fe:	9f 05       	cpc	r25, r15
    2200:	14 f4       	brge	.+4      	; 0x2206 <glcd_invert_area+0x48>
    2202:	1d 2d       	mov	r17, r13
    2204:	f3 cf       	rjmp	.-26     	; 0x21ec <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	df 90       	pop	r13
    2214:	08 95       	ret

00002216 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    2216:	a8 2f       	mov	r26, r24
    2218:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    221a:	84 35       	cpi	r24, 0x54	; 84
    221c:	d0 f5       	brcc	.+116    	; 0x2292 <glcd_set_pixel+0x7c>
    221e:	60 33       	cpi	r22, 0x30	; 48
    2220:	c0 f5       	brcc	.+112    	; 0x2292 <glcd_set_pixel+0x7c>
    2222:	56 2f       	mov	r21, r22
    2224:	56 95       	lsr	r21
    2226:	56 95       	lsr	r21
    2228:	56 95       	lsr	r21
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	26 2f       	mov	r18, r22
    222e:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    2230:	44 23       	and	r20, r20
    2232:	a1 f0       	breq	.+40     	; 0x225c <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    2234:	e4 e5       	ldi	r30, 0x54	; 84
    2236:	5e 9f       	mul	r21, r30
    2238:	f0 01       	movw	r30, r0
    223a:	11 24       	eor	r1, r1
    223c:	e8 0f       	add	r30, r24
    223e:	f9 1f       	adc	r31, r25
    2240:	e2 5b       	subi	r30, 0xB2	; 178
    2242:	fd 4f       	sbci	r31, 0xFD	; 253
    2244:	27 70       	andi	r18, 0x07	; 7
    2246:	30 70       	andi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <glcd_set_pixel+0x3c>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	2a 95       	dec	r18
    2254:	e2 f7       	brpl	.-8      	; 0x224e <glcd_set_pixel+0x38>
    2256:	20 81       	ld	r18, Z
    2258:	28 2b       	or	r18, r24
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    225c:	e4 e5       	ldi	r30, 0x54	; 84
    225e:	5e 9f       	mul	r21, r30
    2260:	f0 01       	movw	r30, r0
    2262:	11 24       	eor	r1, r1
    2264:	e8 0f       	add	r30, r24
    2266:	f9 1f       	adc	r31, r25
    2268:	e2 5b       	subi	r30, 0xB2	; 178
    226a:	fd 4f       	sbci	r31, 0xFD	; 253
    226c:	27 70       	andi	r18, 0x07	; 7
    226e:	30 70       	andi	r19, 0x00	; 0
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 c0       	rjmp	.+4      	; 0x227a <glcd_set_pixel+0x64>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	2a 95       	dec	r18
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <glcd_set_pixel+0x60>
    227e:	80 95       	com	r24
    2280:	20 81       	ld	r18, Z
    2282:	28 23       	and	r18, r24
    2284:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    2286:	8a 2f       	mov	r24, r26
    2288:	67 2f       	mov	r22, r23
    228a:	4a 2f       	mov	r20, r26
    228c:	27 2f       	mov	r18, r23
    228e:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
    2292:	08 95       	ret

00002294 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2294:	3f 92       	push	r3
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <glcd_fill_circle+0x24>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <glcd_fill_circle+0x26>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <glcd_fill_circle+0x28>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	b8 2e       	mov	r11, r24
    22c2:	e6 2e       	mov	r14, r22
    22c4:	f4 2e       	mov	r15, r20
    22c6:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    22c8:	04 2f       	mov	r16, r20
    22ca:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    22cc:	64 1b       	sub	r22, r20
    22ce:	48 0f       	add	r20, r24
    22d0:	2f 2d       	mov	r18, r15
    22d2:	2e 0d       	add	r18, r14
    22d4:	8f 19       	sub	r24, r15
    22d6:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    22da:	8e 2c       	mov	r8, r14
    22dc:	99 24       	eor	r9, r9
    22de:	24 01       	movw	r4, r8
    22e0:	40 1a       	sub	r4, r16
    22e2:	51 0a       	sbc	r5, r17
    22e4:	68 01       	movw	r12, r16
    22e6:	c8 0c       	add	r12, r8
    22e8:	d9 1c       	adc	r13, r9
    22ea:	08 c0       	rjmp	.+16     	; 0x22fc <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    22ec:	8b 2d       	mov	r24, r11
    22ee:	64 2d       	mov	r22, r4
    22f0:	46 2d       	mov	r20, r6
    22f2:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    22f6:	08 94       	sec
    22f8:	41 1c       	adc	r4, r1
    22fa:	51 1c       	adc	r5, r1
    22fc:	c4 14       	cp	r12, r4
    22fe:	d5 04       	cpc	r13, r5
    2300:	ac f7       	brge	.-22     	; 0x22ec <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    2302:	dd 24       	eor	r13, r13
    2304:	d3 94       	inc	r13
    2306:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    2308:	00 0f       	add	r16, r16
    230a:	11 1f       	adc	r17, r17
    230c:	40 2e       	mov	r4, r16
    230e:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    2310:	cf 2c       	mov	r12, r15
    2312:	aa 24       	eor	r10, r10
    2314:	00 e0       	ldi	r16, 0x00	; 0
    2316:	10 e0       	ldi	r17, 0x00	; 0
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    231c:	8e 2d       	mov	r24, r14
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 01       	movw	r18, r24
    2322:	21 50       	subi	r18, 0x01	; 1
    2324:	30 40       	sbci	r19, 0x00	; 0
    2326:	3a 83       	std	Y+2, r19	; 0x02
    2328:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    232a:	fc 01       	movw	r30, r24
    232c:	31 96       	adiw	r30, 0x01	; 1
    232e:	fc 83       	std	Y+4, r31	; 0x04
    2330:	eb 83       	std	Y+3, r30	; 0x03
    2332:	54 c0       	rjmp	.+168    	; 0x23dc <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    2334:	d7 fc       	sbrc	r13, 7
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <glcd_fill_circle+0xac>
			y--;
    2338:	ca 94       	dec	r12
			ddF_y += 2;
    233a:	f2 e0       	ldi	r31, 0x02	; 2
    233c:	4f 0e       	add	r4, r31
			f += ddF_y;
    233e:	d4 0c       	add	r13, r4
		}
		x++;
    2340:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    2342:	8c 2d       	mov	r24, r12
    2344:	99 27       	eor	r25, r25
    2346:	87 fd       	sbrc	r24, 7
    2348:	90 95       	com	r25
    234a:	94 01       	movw	r18, r8
    234c:	28 1b       	sub	r18, r24
    234e:	39 0b       	sbc	r19, r25
    2350:	3e 83       	std	Y+6, r19	; 0x06
    2352:	2d 83       	std	Y+5, r18	; 0x05
    2354:	7c 01       	movw	r14, r24
    2356:	e8 0c       	add	r14, r8
    2358:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    235a:	3a 2c       	mov	r3, r10
    235c:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    235e:	5b 2c       	mov	r5, r11
    2360:	5a 18       	sub	r5, r10
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    2364:	83 2d       	mov	r24, r3
    2366:	6d 81       	ldd	r22, Y+5	; 0x05
    2368:	46 2d       	mov	r20, r6
    236a:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    236e:	85 2d       	mov	r24, r5
    2370:	6d 81       	ldd	r22, Y+5	; 0x05
    2372:	46 2d       	mov	r20, r6
    2374:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	ed 81       	ldd	r30, Y+5	; 0x05
    2384:	fe 81       	ldd	r31, Y+6	; 0x06
    2386:	ee 16       	cp	r14, r30
    2388:	ff 06       	cpc	r15, r31
    238a:	64 f7       	brge	.-40     	; 0x2364 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    238c:	29 81       	ldd	r18, Y+1	; 0x01
    238e:	3a 81       	ldd	r19, Y+2	; 0x02
    2390:	20 1b       	sub	r18, r16
    2392:	31 0b       	sbc	r19, r17
    2394:	3e 83       	std	Y+6, r19	; 0x06
    2396:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    2398:	eb 80       	ldd	r14, Y+3	; 0x03
    239a:	fc 80       	ldd	r15, Y+4	; 0x04
    239c:	e0 0e       	add	r14, r16
    239e:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    23a0:	3c 2c       	mov	r3, r12
    23a2:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    23a4:	5b 2c       	mov	r5, r11
    23a6:	5c 18       	sub	r5, r12
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    23aa:	83 2d       	mov	r24, r3
    23ac:	6d 81       	ldd	r22, Y+5	; 0x05
    23ae:	46 2d       	mov	r20, r6
    23b0:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    23b4:	85 2d       	mov	r24, r5
    23b6:	6d 81       	ldd	r22, Y+5	; 0x05
    23b8:	46 2d       	mov	r20, r6
    23ba:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	ed 81       	ldd	r30, Y+5	; 0x05
    23ca:	fe 81       	ldd	r31, Y+6	; 0x06
    23cc:	ee 16       	cp	r14, r30
    23ce:	ff 06       	cpc	r15, r31
    23d0:	64 f7       	brge	.-40     	; 0x23aa <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    23d2:	d7 0c       	add	r13, r7
    23d4:	0f 5f       	subi	r16, 0xFF	; 255
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    23dc:	ac 14       	cp	r10, r12
    23de:	0c f4       	brge	.+2      	; 0x23e2 <glcd_fill_circle+0x14e>
    23e0:	a9 cf       	rjmp	.-174    	; 0x2334 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    23e2:	26 96       	adiw	r28, 0x06	; 6
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	bf 90       	pop	r11
    2400:	af 90       	pop	r10
    2402:	9f 90       	pop	r9
    2404:	8f 90       	pop	r8
    2406:	7f 90       	pop	r7
    2408:	6f 90       	pop	r6
    240a:	5f 90       	pop	r5
    240c:	4f 90       	pop	r4
    240e:	3f 90       	pop	r3
    2410:	08 95       	ret

00002412 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    2412:	7f 92       	push	r7
    2414:	8f 92       	push	r8
    2416:	9f 92       	push	r9
    2418:	af 92       	push	r10
    241a:	bf 92       	push	r11
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	a8 2e       	mov	r10, r24
    242a:	b6 2e       	mov	r11, r22
    242c:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    242e:	99 24       	eor	r9, r9
    2430:	93 94       	inc	r9
    2432:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    2434:	84 2f       	mov	r24, r20
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	78 2e       	mov	r7, r24
    243e:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    2440:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    2442:	ea 2c       	mov	r14, r10
    2444:	e4 1a       	sub	r14, r20
    2446:	06 2f       	mov	r16, r22
    2448:	04 1b       	sub	r16, r20
    244a:	f4 2e       	mov	r15, r20
    244c:	fa 0c       	add	r15, r10
    244e:	14 2f       	mov	r17, r20
    2450:	16 0f       	add	r17, r22
    2452:	8e 2d       	mov	r24, r14
    2454:	60 2f       	mov	r22, r16
    2456:	4f 2d       	mov	r20, r15
    2458:	21 2f       	mov	r18, r17
    245a:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    245e:	8a 2d       	mov	r24, r10
    2460:	61 2f       	mov	r22, r17
    2462:	4c 2d       	mov	r20, r12
    2464:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    2468:	8a 2d       	mov	r24, r10
    246a:	60 2f       	mov	r22, r16
    246c:	4c 2d       	mov	r20, r12
    246e:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    2472:	8f 2d       	mov	r24, r15
    2474:	6b 2d       	mov	r22, r11
    2476:	4c 2d       	mov	r20, r12
    2478:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    247c:	8e 2d       	mov	r24, r14
    247e:	6b 2d       	mov	r22, r11
    2480:	4c 2d       	mov	r20, r12
    2482:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    2486:	ee 24       	eor	r14, r14
    2488:	23 e0       	ldi	r18, 0x03	; 3
    248a:	82 2e       	mov	r8, r18
    248c:	42 c0       	rjmp	.+132    	; 0x2512 <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    248e:	97 fc       	sbrc	r9, 7
    2490:	04 c0       	rjmp	.+8      	; 0x249a <glcd_draw_circle+0x88>
			y--;
    2492:	da 94       	dec	r13
			ddF_y += 2;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	78 0e       	add	r7, r24
			f += ddF_y;
    2498:	97 0c       	add	r9, r7
		}
		x++;
    249a:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    249c:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    249e:	fe 2c       	mov	r15, r14
    24a0:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    24a2:	1d 2d       	mov	r17, r13
    24a4:	1b 0d       	add	r17, r11
    24a6:	8f 2d       	mov	r24, r15
    24a8:	61 2f       	mov	r22, r17
    24aa:	4c 2d       	mov	r20, r12
    24ac:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    24b0:	0a 2d       	mov	r16, r10
    24b2:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    24b4:	80 2f       	mov	r24, r16
    24b6:	61 2f       	mov	r22, r17
    24b8:	4c 2d       	mov	r20, r12
    24ba:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    24be:	1b 2d       	mov	r17, r11
    24c0:	1d 19       	sub	r17, r13
    24c2:	8f 2d       	mov	r24, r15
    24c4:	61 2f       	mov	r22, r17
    24c6:	4c 2d       	mov	r20, r12
    24c8:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    24cc:	80 2f       	mov	r24, r16
    24ce:	61 2f       	mov	r22, r17
    24d0:	4c 2d       	mov	r20, r12
    24d2:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    24d6:	fd 2c       	mov	r15, r13
    24d8:	fa 0c       	add	r15, r10
    24da:	1e 2d       	mov	r17, r14
    24dc:	1b 0d       	add	r17, r11
    24de:	8f 2d       	mov	r24, r15
    24e0:	61 2f       	mov	r22, r17
    24e2:	4c 2d       	mov	r20, r12
    24e4:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    24e8:	0a 2d       	mov	r16, r10
    24ea:	0d 19       	sub	r16, r13
    24ec:	80 2f       	mov	r24, r16
    24ee:	61 2f       	mov	r22, r17
    24f0:	4c 2d       	mov	r20, r12
    24f2:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    24f6:	1b 2d       	mov	r17, r11
    24f8:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    24fa:	8f 2d       	mov	r24, r15
    24fc:	61 2f       	mov	r22, r17
    24fe:	4c 2d       	mov	r20, r12
    2500:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    2504:	80 2f       	mov	r24, r16
    2506:	61 2f       	mov	r22, r17
    2508:	4c 2d       	mov	r20, r12
    250a:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    2512:	ed 14       	cp	r14, r13
    2514:	0c f4       	brge	.+2      	; 0x2518 <glcd_draw_circle+0x106>
    2516:	bb cf       	rjmp	.-138    	; 0x248e <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	8f 90       	pop	r8
    252c:	7f 90       	pop	r7
    252e:	08 95       	ret

00002530 <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    2530:	2f 92       	push	r2
    2532:	3f 92       	push	r3
    2534:	4f 92       	push	r4
    2536:	5f 92       	push	r5
    2538:	6f 92       	push	r6
    253a:	7f 92       	push	r7
    253c:	8f 92       	push	r8
    253e:	9f 92       	push	r9
    2540:	af 92       	push	r10
    2542:	bf 92       	push	r11
    2544:	cf 92       	push	r12
    2546:	df 92       	push	r13
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <glcd_draw_rect_thick+0x26>
    2556:	0f 92       	push	r0
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	b8 2e       	mov	r11, r24
    255e:	a6 2e       	mov	r10, r22
    2560:	44 2e       	mov	r4, r20
    2562:	29 83       	std	Y+1, r18	; 0x01
    2564:	90 2e       	mov	r9, r16
    2566:	8e 2d       	mov	r24, r14
    2568:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    256a:	00 23       	and	r16, r16
    256c:	11 f4       	brne	.+4      	; 0x2572 <glcd_draw_rect_thick+0x42>
    256e:	99 24       	eor	r9, r9
    2570:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    2572:	88 23       	and	r24, r24
    2574:	09 f4       	brne	.+2      	; 0x2578 <glcd_draw_rect_thick+0x48>
    2576:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    2578:	00 e0       	ldi	r16, 0x00	; 0
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	cb 2c       	mov	r12, r11
    257e:	dd 24       	eor	r13, r13
    2580:	16 01       	movw	r2, r12
    2582:	24 0c       	add	r2, r4
    2584:	31 1c       	adc	r3, r1
    2586:	89 80       	ldd	r8, Y+1	; 0x01
    2588:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    258a:	68 2e       	mov	r6, r24
    258c:	77 24       	eor	r7, r7
    258e:	18 c0       	rjmp	.+48     	; 0x25c0 <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    2590:	6a 81       	ldd	r22, Y+2	; 0x02
    2592:	6a 0d       	add	r22, r10
    2594:	8e 2d       	mov	r24, r14
    2596:	45 2d       	mov	r20, r5
    2598:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    259c:	8e 2d       	mov	r24, r14
    259e:	6f 2d       	mov	r22, r15
    25a0:	45 2d       	mov	r20, r5
    25a2:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02
    25b0:	fa 94       	dec	r15
    25b2:	ea 81       	ldd	r30, Y+2	; 0x02
    25b4:	fb 81       	ldd	r31, Y+3	; 0x03
    25b6:	e6 15       	cp	r30, r6
    25b8:	f7 05       	cpc	r31, r7
    25ba:	54 f3       	brlt	.-44     	; 0x2590 <glcd_draw_rect_thick+0x60>
    25bc:	0f 5f       	subi	r16, 0xFF	; 255
    25be:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    25c0:	c8 01       	movw	r24, r16
    25c2:	8c 0d       	add	r24, r12
    25c4:	9d 1d       	adc	r25, r13
    25c6:	82 15       	cp	r24, r2
    25c8:	93 05       	cpc	r25, r3
    25ca:	34 f4       	brge	.+12     	; 0x25d8 <glcd_draw_rect_thick+0xa8>
    25cc:	f8 2c       	mov	r15, r8
    25ce:	1b 82       	std	Y+3, r1	; 0x03
    25d0:	1a 82       	std	Y+2, r1	; 0x02
    25d2:	eb 2c       	mov	r14, r11
    25d4:	e0 0e       	add	r14, r16
    25d6:	ec cf       	rjmp	.-40     	; 0x25b0 <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    25d8:	00 e0       	ldi	r16, 0x00	; 0
    25da:	10 e0       	ldi	r17, 0x00	; 0
    25dc:	ca 2c       	mov	r12, r10
    25de:	dd 24       	eor	r13, r13
    25e0:	36 01       	movw	r6, r12
    25e2:	f9 81       	ldd	r31, Y+1	; 0x01
    25e4:	6f 0e       	add	r6, r31
    25e6:	71 1c       	adc	r7, r1
    25e8:	34 2c       	mov	r3, r4
    25ea:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    25ec:	89 2c       	mov	r8, r9
    25ee:	99 24       	eor	r9, r9
    25f0:	18 c0       	rjmp	.+48     	; 0x2622 <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	8b 0d       	add	r24, r11
    25f6:	6f 2d       	mov	r22, r15
    25f8:	45 2d       	mov	r20, r5
    25fa:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    25fe:	8e 2d       	mov	r24, r14
    2600:	6f 2d       	mov	r22, r15
    2602:	45 2d       	mov	r20, r5
    2604:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	9b 83       	std	Y+3, r25	; 0x03
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	ea 94       	dec	r14
    2614:	ea 81       	ldd	r30, Y+2	; 0x02
    2616:	fb 81       	ldd	r31, Y+3	; 0x03
    2618:	e8 15       	cp	r30, r8
    261a:	f9 05       	cpc	r31, r9
    261c:	54 f3       	brlt	.-44     	; 0x25f2 <glcd_draw_rect_thick+0xc2>
    261e:	0f 5f       	subi	r16, 0xFF	; 255
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    2622:	c8 01       	movw	r24, r16
    2624:	8c 0d       	add	r24, r12
    2626:	9d 1d       	adc	r25, r13
    2628:	86 15       	cp	r24, r6
    262a:	97 05       	cpc	r25, r7
    262c:	34 f4       	brge	.+12     	; 0x263a <glcd_draw_rect_thick+0x10a>
    262e:	e3 2c       	mov	r14, r3
    2630:	1b 82       	std	Y+3, r1	; 0x03
    2632:	1a 82       	std	Y+2, r1	; 0x02
    2634:	fa 2c       	mov	r15, r10
    2636:	f0 0e       	add	r15, r16
    2638:	ec cf       	rjmp	.-40     	; 0x2612 <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    263a:	4b 2d       	mov	r20, r11
    263c:	41 50       	subi	r20, 0x01	; 1
    263e:	44 0d       	add	r20, r4
    2640:	2a 2d       	mov	r18, r10
    2642:	21 50       	subi	r18, 0x01	; 1
    2644:	f9 81       	ldd	r31, Y+1	; 0x01
    2646:	2f 0f       	add	r18, r31
    2648:	8b 2d       	mov	r24, r11
    264a:	6a 2d       	mov	r22, r10
    264c:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	ff 90       	pop	r15
    2660:	ef 90       	pop	r14
    2662:	df 90       	pop	r13
    2664:	cf 90       	pop	r12
    2666:	bf 90       	pop	r11
    2668:	af 90       	pop	r10
    266a:	9f 90       	pop	r9
    266c:	8f 90       	pop	r8
    266e:	7f 90       	pop	r7
    2670:	6f 90       	pop	r6
    2672:	5f 90       	pop	r5
    2674:	4f 90       	pop	r4
    2676:	3f 90       	pop	r3
    2678:	2f 90       	pop	r2
    267a:	08 95       	ret

0000267c <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    267c:	6f 92       	push	r6
    267e:	7f 92       	push	r7
    2680:	8f 92       	push	r8
    2682:	9f 92       	push	r9
    2684:	af 92       	push	r10
    2686:	bf 92       	push	r11
    2688:	cf 92       	push	r12
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	e8 2e       	mov	r14, r24
    269a:	f6 2e       	mov	r15, r22
    269c:	a4 2e       	mov	r10, r20
    269e:	72 2e       	mov	r7, r18
    26a0:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    26a2:	c0 e0       	ldi	r28, 0x00	; 0
    26a4:	d0 e0       	ldi	r29, 0x00	; 0
    26a6:	c8 2e       	mov	r12, r24
    26a8:	dd 24       	eor	r13, r13
    26aa:	46 01       	movw	r8, r12
    26ac:	84 0e       	add	r8, r20
    26ae:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    26b0:	fa 94       	dec	r15
    26b2:	0f 2d       	mov	r16, r15
    26b4:	02 0f       	add	r16, r18
    26b6:	f3 94       	inc	r15
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    26ba:	1e 2d       	mov	r17, r14
    26bc:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    26be:	81 2f       	mov	r24, r17
    26c0:	6f 2d       	mov	r22, r15
    26c2:	4b 2d       	mov	r20, r11
    26c4:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    26c8:	81 2f       	mov	r24, r17
    26ca:	60 2f       	mov	r22, r16
    26cc:	4b 2d       	mov	r20, r11
    26ce:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    26d2:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    26d4:	ce 01       	movw	r24, r28
    26d6:	8c 0d       	add	r24, r12
    26d8:	9d 1d       	adc	r25, r13
    26da:	88 15       	cp	r24, r8
    26dc:	99 05       	cpc	r25, r9
    26de:	6c f3       	brlt	.-38     	; 0x26ba <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    26e0:	c0 e0       	ldi	r28, 0x00	; 0
    26e2:	d0 e0       	ldi	r29, 0x00	; 0
    26e4:	cf 2c       	mov	r12, r15
    26e6:	dd 24       	eor	r13, r13
    26e8:	46 01       	movw	r8, r12
    26ea:	87 0c       	add	r8, r7
    26ec:	91 1c       	adc	r9, r1
    26ee:	0e 2d       	mov	r16, r14
    26f0:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    26f2:	60 2e       	mov	r6, r16
    26f4:	6a 0c       	add	r6, r10
    26f6:	0d c0       	rjmp	.+26     	; 0x2712 <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    26f8:	1f 2d       	mov	r17, r15
    26fa:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    26fc:	8e 2d       	mov	r24, r14
    26fe:	61 2f       	mov	r22, r17
    2700:	4b 2d       	mov	r20, r11
    2702:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    2706:	86 2d       	mov	r24, r6
    2708:	61 2f       	mov	r22, r17
    270a:	4b 2d       	mov	r20, r11
    270c:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    2710:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    2712:	ce 01       	movw	r24, r28
    2714:	8c 0d       	add	r24, r12
    2716:	9d 1d       	adc	r25, r13
    2718:	88 15       	cp	r24, r8
    271a:	99 05       	cpc	r25, r9
    271c:	6c f3       	brlt	.-38     	; 0x26f8 <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    271e:	0a 0d       	add	r16, r10
    2720:	2f 2d       	mov	r18, r15
    2722:	21 50       	subi	r18, 0x01	; 1
    2724:	27 0d       	add	r18, r7
    2726:	8e 2d       	mov	r24, r14
    2728:	6f 2d       	mov	r22, r15
    272a:	40 2f       	mov	r20, r16
    272c:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
}
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	bf 90       	pop	r11
    2742:	af 90       	pop	r10
    2744:	9f 90       	pop	r9
    2746:	8f 90       	pop	r8
    2748:	7f 90       	pop	r7
    274a:	6f 90       	pop	r6
    274c:	08 95       	ret

0000274e <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    274e:	2f 92       	push	r2
    2750:	3f 92       	push	r3
    2752:	4f 92       	push	r4
    2754:	5f 92       	push	r5
    2756:	6f 92       	push	r6
    2758:	7f 92       	push	r7
    275a:	8f 92       	push	r8
    275c:	9f 92       	push	r9
    275e:	af 92       	push	r10
    2760:	bf 92       	push	r11
    2762:	cf 92       	push	r12
    2764:	df 92       	push	r13
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	d8 2e       	mov	r13, r24
    2774:	c6 2e       	mov	r12, r22
    2776:	44 2e       	mov	r4, r20
    2778:	32 2e       	mov	r3, r18
    277a:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    277c:	00 e0       	ldi	r16, 0x00	; 0
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	a8 2e       	mov	r10, r24
    2782:	bb 24       	eor	r11, r11
    2784:	35 01       	movw	r6, r10
    2786:	64 0e       	add	r6, r20
    2788:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    278a:	e6 2e       	mov	r14, r22
    278c:	ff 24       	eor	r15, r15
    278e:	47 01       	movw	r8, r14
    2790:	82 0e       	add	r8, r18
    2792:	91 1c       	adc	r9, r1
    2794:	14 c0       	rjmp	.+40     	; 0x27be <glcd_fill_rect+0x70>
    2796:	c0 e0       	ldi	r28, 0x00	; 0
    2798:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    279a:	5d 2c       	mov	r5, r13
    279c:	50 0e       	add	r5, r16
    279e:	07 c0       	rjmp	.+14     	; 0x27ae <glcd_fill_rect+0x60>
    27a0:	6c 2d       	mov	r22, r12
    27a2:	6c 0f       	add	r22, r28
    27a4:	85 2d       	mov	r24, r5
    27a6:	42 2d       	mov	r20, r2
    27a8:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
    27ac:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    27ae:	ce 01       	movw	r24, r28
    27b0:	8e 0d       	add	r24, r14
    27b2:	9f 1d       	adc	r25, r15
    27b4:	88 15       	cp	r24, r8
    27b6:	99 05       	cpc	r25, r9
    27b8:	9c f3       	brlt	.-26     	; 0x27a0 <glcd_fill_rect+0x52>
    27ba:	0f 5f       	subi	r16, 0xFF	; 255
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    27be:	c8 01       	movw	r24, r16
    27c0:	8a 0d       	add	r24, r10
    27c2:	9b 1d       	adc	r25, r11
    27c4:	86 15       	cp	r24, r6
    27c6:	97 05       	cpc	r25, r7
    27c8:	34 f3       	brlt	.-52     	; 0x2796 <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    27ca:	4d 2d       	mov	r20, r13
    27cc:	41 50       	subi	r20, 0x01	; 1
    27ce:	44 0d       	add	r20, r4
    27d0:	2c 2d       	mov	r18, r12
    27d2:	21 50       	subi	r18, 0x01	; 1
    27d4:	23 0d       	add	r18, r3
    27d6:	8d 2d       	mov	r24, r13
    27d8:	6c 2d       	mov	r22, r12
    27da:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	bf 90       	pop	r11
    27f0:	af 90       	pop	r10
    27f2:	9f 90       	pop	r9
    27f4:	8f 90       	pop	r8
    27f6:	7f 90       	pop	r7
    27f8:	6f 90       	pop	r6
    27fa:	5f 90       	pop	r5
    27fc:	4f 90       	pop	r4
    27fe:	3f 90       	pop	r3
    2800:	2f 90       	pop	r2
    2802:	08 95       	ret

00002804 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	f8 2e       	mov	r15, r24
    2818:	e6 2e       	mov	r14, r22
    281a:	d4 2e       	mov	r13, r20
    281c:	12 2f       	mov	r17, r18
    281e:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    2820:	aa 24       	eor	r10, r10
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	26 1b       	sub	r18, r22
    2826:	31 09       	sbc	r19, r1
    2828:	37 ff       	sbrs	r19, 7
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <glcd_draw_line+0x2e>
    282c:	30 95       	com	r19
    282e:	21 95       	neg	r18
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	8d 2d       	mov	r24, r13
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	8f 19       	sub	r24, r15
    2838:	91 09       	sbc	r25, r1
    283a:	97 ff       	sbrs	r25, 7
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <glcd_draw_line+0x40>
    283e:	90 95       	com	r25
    2840:	81 95       	neg	r24
    2842:	9f 4f       	sbci	r25, 0xFF	; 255
    2844:	82 17       	cp	r24, r18
    2846:	93 07       	cpc	r25, r19
    2848:	44 f4       	brge	.+16     	; 0x285a <glcd_draw_line+0x56>
    284a:	aa 24       	eor	r10, r10
    284c:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    284e:	8e 2d       	mov	r24, r14
    2850:	ef 2c       	mov	r14, r15
    2852:	f8 2e       	mov	r15, r24
    2854:	81 2f       	mov	r24, r17
    2856:	1d 2d       	mov	r17, r13
    2858:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    285a:	df 14       	cp	r13, r15
    285c:	30 f4       	brcc	.+12     	; 0x286a <glcd_draw_line+0x66>
    285e:	8d 2d       	mov	r24, r13
    2860:	df 2c       	mov	r13, r15
    2862:	f8 2e       	mov	r15, r24
    2864:	81 2f       	mov	r24, r17
    2866:	1e 2d       	mov	r17, r14
    2868:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    286a:	8f 2d       	mov	r24, r15
    286c:	6e 2d       	mov	r22, r14
    286e:	4d 2d       	mov	r20, r13
    2870:	21 2f       	mov	r18, r17
    2872:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>

	dx = x1 - x0;
    2876:	cd 2c       	mov	r12, r13
    2878:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    287a:	81 2f       	mov	r24, r17
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	8e 19       	sub	r24, r14
    2880:	91 09       	sbc	r25, r1
    2882:	97 ff       	sbrs	r25, 7
    2884:	03 c0       	rjmp	.+6      	; 0x288c <glcd_draw_line+0x88>
    2886:	90 95       	com	r25
    2888:	81 95       	neg	r24
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    288e:	e1 16       	cp	r14, r17
    2890:	10 f0       	brcs	.+4      	; 0x2896 <glcd_draw_line+0x92>
    2892:	0f ef       	ldi	r16, 0xFF	; 255
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <glcd_draw_line+0x94>
    2896:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    2898:	1c 2d       	mov	r17, r12
    289a:	16 95       	lsr	r17
    289c:	10 c0       	rjmp	.+32     	; 0x28be <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    289e:	aa 20       	and	r10, r10
    28a0:	19 f0       	breq	.+6      	; 0x28a8 <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    28a2:	8e 2d       	mov	r24, r14
    28a4:	6f 2d       	mov	r22, r15
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    28a8:	8f 2d       	mov	r24, r15
    28aa:	6e 2d       	mov	r22, r14
    28ac:	49 2d       	mov	r20, r9
    28ae:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
		}
		err -= dy;
    28b2:	1b 19       	sub	r17, r11
		if (err < 0) {
    28b4:	17 ff       	sbrs	r17, 7
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <glcd_draw_line+0xb8>
			y0 += ystep;
    28b8:	e0 0e       	add	r14, r16
			err += dx;
    28ba:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    28bc:	f3 94       	inc	r15
    28be:	df 14       	cp	r13, r15
    28c0:	70 f7       	brcc	.-36     	; 0x289e <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	bf 90       	pop	r11
    28d0:	af 90       	pop	r10
    28d2:	9f 90       	pop	r9
    28d4:	08 95       	ret

000028d6 <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	e8 2e       	mov	r14, r24
    28e4:	d6 2e       	mov	r13, r22
    28e6:	14 2f       	mov	r17, r20
    28e8:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    28ea:	0e 94 3e 13 	call	0x267c	; 0x267c <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    28ee:	1e 0d       	add	r17, r14
    28f0:	fd 0c       	add	r15, r13
    28f2:	8e 2d       	mov	r24, r14
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	6f 2d       	mov	r22, r15
    28f8:	41 2f       	mov	r20, r17
    28fa:	2f 2d       	mov	r18, r15
    28fc:	0e 94 02 14 	call	0x2804	; 0x2804 <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    2900:	d3 94       	inc	r13
    2902:	81 2f       	mov	r24, r17
    2904:	6d 2d       	mov	r22, r13
    2906:	41 2f       	mov	r20, r17
    2908:	2f 2d       	mov	r18, r15
    290a:	0e 94 02 14 	call	0x2804	; 0x2804 <glcd_draw_line>
}
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	df 90       	pop	r13
    2918:	cf 90       	pop	r12
    291a:	08 95       	ret

0000291c <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    291c:	88 e4       	ldi	r24, 0x48	; 72
    291e:	92 e0       	ldi	r25, 0x02	; 2
    2920:	0e 94 ad 10 	call	0x215a	; 0x215a <glcd_draw_bitmap>
	glcd_write();	
    2924:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
	while (1) {
		DEMO_RETURN();
    2928:	80 91 42 02 	lds	r24, 0x0242
    292c:	88 23       	and	r24, r24
    292e:	e1 f3       	breq	.-8      	; 0x2928 <glcd_test_bitmap_128x64+0xc>
    2930:	10 92 42 02 	sts	0x0242, r1
	}
}
    2934:	08 95       	ret

00002936 <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
	glcd_clear();
    293e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
	glcd_write();
    2942:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2946:	40 c0       	rjmp	.+128    	; 0x29c8 <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	60 e0       	ldi	r22, 0x00	; 0
    294c:	42 e3       	ldi	r20, 0x32	; 50
    294e:	22 e3       	ldi	r18, 0x32	; 50
    2950:	0c 2f       	mov	r16, r28
    2952:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2956:	8c e3       	ldi	r24, 0x3C	; 60
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	42 e3       	ldi	r20, 0x32	; 50
    295c:	2e e1       	ldi	r18, 0x1E	; 30
    295e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    2962:	8c e3       	ldi	r24, 0x3C	; 60
    2964:	63 e2       	ldi	r22, 0x23	; 35
    2966:	4c e3       	ldi	r20, 0x3C	; 60
    2968:	24 e1       	ldi	r18, 0x14	; 20
    296a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    296e:	80 91 42 02 	lds	r24, 0x0242
    2972:	88 23       	and	r24, r24
    2974:	f9 f4       	brne	.+62     	; 0x29b4 <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    2976:	64 96       	adiw	r28, 0x14	; 20
    2978:	cf 3f       	cpi	r28, 0xFF	; 255
    297a:	d1 05       	cpc	r29, r1
    297c:	29 f3       	breq	.-54     	; 0x2948 <glcd_test_scrolling_graph+0x12>
    297e:	20 f3       	brcs	.-56     	; 0x2948 <glcd_test_scrolling_graph+0x12>
    2980:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    2982:	01 2f       	mov	r16, r17
    2984:	00 95       	com	r16
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	42 e3       	ldi	r20, 0x32	; 50
    298c:	22 e3       	ldi	r18, 0x32	; 50
    298e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2992:	8c e3       	ldi	r24, 0x3C	; 60
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	42 e3       	ldi	r20, 0x32	; 50
    2998:	2e e1       	ldi	r18, 0x1E	; 30
    299a:	01 2f       	mov	r16, r17
    299c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    29a0:	8c e3       	ldi	r24, 0x3C	; 60
    29a2:	63 e2       	ldi	r22, 0x23	; 35
    29a4:	4c e3       	ldi	r20, 0x3C	; 60
    29a6:	24 e1       	ldi	r18, 0x14	; 20
    29a8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    29ac:	80 91 42 02 	lds	r24, 0x0242
    29b0:	88 23       	and	r24, r24
    29b2:	39 f0       	breq	.+14     	; 0x29c2 <glcd_test_scrolling_graph+0x8c>
    29b4:	10 92 42 02 	sts	0x0242, r1
		}
	}	
}
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    29c2:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    29c4:	14 30       	cpi	r17, 0x04	; 4
    29c6:	e9 f6       	brne	.-70     	; 0x2982 <glcd_test_scrolling_graph+0x4c>
    29c8:	c0 e0       	ldi	r28, 0x00	; 0
    29ca:	d0 e0       	ldi	r29, 0x00	; 0
    29cc:	d5 cf       	rjmp	.-86     	; 0x2978 <glcd_test_scrolling_graph+0x42>

000029ce <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    29ce:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    29d0:	80 eb       	ldi	r24, 0xB0	; 176
    29d2:	97 e0       	ldi	r25, 0x07	; 7
    29d4:	65 e0       	ldi	r22, 0x05	; 5
    29d6:	47 e0       	ldi	r20, 0x07	; 7
    29d8:	20 e2       	ldi	r18, 0x20	; 32
    29da:	0f e7       	ldi	r16, 0x7F	; 127
    29dc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <glcd_tiny_set_font>
	glcd_clear_buffer();
    29e0:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	4d ed       	ldi	r20, 0xDD	; 221
    29ea:	51 e0       	ldi	r21, 0x01	; 1
    29ec:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
	glcd_write();
    29f0:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
	while(1) {
		DEMO_RETURN();
    29f4:	80 91 42 02 	lds	r24, 0x0242
    29f8:	88 23       	and	r24, r24
    29fa:	e1 f3       	breq	.-8      	; 0x29f4 <glcd_test_hello_world+0x26>
    29fc:	10 92 42 02 	sts	0x0242, r1
	}
}
    2a00:	0f 91       	pop	r16
    2a02:	08 95       	ret

00002a04 <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2a04:	cf 92       	push	r12
    2a06:	ef 92       	push	r14
    2a08:	0f 93       	push	r16
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2a0e:	80 eb       	ldi	r24, 0xB0	; 176
    2a10:	97 e0       	ldi	r25, 0x07	; 7
    2a12:	65 e0       	ldi	r22, 0x05	; 5
    2a14:	47 e0       	ldi	r20, 0x07	; 7
    2a16:	20 e2       	ldi	r18, 0x20	; 32
    2a18:	0f e7       	ldi	r16, 0x7F	; 127
    2a1a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <glcd_tiny_set_font>
	glcd_clear_buffer();
    2a1e:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	4a ee       	ldi	r20, 0xEA	; 234
    2a28:	51 e0       	ldi	r21, 0x01	; 1
    2a2a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
	glcd_write();
    2a2e:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2a32:	80 ed       	ldi	r24, 0xD0	; 208
    2a34:	97 e0       	ldi	r25, 0x07	; 7
    2a36:	20 e9       	ldi	r18, 0x90	; 144
    2a38:	31 e0       	ldi	r19, 0x01	; 1
    2a3a:	f9 01       	movw	r30, r18
    2a3c:	31 97       	sbiw	r30, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	d9 f7       	brne	.-10     	; 0x2a3a <glcd_test_rectangles+0x36>
    2a44:	c0 e9       	ldi	r28, 0x90	; 144
    2a46:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    2a48:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	44 e6       	ldi	r20, 0x64	; 100
    2a52:	22 e3       	ldi	r18, 0x32	; 50
    2a54:	01 e0       	ldi	r16, 0x01	; 1
    2a56:	0e 94 3e 13 	call	0x267c	; 0x267c <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	69 e0       	ldi	r22, 0x09	; 9
    2a5e:	49 ef       	ldi	r20, 0xF9	; 249
    2a60:	51 e0       	ldi	r21, 0x01	; 1
    2a62:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
		glcd_write();
    2a66:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2a6a:	88 e8       	ldi	r24, 0x88	; 136
    2a6c:	93 e1       	ldi	r25, 0x13	; 19
    2a6e:	fe 01       	movw	r30, r28
    2a70:	31 97       	sbiw	r30, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a76:	d9 f7       	brne	.-10     	; 0x2a6e <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2a78:	80 91 42 02 	lds	r24, 0x0242
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <glcd_test_rectangles+0x7e>
    2a80:	85 c0       	rjmp	.+266    	; 0x2b8c <glcd_test_rectangles+0x188>
		
		glcd_clear();
    2a82:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	69 e0       	ldi	r22, 0x09	; 9
    2a8a:	48 e0       	ldi	r20, 0x08	; 8
    2a8c:	52 e0       	ldi	r21, 0x02	; 2
    2a8e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
		glcd_write();
    2a92:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	65 e0       	ldi	r22, 0x05	; 5
    2a9a:	40 e5       	ldi	r20, 0x50	; 80
    2a9c:	2e e1       	ldi	r18, 0x1E	; 30
    2a9e:	03 e0       	ldi	r16, 0x03	; 3
    2aa0:	56 e0       	ldi	r21, 0x06	; 6
    2aa2:	e5 2e       	mov	r14, r21
    2aa4:	cc 24       	eor	r12, r12
    2aa6:	c3 94       	inc	r12
    2aa8:	0e 94 98 12 	call	0x2530	; 0x2530 <glcd_draw_rect_thick>
		glcd_write();
    2aac:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2ab0:	88 e8       	ldi	r24, 0x88	; 136
    2ab2:	93 e1       	ldi	r25, 0x13	; 19
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	31 97       	sbiw	r30, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	d9 f7       	brne	.-10     	; 0x2ab4 <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    2abe:	80 91 42 02 	lds	r24, 0x0242
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <glcd_test_rectangles+0xc4>
    2ac6:	62 c0       	rjmp	.+196    	; 0x2b8c <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	44 e1       	ldi	r20, 0x14	; 20
    2ace:	24 e1       	ldi	r18, 0x14	; 20
    2ad0:	02 e0       	ldi	r16, 0x02	; 2
    2ad2:	32 e0       	ldi	r19, 0x02	; 2
    2ad4:	e3 2e       	mov	r14, r19
    2ad6:	cc 24       	eor	r12, r12
    2ad8:	c3 94       	inc	r12
    2ada:	0e 94 98 12 	call	0x2530	; 0x2530 <glcd_draw_rect_thick>
		glcd_write();
    2ade:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2ae2:	88 e8       	ldi	r24, 0x88	; 136
    2ae4:	93 e1       	ldi	r25, 0x13	; 19
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	31 97       	sbiw	r30, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	d9 f7       	brne	.-10     	; 0x2ae6 <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    2af0:	80 91 42 02 	lds	r24, 0x0242
    2af4:	88 23       	and	r24, r24
    2af6:	09 f0       	breq	.+2      	; 0x2afa <glcd_test_rectangles+0xf6>
    2af8:	49 c0       	rjmp	.+146    	; 0x2b8c <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2afa:	84 e6       	ldi	r24, 0x64	; 100
    2afc:	6a e0       	ldi	r22, 0x0A	; 10
    2afe:	44 e1       	ldi	r20, 0x14	; 20
    2b00:	24 e1       	ldi	r18, 0x14	; 20
    2b02:	05 e0       	ldi	r16, 0x05	; 5
    2b04:	95 e0       	ldi	r25, 0x05	; 5
    2b06:	e9 2e       	mov	r14, r25
    2b08:	cc 24       	eor	r12, r12
    2b0a:	c3 94       	inc	r12
    2b0c:	0e 94 98 12 	call	0x2530	; 0x2530 <glcd_draw_rect_thick>
		glcd_write();
    2b10:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2b14:	88 e8       	ldi	r24, 0x88	; 136
    2b16:	93 e1       	ldi	r25, 0x13	; 19
    2b18:	fe 01       	movw	r30, r28
    2b1a:	31 97       	sbiw	r30, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	d9 f7       	brne	.-10     	; 0x2b18 <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    2b22:	80 91 42 02 	lds	r24, 0x0242
    2b26:	88 23       	and	r24, r24
    2b28:	89 f5       	brne	.+98     	; 0x2b8c <glcd_test_rectangles+0x188>

		glcd_clear();
    2b2a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	69 e0       	ldi	r22, 0x09	; 9
    2b32:	4d e1       	ldi	r20, 0x1D	; 29
    2b34:	52 e0       	ldi	r21, 0x02	; 2
    2b36:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	4d e2       	ldi	r20, 0x2D	; 45
    2b40:	2e e1       	ldi	r18, 0x1E	; 30
    2b42:	01 e0       	ldi	r16, 0x01	; 1
    2b44:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <glcd_draw_rect_shadow>
		glcd_write();
    2b48:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2b4c:	88 e8       	ldi	r24, 0x88	; 136
    2b4e:	93 e1       	ldi	r25, 0x13	; 19
    2b50:	fe 01       	movw	r30, r28
    2b52:	31 97       	sbiw	r30, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	d9 f7       	brne	.-10     	; 0x2b50 <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    2b5a:	80 91 42 02 	lds	r24, 0x0242
    2b5e:	88 23       	and	r24, r24
    2b60:	a9 f4       	brne	.+42     	; 0x2b8c <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2b62:	8f e5       	ldi	r24, 0x5F	; 95
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	4e e1       	ldi	r20, 0x1E	; 30
    2b68:	2e e1       	ldi	r18, 0x1E	; 30
    2b6a:	01 e0       	ldi	r16, 0x01	; 1
    2b6c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <glcd_draw_rect_shadow>
		glcd_write();
    2b70:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2b74:	88 e8       	ldi	r24, 0x88	; 136
    2b76:	93 e1       	ldi	r25, 0x13	; 19
    2b78:	fe 01       	movw	r30, r28
    2b7a:	31 97       	sbiw	r30, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	d9 f7       	brne	.-10     	; 0x2b78 <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    2b82:	80 91 42 02 	lds	r24, 0x0242
    2b86:	88 23       	and	r24, r24
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <glcd_test_rectangles+0x188>
    2b8a:	5e cf       	rjmp	.-324    	; 0x2a48 <glcd_test_rectangles+0x44>
    2b8c:	10 92 42 02 	sts	0x0242, r1
		
	}
	
}
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	0f 91       	pop	r16
    2b96:	ef 90       	pop	r14
    2b98:	cf 90       	pop	r12
    2b9a:	08 95       	ret

00002b9c <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	2f 97       	sbiw	r28, 0x0f	; 15
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2bbe:	80 eb       	ldi	r24, 0xB0	; 176
    2bc0:	97 e0       	ldi	r25, 0x07	; 7
    2bc2:	65 e0       	ldi	r22, 0x05	; 5
    2bc4:	47 e0       	ldi	r20, 0x07	; 7
    2bc6:	20 e2       	ldi	r18, 0x20	; 32
    2bc8:	0f e7       	ldi	r16, 0x7F	; 127
    2bca:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <glcd_tiny_set_font>
    2bce:	00 e2       	ldi	r16, 0x20	; 32
    2bd0:	7e 01       	movw	r14, r28
    2bd2:	08 94       	sec
    2bd4:	e1 1c       	adc	r14, r1
    2bd6:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2bd8:	7f e0       	ldi	r23, 0x0F	; 15
    2bda:	a7 2e       	mov	r10, r23
    2bdc:	b1 2c       	mov	r11, r1
    2bde:	ac 0e       	add	r10, r28
    2be0:	bd 1e       	adc	r11, r29
    2be2:	60 e9       	ldi	r22, 0x90	; 144
    2be4:	c6 2e       	mov	r12, r22
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2bea:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2bec:	00 83       	st	Z, r16
			c++;
    2bee:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    2bf0:	07 fd       	sbrc	r16, 7
    2bf2:	00 e2       	ldi	r16, 0x20	; 32
    2bf4:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2bf6:	ea 15       	cp	r30, r10
    2bf8:	fb 05       	cpc	r31, r11
    2bfa:	c1 f7       	brne	.-16     	; 0x2bec <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2bfc:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2bfe:	c7 01       	movw	r24, r14
    2c00:	0e 94 30 19 	call	0x3260	; 0x3260 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2c04:	80 91 42 02 	lds	r24, 0x0242
    2c08:	88 23       	and	r24, r24
    2c0a:	91 f0       	breq	.+36     	; 0x2c30 <glcd_test_tiny_text+0x94>
    2c0c:	10 92 42 02 	sts	0x0242, r1
		
		delay_ms(1000);
	}

}
    2c10:	2f 96       	adiw	r28, 0x0f	; 15
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    2c30:	80 e1       	ldi	r24, 0x10	; 16
    2c32:	97 e2       	ldi	r25, 0x27	; 39
    2c34:	f6 01       	movw	r30, r12
    2c36:	31 97       	sbiw	r30, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	d9 f7       	brne	.-10     	; 0x2c34 <glcd_test_tiny_text+0x98>
    2c3e:	d5 cf       	rjmp	.-86     	; 0x2bea <glcd_test_tiny_text+0x4e>

00002c40 <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2c48:	80 e9       	ldi	r24, 0x90	; 144
    2c4a:	99 e0       	ldi	r25, 0x09	; 9
    2c4c:	6f e0       	ldi	r22, 0x0F	; 15
    2c4e:	45 e1       	ldi	r20, 0x15	; 21
    2c50:	2e e2       	ldi	r18, 0x2E	; 46
    2c52:	09 e3       	ldi	r16, 0x39	; 57
    2c54:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    2c58:	1e e2       	ldi	r17, 0x2E	; 46
    2c5a:	80 91 4d 04 	lds	r24, 0x044D
    2c5e:	18 1b       	sub	r17, r24
    2c60:	00 e0       	ldi	r16, 0x00	; 0
    2c62:	c0 e9       	ldi	r28, 0x90	; 144
    2c64:	d1 e0       	ldi	r29, 0x01	; 1
    2c66:	16 c0       	rjmp	.+44     	; 0x2c94 <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    2c68:	80 91 42 02 	lds	r24, 0x0242
    2c6c:	88 23       	and	r24, r24
    2c6e:	d1 f4       	brne	.+52     	; 0x2ca4 <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    2c70:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	60 2f       	mov	r22, r16
    2c78:	43 e3       	ldi	r20, 0x33	; 51
    2c7a:	52 e0       	ldi	r21, 0x02	; 2
    2c7c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
			glcd_write();
    2c80:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2c84:	80 e2       	ldi	r24, 0x20	; 32
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	fe 01       	movw	r30, r28
    2c8a:	31 97       	sbiw	r30, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	d9 f7       	brne	.-10     	; 0x2c88 <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    2c92:	0f 5f       	subi	r16, 0xFF	; 255
    2c94:	01 17       	cp	r16, r17
    2c96:	40 f3       	brcs	.-48     	; 0x2c68 <glcd_test_text_up_down+0x28>
    2c98:	01 2f       	mov	r16, r17
    2c9a:	1d c0       	rjmp	.+58     	; 0x2cd6 <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    2c9c:	80 91 42 02 	lds	r24, 0x0242
    2ca0:	88 23       	and	r24, r24
    2ca2:	39 f0       	breq	.+14     	; 0x2cb2 <glcd_test_text_up_down+0x72>
    2ca4:	10 92 42 02 	sts	0x0242, r1
			delay_ms(80);
		}
		
	}

}
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    2cb2:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	60 2f       	mov	r22, r16
    2cba:	47 e3       	ldi	r20, 0x37	; 55
    2cbc:	52 e0       	ldi	r21, 0x02	; 2
    2cbe:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
			glcd_write();
    2cc2:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2cc6:	80 e2       	ldi	r24, 0x20	; 32
    2cc8:	93 e0       	ldi	r25, 0x03	; 3
    2cca:	fe 01       	movw	r30, r28
    2ccc:	31 97       	sbiw	r30, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	d9 f7       	brne	.-10     	; 0x2cca <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    2cd4:	01 50       	subi	r16, 0x01	; 1
    2cd6:	00 23       	and	r16, r16
    2cd8:	09 f7       	brne	.-62     	; 0x2c9c <glcd_test_text_up_down+0x5c>
    2cda:	dc cf       	rjmp	.-72     	; 0x2c94 <glcd_test_text_up_down+0x54>

00002cdc <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2cdc:	8f 92       	push	r8
    2cde:	9f 92       	push	r9
    2ce0:	af 92       	push	r10
    2ce2:	bf 92       	push	r11
    2ce4:	cf 92       	push	r12
    2ce6:	df 92       	push	r13
    2ce8:	ef 92       	push	r14
    2cea:	0f 93       	push	r16
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	28 97       	sbiw	r28, 0x08	; 8
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    2d00:	19 82       	std	Y+1, r1	; 0x01
    2d02:	1a 82       	std	Y+2, r1	; 0x02
    2d04:	1b 82       	std	Y+3, r1	; 0x03
    2d06:	1c 82       	std	Y+4, r1	; 0x04
    2d08:	1d 82       	std	Y+5, r1	; 0x05
    2d0a:	1e 82       	std	Y+6, r1	; 0x06
    2d0c:	1f 82       	std	Y+7, r1	; 0x07
    2d0e:	18 86       	std	Y+8, r1	; 0x08
    2d10:	cc 24       	eor	r12, r12
    2d12:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2d14:	5e 01       	movw	r10, r28
    2d16:	08 94       	sec
    2d18:	a1 1c       	adc	r10, r1
    2d1a:	b1 1c       	adc	r11, r1
    2d1c:	fb e3       	ldi	r31, 0x3B	; 59
    2d1e:	8f 2e       	mov	r8, r31
    2d20:	f2 e0       	ldi	r31, 0x02	; 2
    2d22:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2d24:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    2d28:	88 e4       	ldi	r24, 0x48	; 72
    2d2a:	96 e0       	ldi	r25, 0x06	; 6
    2d2c:	6c e0       	ldi	r22, 0x0C	; 12
    2d2e:	43 e1       	ldi	r20, 0x13	; 19
    2d30:	20 e3       	ldi	r18, 0x30	; 48
    2d32:	09 e3       	ldi	r16, 0x39	; 57
    2d34:	e2 e0       	ldi	r30, 0x02	; 2
    2d36:	ee 2e       	mov	r14, r30
    2d38:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <glcd_font>

		sprintf(string,"%d",count);
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <glcd_test_glcdutils+0x62>
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <glcd_test_glcdutils+0x64>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <glcd_test_glcdutils+0x66>
    2d42:	ed b7       	in	r30, 0x3d	; 61
    2d44:	fe b7       	in	r31, 0x3e	; 62
    2d46:	31 96       	adiw	r30, 0x01	; 1
    2d48:	ad b7       	in	r26, 0x3d	; 61
    2d4a:	be b7       	in	r27, 0x3e	; 62
    2d4c:	12 96       	adiw	r26, 0x02	; 2
    2d4e:	bc 92       	st	X, r11
    2d50:	ae 92       	st	-X, r10
    2d52:	11 97       	sbiw	r26, 0x01	; 1
    2d54:	93 82       	std	Z+3, r9	; 0x03
    2d56:	82 82       	std	Z+2, r8	; 0x02
    2d58:	d5 82       	std	Z+5, r13	; 0x05
    2d5a:	c4 82       	std	Z+4, r12	; 0x04
    2d5c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
		glcd_draw_string_xy(0,0,string);
    2d60:	8d b7       	in	r24, 0x3d	; 61
    2d62:	9e b7       	in	r25, 0x3e	; 62
    2d64:	06 96       	adiw	r24, 0x06	; 6
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	9e bf       	out	0x3e, r25	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	8d bf       	out	0x3d, r24	; 61
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	a5 01       	movw	r20, r10
    2d76:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
		glcd_write();
    2d7a:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
		
		count += 1;
    2d7e:	08 94       	sec
    2d80:	c1 1c       	adc	r12, r1
    2d82:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    2d84:	80 91 42 02 	lds	r24, 0x0242
    2d88:	88 23       	and	r24, r24
    2d8a:	61 f2       	breq	.-104    	; 0x2d24 <glcd_test_glcdutils+0x48>
    2d8c:	10 92 42 02 	sts	0x0242, r1
	}
}
    2d90:	28 96       	adiw	r28, 0x08	; 8
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	0f 91       	pop	r16
    2da2:	ef 90       	pop	r14
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	bf 90       	pop	r11
    2daa:	af 90       	pop	r10
    2dac:	9f 90       	pop	r9
    2dae:	8f 90       	pop	r8
    2db0:	08 95       	ret

00002db2 <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    2db2:	8f 92       	push	r8
    2db4:	9f 92       	push	r9
    2db6:	af 92       	push	r10
    2db8:	bf 92       	push	r11
    2dba:	df 92       	push	r13
    2dbc:	ef 92       	push	r14
    2dbe:	ff 92       	push	r15
    2dc0:	0f 93       	push	r16
    2dc2:	1f 93       	push	r17
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	28 97       	sbiw	r28, 0x08	; 8
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    2dd8:	19 82       	std	Y+1, r1	; 0x01
    2dda:	1a 82       	std	Y+2, r1	; 0x02
    2ddc:	1b 82       	std	Y+3, r1	; 0x03
    2dde:	1c 82       	std	Y+4, r1	; 0x04
    2de0:	1d 82       	std	Y+5, r1	; 0x05
    2de2:	1e 82       	std	Y+6, r1	; 0x06
    2de4:	1f 82       	std	Y+7, r1	; 0x07
    2de6:	18 86       	std	Y+8, r1	; 0x08
    2de8:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2dea:	5e 01       	movw	r10, r28
    2dec:	08 94       	sec
    2dee:	a1 1c       	adc	r10, r1
    2df0:	b1 1c       	adc	r11, r1
    2df2:	1b e3       	ldi	r17, 0x3B	; 59
    2df4:	81 2e       	mov	r8, r17
    2df6:	12 e0       	ldi	r17, 0x02	; 2
    2df8:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2dfa:	0e 94 b7 0b 	call	0x176e	; 0x176e <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2dfe:	80 e9       	ldi	r24, 0x90	; 144
    2e00:	99 e0       	ldi	r25, 0x09	; 9
    2e02:	6f e0       	ldi	r22, 0x0F	; 15
    2e04:	45 e1       	ldi	r20, 0x15	; 21
    2e06:	2e e2       	ldi	r18, 0x2E	; 46
    2e08:	09 e3       	ldi	r16, 0x39	; 57
    2e0a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2e0e:	ed 2c       	mov	r14, r13
    2e10:	ff 24       	eor	r15, r15
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <glcd_test_counter_and_graph+0x62>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <glcd_test_counter_and_graph+0x64>
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <glcd_test_counter_and_graph+0x66>
    2e18:	ed b7       	in	r30, 0x3d	; 61
    2e1a:	fe b7       	in	r31, 0x3e	; 62
    2e1c:	31 96       	adiw	r30, 0x01	; 1
    2e1e:	ad b7       	in	r26, 0x3d	; 61
    2e20:	be b7       	in	r27, 0x3e	; 62
    2e22:	12 96       	adiw	r26, 0x02	; 2
    2e24:	bc 92       	st	X, r11
    2e26:	ae 92       	st	-X, r10
    2e28:	11 97       	sbiw	r26, 0x01	; 1
    2e2a:	93 82       	std	Z+3, r9	; 0x03
    2e2c:	82 82       	std	Z+2, r8	; 0x02
    2e2e:	f5 82       	std	Z+5, r15	; 0x05
    2e30:	e4 82       	std	Z+4, r14	; 0x04
    2e32:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
		glcd_draw_string_xy(0,0,string);
    2e36:	8d b7       	in	r24, 0x3d	; 61
    2e38:	9e b7       	in	r25, 0x3e	; 62
    2e3a:	06 96       	adiw	r24, 0x06	; 6
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	9e bf       	out	0x3e, r25	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	8d bf       	out	0x3d, r24	; 61
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	a5 01       	movw	r20, r10
    2e4c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    2e50:	87 01       	movw	r16, r14
    2e52:	00 0f       	add	r16, r16
    2e54:	11 1f       	adc	r17, r17
    2e56:	00 0f       	add	r16, r16
    2e58:	11 1f       	adc	r17, r17
    2e5a:	8a e0       	ldi	r24, 0x0A	; 10
    2e5c:	66 e2       	ldi	r22, 0x26	; 38
    2e5e:	4e e1       	ldi	r20, 0x1E	; 30
    2e60:	26 e0       	ldi	r18, 0x06	; 6
    2e62:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    2e66:	ee 0c       	add	r14, r14
    2e68:	ff 1c       	adc	r15, r15
    2e6a:	86 e4       	ldi	r24, 0x46	; 70
    2e6c:	60 e0       	ldi	r22, 0x00	; 0
    2e6e:	48 e0       	ldi	r20, 0x08	; 8
    2e70:	2e e1       	ldi	r18, 0x1E	; 30
    2e72:	0e 2d       	mov	r16, r14
    2e74:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <glcd_bar_graph_vertical>

		glcd_write();
    2e78:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
		count += 1;
    2e7c:	d3 94       	inc	r13

		DEMO_RETURN();
    2e7e:	80 91 42 02 	lds	r24, 0x0242
    2e82:	88 23       	and	r24, r24
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <glcd_test_counter_and_graph+0xd6>
    2e86:	b9 cf       	rjmp	.-142    	; 0x2dfa <glcd_test_counter_and_graph+0x48>
    2e88:	10 92 42 02 	sts	0x0242, r1
	}

}
    2e8c:	28 96       	adiw	r28, 0x08	; 8
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	bf 90       	pop	r11
    2ea8:	af 90       	pop	r10
    2eaa:	9f 90       	pop	r9
    2eac:	8f 90       	pop	r8
    2eae:	08 95       	ret

00002eb0 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	00 e4       	ldi	r16, 0x40	; 64
    2ec2:	c0 2e       	mov	r12, r16
    2ec4:	0f e1       	ldi	r16, 0x1F	; 31
    2ec6:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    2ec8:	c0 ea       	ldi	r28, 0xA0	; 160
    2eca:	df e0       	ldi	r29, 0x0F	; 15
    2ecc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    2ed0:	0e 94 57 1c 	call	0x38ae	; 0x38ae <rand>
    2ed4:	64 e5       	ldi	r22, 0x54	; 84
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    2edc:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    2ede:	0e 94 57 1c 	call	0x38ae	; 0x38ae <rand>
    2ee2:	60 e3       	ldi	r22, 0x30	; 48
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    2eea:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    2eec:	0e 94 57 1c 	call	0x38ae	; 0x38ae <rand>
    2ef0:	62 e3       	ldi	r22, 0x32	; 50
    2ef2:	70 e0       	ldi	r23, 0x00	; 0
    2ef4:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    2ef8:	08 2f       	mov	r16, r24
    2efa:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2efc:	8e 2d       	mov	r24, r14
    2efe:	6f 2d       	mov	r22, r15
    2f00:	41 2f       	mov	r20, r17
    2f02:	21 e0       	ldi	r18, 0x01	; 1
    2f04:	0e 94 4a 11 	call	0x2294	; 0x2294 <glcd_fill_circle>
			glcd_write();
    2f08:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2f0c:	c6 01       	movw	r24, r12
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    2f12:	1f 5f       	subi	r17, 0xFF	; 255
    2f14:	01 17       	cp	r16, r17
    2f16:	90 f7       	brcc	.-28     	; 0x2efc <glcd_test_circles+0x4c>
    2f18:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    2f1a:	8e 2d       	mov	r24, r14
    2f1c:	6f 2d       	mov	r22, r15
    2f1e:	41 2f       	mov	r20, r17
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	0e 94 4a 11 	call	0x2294	; 0x2294 <glcd_fill_circle>
			glcd_write();
    2f26:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    2f30:	1f 5f       	subi	r17, 0xFF	; 255
    2f32:	01 17       	cp	r16, r17
    2f34:	90 f7       	brcc	.-28     	; 0x2f1a <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    2f36:	80 91 42 02 	lds	r24, 0x0242
    2f3a:	88 23       	and	r24, r24
    2f3c:	39 f2       	breq	.-114    	; 0x2ecc <glcd_test_circles+0x1c>
    2f3e:	10 92 42 02 	sts	0x0242, r1
	}
}
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	08 95       	ret

00002f54 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    2f54:	0f 93       	push	r16
	font_current.font_table = font_table;
    2f56:	90 93 4b 04 	sts	0x044B, r25
    2f5a:	80 93 4a 04 	sts	0x044A, r24
	font_current.width = width;
    2f5e:	60 93 4c 04 	sts	0x044C, r22
	font_current.height = height;
    2f62:	40 93 4d 04 	sts	0x044D, r20
	font_current.start_char = start_char;
    2f66:	20 93 4e 04 	sts	0x044E, r18
	font_current.end_char = end_char;
    2f6a:	00 93 4f 04 	sts	0x044F, r16
	font_current.table_type = STANG;
    2f6e:	10 92 50 04 	sts	0x0450, r1
}
    2f72:	0f 91       	pop	r16
    2f74:	08 95       	ret

00002f76 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    2f76:	bf 92       	push	r11
    2f78:	cf 92       	push	r12
    2f7a:	df 92       	push	r13
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	f8 2e       	mov	r15, r24
    2f8a:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    2f8c:	5f e2       	ldi	r21, 0x2F	; 47
    2f8e:	56 17       	cp	r21, r22
    2f90:	08 f4       	brcc	.+2      	; 0x2f94 <glcd_tiny_draw_char_xy+0x1e>
    2f92:	5d c0       	rjmp	.+186    	; 0x304e <glcd_tiny_draw_char_xy+0xd8>
    2f94:	80 91 4c 04 	lds	r24, 0x044C
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	8f 0d       	add	r24, r15
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	84 35       	cpi	r24, 0x54	; 84
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <glcd_tiny_draw_char_xy+0x30>
    2fa4:	54 c0       	rjmp	.+168    	; 0x304e <glcd_tiny_draw_char_xy+0xd8>
    2fa6:	80 91 4d 04 	lds	r24, 0x044D
    2faa:	88 30       	cpi	r24, 0x08	; 8
    2fac:	08 f0       	brcs	.+2      	; 0x2fb0 <glcd_tiny_draw_char_xy+0x3a>
    2fae:	4f c0       	rjmp	.+158    	; 0x304e <glcd_tiny_draw_char_xy+0xd8>
    2fb0:	80 91 50 04 	lds	r24, 0x0450
    2fb4:	88 23       	and	r24, r24
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <glcd_tiny_draw_char_xy+0x44>
    2fb8:	4a c0       	rjmp	.+148    	; 0x304e <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    2fba:	80 91 4e 04 	lds	r24, 0x044E
    2fbe:	48 17       	cp	r20, r24
    2fc0:	20 f0       	brcs	.+8      	; 0x2fca <glcd_tiny_draw_char_xy+0x54>
    2fc2:	80 91 4f 04 	lds	r24, 0x044F
    2fc6:	84 17       	cp	r24, r20
    2fc8:	08 f4       	brcc	.+2      	; 0x2fcc <glcd_tiny_draw_char_xy+0x56>
    2fca:	4e e2       	ldi	r20, 0x2E	; 46
    2fcc:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2fce:	c4 2e       	mov	r12, r20
    2fd0:	dd 24       	eor	r13, r13
    2fd2:	2f c0       	rjmp	.+94     	; 0x3032 <glcd_tiny_draw_char_xy+0xbc>
    2fd4:	80 91 4e 04 	lds	r24, 0x044E
    2fd8:	96 01       	movw	r18, r12
    2fda:	28 1b       	sub	r18, r24
    2fdc:	31 09       	sbc	r19, r1
    2fde:	84 2f       	mov	r24, r20
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	ac 01       	movw	r20, r24
    2fe4:	24 9f       	mul	r18, r20
    2fe6:	c0 01       	movw	r24, r0
    2fe8:	25 9f       	mul	r18, r21
    2fea:	90 0d       	add	r25, r0
    2fec:	34 9f       	mul	r19, r20
    2fee:	90 0d       	add	r25, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	80 0f       	add	r24, r16
    2ff4:	91 1d       	adc	r25, r1
    2ff6:	e0 91 4a 04 	lds	r30, 0x044A
    2ffa:	f0 91 4b 04 	lds	r31, 0x044B
    2ffe:	e8 0f       	add	r30, r24
    3000:	f9 1f       	adc	r31, r25
    3002:	e4 91       	lpm	r30, Z+
    3004:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    3006:	ce 2f       	mov	r28, r30
    3008:	d0 e0       	ldi	r29, 0x00	; 0
    300a:	0e c0       	rjmp	.+28     	; 0x3028 <glcd_tiny_draw_char_xy+0xb2>
    300c:	61 2f       	mov	r22, r17
    300e:	6e 0d       	add	r22, r14
    3010:	ae 01       	movw	r20, r28
    3012:	01 2e       	mov	r0, r17
    3014:	02 c0       	rjmp	.+4      	; 0x301a <glcd_tiny_draw_char_xy+0xa4>
    3016:	55 95       	asr	r21
    3018:	47 95       	ror	r20
    301a:	0a 94       	dec	r0
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <glcd_tiny_draw_char_xy+0xa0>
    301e:	41 70       	andi	r20, 0x01	; 1
    3020:	8b 2d       	mov	r24, r11
    3022:	0e 94 0b 11 	call	0x2216	; 0x2216 <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    3026:	1f 5f       	subi	r17, 0xFF	; 255
    3028:	80 91 4d 04 	lds	r24, 0x044D
    302c:	18 17       	cp	r17, r24
    302e:	70 f3       	brcs	.-36     	; 0x300c <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    3030:	0f 5f       	subi	r16, 0xFF	; 255
    3032:	b0 2e       	mov	r11, r16
    3034:	bf 0c       	add	r11, r15
    3036:	40 91 4c 04 	lds	r20, 0x044C
    303a:	04 17       	cp	r16, r20
    303c:	58 f2       	brcs	.-106    	; 0x2fd4 <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    303e:	4f 0d       	add	r20, r15
    3040:	20 91 4d 04 	lds	r18, 0x044D
    3044:	2e 0d       	add	r18, r14
    3046:	8f 2d       	mov	r24, r15
    3048:	6e 2d       	mov	r22, r14
    304a:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	
}
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	ff 90       	pop	r15
    3058:	ef 90       	pop	r14
    305a:	df 90       	pop	r13
    305c:	cf 90       	pop	r12
    305e:	bf 90       	pop	r11
    3060:	08 95       	ret

00003062 <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	08 2f       	mov	r16, r24
    306c:	26 2f       	mov	r18, r22
    306e:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    3070:	60 91 4d 04 	lds	r22, 0x044D
    3074:	68 30       	cpi	r22, 0x08	; 8
    3076:	08 f0       	brcs	.+2      	; 0x307a <glcd_tiny_draw_char+0x18>
    3078:	6a c0       	rjmp	.+212    	; 0x314e <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    307a:	80 91 4e 04 	lds	r24, 0x044E
    307e:	48 17       	cp	r20, r24
    3080:	20 f0       	brcs	.+8      	; 0x308a <glcd_tiny_draw_char+0x28>
    3082:	80 91 4f 04 	lds	r24, 0x044F
    3086:	84 17       	cp	r24, r20
    3088:	08 f4       	brcc	.+2      	; 0x308c <glcd_tiny_draw_char+0x2a>
    308a:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    308c:	c2 2f       	mov	r28, r18
    308e:	d0 e0       	ldi	r29, 0x00	; 0
    3090:	e6 2f       	mov	r30, r22
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	31 96       	adiw	r30, 0x01	; 1
    3096:	80 e3       	ldi	r24, 0x30	; 48
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	bf 01       	movw	r22, r30
    309c:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    30a0:	c6 17       	cp	r28, r22
    30a2:	d7 07       	cpc	r29, r23
    30a4:	0c f0       	brlt	.+2      	; 0x30a8 <glcd_tiny_draw_char+0x46>
    30a6:	53 c0       	rjmp	.+166    	; 0x314e <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    30a8:	40 91 4c 04 	lds	r20, 0x044C
    30ac:	84 2f       	mov	r24, r20
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	80 0f       	add	r24, r16
    30b2:	91 1d       	adc	r25, r1
    30b4:	84 35       	cpi	r24, 0x54	; 84
    30b6:	91 05       	cpc	r25, r1
    30b8:	0c f0       	brlt	.+2      	; 0x30bc <glcd_tiny_draw_char+0x5a>
    30ba:	49 c0       	rjmp	.+146    	; 0x314e <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    30bc:	ce 9f       	mul	r28, r30
    30be:	b0 01       	movw	r22, r0
    30c0:	cf 9f       	mul	r28, r31
    30c2:	70 0d       	add	r23, r0
    30c4:	de 9f       	mul	r29, r30
    30c6:	70 0d       	add	r23, r0
    30c8:	11 24       	eor	r1, r1
    30ca:	40 0f       	add	r20, r16
    30cc:	21 96       	adiw	r28, 0x01	; 1
    30ce:	ce 9f       	mul	r28, r30
    30d0:	90 01       	movw	r18, r0
    30d2:	cf 9f       	mul	r28, r31
    30d4:	30 0d       	add	r19, r0
    30d6:	de 9f       	mul	r29, r30
    30d8:	30 0d       	add	r19, r0
    30da:	11 24       	eor	r1, r1
    30dc:	21 97       	sbiw	r28, 0x01	; 1
    30de:	80 2f       	mov	r24, r16
    30e0:	0e 94 39 0b 	call	0x1672	; 0x1672 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    30e4:	84 e5       	ldi	r24, 0x54	; 84
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	c8 9f       	mul	r28, r24
    30ea:	d0 01       	movw	r26, r0
    30ec:	c9 9f       	mul	r28, r25
    30ee:	b0 0d       	add	r27, r0
    30f0:	d8 9f       	mul	r29, r24
    30f2:	b0 0d       	add	r27, r0
    30f4:	11 24       	eor	r1, r1
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	61 2f       	mov	r22, r17
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	22 c0       	rjmp	.+68     	; 0x3142 <glcd_tiny_draw_char+0xe0>
    30fe:	80 91 4e 04 	lds	r24, 0x044E
    3102:	9b 01       	movw	r18, r22
    3104:	28 1b       	sub	r18, r24
    3106:	31 09       	sbc	r19, r1
    3108:	89 2f       	mov	r24, r25
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	fc 01       	movw	r30, r24
    310e:	2e 9f       	mul	r18, r30
    3110:	c0 01       	movw	r24, r0
    3112:	2f 9f       	mul	r18, r31
    3114:	90 0d       	add	r25, r0
    3116:	3e 9f       	mul	r19, r30
    3118:	90 0d       	add	r25, r0
    311a:	11 24       	eor	r1, r1
    311c:	85 0f       	add	r24, r21
    311e:	91 1d       	adc	r25, r1
    3120:	e0 91 4a 04 	lds	r30, 0x044A
    3124:	f0 91 4b 04 	lds	r31, 0x044B
    3128:	e8 0f       	add	r30, r24
    312a:	f9 1f       	adc	r31, r25
    312c:	84 91       	lpm	r24, Z+
    312e:	e0 91 46 04 	lds	r30, 0x0446
    3132:	f0 91 47 04 	lds	r31, 0x0447
    3136:	ea 0f       	add	r30, r26
    3138:	fb 1f       	adc	r31, r27
    313a:	e4 0f       	add	r30, r20
    313c:	f1 1d       	adc	r31, r1
    313e:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    3140:	5f 5f       	subi	r21, 0xFF	; 255
    3142:	45 2f       	mov	r20, r21
    3144:	40 0f       	add	r20, r16
    3146:	90 91 4c 04 	lds	r25, 0x044C
    314a:	59 17       	cp	r21, r25
    314c:	c0 f2       	brcs	.-80     	; 0x30fe <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	08 95       	ret

00003158 <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	18 2f       	mov	r17, r24
    3162:	06 2f       	mov	r16, r22
    3164:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    3166:	80 91 4d 04 	lds	r24, 0x044D
    316a:	88 30       	cpi	r24, 0x08	; 8
    316c:	20 f5       	brcc	.+72     	; 0x31b6 <glcd_tiny_draw_string_P+0x5e>
		return;
    316e:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    3170:	21 96       	adiw	r28, 0x01	; 1
    3172:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    3174:	44 23       	and	r20, r20
    3176:	f9 f0       	breq	.+62     	; 0x31b6 <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    3178:	81 2f       	mov	r24, r17
    317a:	60 2f       	mov	r22, r16
    317c:	0e 94 31 18 	call	0x3062	; 0x3062 <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    3180:	80 91 4c 04 	lds	r24, 0x044C
    3184:	8f 5f       	subi	r24, 0xFF	; 255
    3186:	18 0f       	add	r17, r24
    3188:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	81 0f       	add	r24, r17
    318e:	91 1d       	adc	r25, r1
    3190:	84 35       	cpi	r24, 0x54	; 84
    3192:	91 05       	cpc	r25, r1
    3194:	14 f0       	brlt	.+4      	; 0x319a <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    3196:	0f 5f       	subi	r16, 0xFF	; 255
    3198:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    319a:	20 2f       	mov	r18, r16
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	60 91 4d 04 	lds	r22, 0x044D
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	6f 5f       	subi	r22, 0xFF	; 255
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	80 e3       	ldi	r24, 0x30	; 48
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    31b0:	26 17       	cp	r18, r22
    31b2:	37 07       	cpc	r19, r23
    31b4:	e4 f2       	brlt	.-72     	; 0x316e <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	1f 91       	pop	r17
    31bc:	0f 91       	pop	r16
    31be:	08 95       	ret

000031c0 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	18 2f       	mov	r17, r24
    31ca:	06 2f       	mov	r16, r22
    31cc:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    31ce:	80 91 4d 04 	lds	r24, 0x044D
    31d2:	88 30       	cpi	r24, 0x08	; 8
    31d4:	08 f1       	brcs	.+66     	; 0x3218 <glcd_tiny_draw_string+0x58>
    31d6:	23 c0       	rjmp	.+70     	; 0x321e <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    31d8:	81 2f       	mov	r24, r17
    31da:	60 2f       	mov	r22, r16
    31dc:	0e 94 31 18 	call	0x3062	; 0x3062 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    31e0:	80 91 4c 04 	lds	r24, 0x044C
    31e4:	8f 5f       	subi	r24, 0xFF	; 255
    31e6:	18 0f       	add	r17, r24
    31e8:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	81 0f       	add	r24, r17
    31ee:	91 1d       	adc	r25, r1
    31f0:	84 35       	cpi	r24, 0x54	; 84
    31f2:	91 05       	cpc	r25, r1
    31f4:	14 f0       	brlt	.+4      	; 0x31fa <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    31f6:	0f 5f       	subi	r16, 0xFF	; 255
    31f8:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    31fa:	20 2f       	mov	r18, r16
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	60 91 4d 04 	lds	r22, 0x044D
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	80 e3       	ldi	r24, 0x30	; 48
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 df 1b 	call	0x37be	; 0x37be <__divmodhi4>
    3210:	26 17       	cp	r18, r22
    3212:	37 07       	cpc	r19, r23
    3214:	24 f4       	brge	.+8      	; 0x321e <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    3216:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    3218:	48 81       	ld	r20, Y
    321a:	44 23       	and	r20, r20
    321c:	e9 f6       	brne	.-70     	; 0x31d8 <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	08 95       	ret

00003228 <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    3228:	68 2f       	mov	r22, r24
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	66 0f       	add	r22, r22
    3230:	77 1f       	adc	r23, r23
    3232:	8a 95       	dec	r24
    3234:	e1 f7       	brne	.-8      	; 0x322e <glcd_tiny_invert_line+0x6>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	43 e5       	ldi	r20, 0x53	; 83
    323a:	28 e0       	ldi	r18, 0x08	; 8
    323c:	0e 94 df 10 	call	0x21be	; 0x21be <glcd_invert_area>
}
    3240:	08 95       	ret

00003242 <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    3248:	0e 94 86 0b 	call	0x170c	; 0x170c <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	65 e0       	ldi	r22, 0x05	; 5
    3250:	a8 01       	movw	r20, r16
    3252:	0e 94 ac 18 	call	0x3158	; 0x3158 <glcd_tiny_draw_string_P>
	glcd_write();
    3256:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
}
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	08 95       	ret

00003260 <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    3266:	0e 94 86 0b 	call	0x170c	; 0x170c <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	65 e0       	ldi	r22, 0x05	; 5
    326e:	a8 01       	movw	r20, r16
    3270:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <glcd_tiny_draw_string>
	glcd_write();
    3274:	0e 94 1f 0c 	call	0x183e	; 0x183e <glcd_write>
}
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	08 95       	ret

0000327e <TWIInit>:
#include "twi.h"

// Initial TWI
void TWIInit ( void ){
	// set SCL to 400kHz
	TWSR = 0x00;
    327e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
    3282:	8c e0       	ldi	r24, 0x0C	; 12
    3284:	80 93 b8 00 	sts	0x00B8, r24
	// enable TWI
	TWCR = ( 1 << TWEN );
    3288:	84 e0       	ldi	r24, 0x04	; 4
    328a:	80 93 bc 00 	sts	0x00BC, r24
}
    328e:	08 95       	ret

00003290 <TWIStart>:
//
// Start read/write
void TWIStart ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA ) | ( 1 << TWEN );
    3290:	84 ea       	ldi	r24, 0xA4	; 164
    3292:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    3296:	80 91 bc 00 	lds	r24, 0x00BC
    329a:	87 ff       	sbrs	r24, 7
    329c:	fc cf       	rjmp	.-8      	; 0x3296 <TWIStart+0x6>
}
    329e:	08 95       	ret

000032a0 <TWIStop>:
//
// Stop read/ write
void TWIStop ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTO ) | ( 1 << TWEN );
    32a0:	84 e9       	ldi	r24, 0x94	; 148
    32a2:	80 93 bc 00 	sts	0x00BC, r24
}
    32a6:	08 95       	ret

000032a8 <TWIWrite>:
//
// Write
void TWIWrite ( uint8_t u8data ){

	TWDR = u8data;
    32a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    32ac:	84 e8       	ldi	r24, 0x84	; 132
    32ae:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    32b2:	80 91 bc 00 	lds	r24, 0x00BC
    32b6:	87 ff       	sbrs	r24, 7
    32b8:	fc cf       	rjmp	.-8      	; 0x32b2 <TWIWrite+0xa>
}
    32ba:	08 95       	ret

000032bc <TWIReadACK>:
//
// Read
uint8_t TWIReadACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN )|( 1 << TWEA );
    32bc:	84 ec       	ldi	r24, 0xC4	; 196
    32be:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    32c2:	80 91 bc 00 	lds	r24, 0x00BC
    32c6:	87 ff       	sbrs	r24, 7
    32c8:	fc cf       	rjmp	.-8      	; 0x32c2 <TWIReadACK+0x6>
	return TWDR;
    32ca:	80 91 bb 00 	lds	r24, 0x00BB
}
    32ce:	08 95       	ret

000032d0 <TWIReadNACK>:
//
//
uint8_t TWIReadNACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    32d0:	84 e8       	ldi	r24, 0x84	; 132
    32d2:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    32d6:	80 91 bc 00 	lds	r24, 0x00BC
    32da:	87 ff       	sbrs	r24, 7
    32dc:	fc cf       	rjmp	.-8      	; 0x32d6 <TWIReadNACK+0x6>
	return TWDR;
    32de:	80 91 bb 00 	lds	r24, 0x00BB
}
    32e2:	08 95       	ret

000032e4 <TWIGetStatus>:
// Status
uint8_t TWIGetStatus( void ){

	uint8_t status;
	// mask status
	status = TWSR & 0xF8;
    32e4:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
    32e8:	88 7f       	andi	r24, 0xF8	; 248
    32ea:	08 95       	ret

000032ec <EERead1Byte>:
	TWIStop();
	
	return 0;
}

uint8_t EERead1Byte ( uint16_t u16addr ){
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	18 2f       	mov	r17, r24
    32f2:	09 2f       	mov	r16, r25
	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	uint8_t u8data = 0;
	
    TWIStart();
    32f4:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( EEWRITE );
    32f8:	80 ea       	ldi	r24, 0xA0	; 160
    32fa:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( addr_l );
    32fe:	81 2f       	mov	r24, r17
    3300:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( addr_h );
    3304:	80 2f       	mov	r24, r16
    3306:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
    TWIStart();
    330a:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( EEREAD );
    330e:	81 ea       	ldi	r24, 0xA1	; 161
    3310:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	u8data = TWIReadNACK();
    3314:	0e 94 68 19 	call	0x32d0	; 0x32d0 <TWIReadNACK>
    3318:	18 2f       	mov	r17, r24
    TWIStop();
    331a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <TWIStop>
	
    return u8data;
}
    331e:	81 2f       	mov	r24, r17
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	08 95       	ret

00003326 <EERead2Bytes>:
	_delay_ms(50);								// for write
	
	return 0;
}

uint16_t EERead2Bytes ( uint16_t u16addr ){
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	8c 01       	movw	r16, r24
	
	uint16_t data_lsb, data_msb;
	
	data_lsb = EERead1Byte ( u16addr );			// read LSB register
    332e:	0e 94 76 19 	call	0x32ec	; 0x32ec <EERead1Byte>
    3332:	f8 2e       	mov	r15, r24
	data_msb = EERead1Byte ( u16addr + 0x01 );	// read MSB register
    3334:	c8 01       	movw	r24, r16
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	0e 94 76 19 	call	0x32ec	; 0x32ec <EERead1Byte>
    333c:	38 2f       	mov	r19, r24
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	2f 0d       	add	r18, r15
    3342:	31 1d       	adc	r19, r1
	
    return ( data_lsb + ( data_msb << 8 ));	// 16 Bit
    3344:	c9 01       	movw	r24, r18
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	08 95       	ret

0000334e <EEWrite1Byte>:

#define EEWRITE		0b10100000
#define EEREAD		0b10100001

// 8 Bit data
uint8_t EEWrite1Byte ( uint16_t u16addr, uint8_t u8data ){
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	18 2f       	mov	r17, r24
    3356:	09 2f       	mov	r16, r25
    3358:	f6 2e       	mov	r15, r22

	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	
    TWIStart();
    335a:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( EEWRITE );  
    335e:	80 ea       	ldi	r24, 0xA0	; 160
    3360:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( addr_l );
    3364:	81 2f       	mov	r24, r17
    3366:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( addr_h );
    336a:	80 2f       	mov	r24, r16
    336c:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( u8data );
    3370:	8f 2d       	mov	r24, r15
    3372:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIStop();
    3376:	0e 94 50 19 	call	0x32a0	; 0x32a0 <TWIStop>
	
	return 0;
}
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	ff 90       	pop	r15
    3382:	08 95       	ret

00003384 <EEWrite2Bytes>:
	
    return u8data;
}
//
// 16 Bit data
uint8_t EEWrite2Bytes ( uint16_t u16addr, uint16_t u16data ){
    3384:	df 92       	push	r13
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	7c 01       	movw	r14, r24
    3390:	d7 2e       	mov	r13, r23
	uint8_t data_lsb, data_msb;
	
	data_lsb = u16data;							// LSB data
	data_msb = ( u16data >> 8 );				// MSB data
	
	EEWrite1Byte ( u16addr, data_lsb );			// write LSB register
    3392:	0e 94 a7 19 	call	0x334e	; 0x334e <EEWrite1Byte>
    3396:	04 ed       	ldi	r16, 0xD4	; 212
    3398:	10 e3       	ldi	r17, 0x30	; 48
    339a:	c8 01       	movw	r24, r16
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <EEWrite2Bytes+0x18>
	_delay_ms(50);								// for write
	EEWrite1Byte (( u16addr + 1 ),  data_msb );// Write MSB register
    33a0:	c7 01       	movw	r24, r14
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	6d 2d       	mov	r22, r13
    33a6:	0e 94 a7 19 	call	0x334e	; 0x334e <EEWrite1Byte>
    33aa:	c8 01       	movw	r24, r16
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <EEWrite2Bytes+0x28>
	_delay_ms(50);								// for write
	
	return 0;
}
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ff 90       	pop	r15
    33b8:	ef 90       	pop	r14
    33ba:	df 90       	pop	r13
    33bc:	08 95       	ret

000033be <RTCReadByte>:
	_delay_ms(50);
	
	return 0;
}

uint8_t RTCReadByte ( uint8_t u8addr ){
    33be:	1f 93       	push	r17
    33c0:	18 2f       	mov	r17, r24
	
	uint8_t u8data = 0;
	
	TWIStart();
    33c2:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( RTCWRITE );
    33c6:	8e ed       	ldi	r24, 0xDE	; 222
    33c8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( u8addr );
    33cc:	81 2f       	mov	r24, r17
    33ce:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIStart();
    33d2:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( RTCREAD );
    33d6:	8f ed       	ldi	r24, 0xDF	; 223
    33d8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	u8data = TWIReadNACK();
    33dc:	0e 94 68 19 	call	0x32d0	; 0x32d0 <TWIReadNACK>
    33e0:	18 2f       	mov	r17, r24
	TWIStop();
    33e2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <TWIStop>
	
	return u8data;
}
    33e6:	81 2f       	mov	r24, r17
    33e8:	1f 91       	pop	r17
    33ea:	08 95       	ret

000033ec <RTCWriteByte>:
void InitRTC( void ){
	RTCWriteByte(0x00, 0b10001000); // 0b10000000 --> Disable external input
	_delay_ms(50);
}

uint8_t RTCWriteByte ( uint8_t u8addr, uint8_t u8data ){
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	18 2f       	mov	r17, r24
    33f2:	06 2f       	mov	r16, r22
	
	TWIStart();
    33f4:	0e 94 48 19 	call	0x3290	; 0x3290 <TWIStart>
	TWIWrite( RTCWRITE );  
    33f8:	8e ed       	ldi	r24, 0xDE	; 222
    33fa:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( u8addr );
    33fe:	81 2f       	mov	r24, r17
    3400:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIWrite( u8data );
    3404:	80 2f       	mov	r24, r16
    3406:	0e 94 54 19 	call	0x32a8	; 0x32a8 <TWIWrite>
	TWIStop();
    340a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <TWIStop>
    340e:	84 ed       	ldi	r24, 0xD4	; 212
    3410:	90 e3       	ldi	r25, 0x30	; 48
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <RTCWriteByte+0x26>
	
	_delay_ms(50);
	
	return 0;
}
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	08 95       	ret

0000341e <RTCSetSecond>:
		}
		minute --;
	}
	RTCWriteByte(0x01, (( minute_ten << 4 ) + minute_one ));
}
void RTCSetSecond	( uint8_t second ){
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <RTCSetSecond+0x12>
	uint8_t	second_one = 0;
	uint8_t second_ten = 0;
	while ( second > 0){
		second_one ++;
    3424:	6f 5f       	subi	r22, 0xFF	; 255
		if( second_one == 10 ){
    3426:	6a 30       	cpi	r22, 0x0A	; 10
    3428:	11 f4       	brne	.+4      	; 0x342e <RTCSetSecond+0x10>
			second_one = 0;
			second_ten ++;
    342a:	9f 5f       	subi	r25, 0xFF	; 255
    342c:	60 e0       	ldi	r22, 0x00	; 0
		}
		second --;
    342e:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x01, (( minute_ten << 4 ) + minute_one ));
}
void RTCSetSecond	( uint8_t second ){
	uint8_t	second_one = 0;
	uint8_t second_ten = 0;
	while ( second > 0){
    3430:	88 23       	and	r24, r24
    3432:	c1 f7       	brne	.-16     	; 0x3424 <RTCSetSecond+0x6>
			second_one = 0;
			second_ten ++;
		}
		second --;
	}
	RTCWriteByte(0x00, (( second_ten << 4 ) + second_one ) + 0x80 );
    3434:	60 58       	subi	r22, 0x80	; 128
    3436:	92 95       	swap	r25
    3438:	90 7f       	andi	r25, 0xF0	; 240
    343a:	69 0f       	add	r22, r25
    343c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
    3440:	08 95       	ret

00003442 <RTCSetMinute>:
		}
		hour --;
	}
	RTCWriteByte(0x02, (( hour_ten << 4 ) + hour_one ));
}
void  RTCSetMinute( uint8_t minute ){
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <RTCSetMinute+0x12>
	uint8_t	minute_one = 0;
	uint8_t minute_ten = 0;
	while ( minute > 0){
		minute_one ++;
    3448:	9f 5f       	subi	r25, 0xFF	; 255
		if( minute_one == 10 ){
    344a:	9a 30       	cpi	r25, 0x0A	; 10
    344c:	11 f4       	brne	.+4      	; 0x3452 <RTCSetMinute+0x10>
			minute_one = 0;
			minute_ten ++;
    344e:	6f 5f       	subi	r22, 0xFF	; 255
    3450:	90 e0       	ldi	r25, 0x00	; 0
		}
		minute --;
    3452:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x02, (( hour_ten << 4 ) + hour_one ));
}
void  RTCSetMinute( uint8_t minute ){
	uint8_t	minute_one = 0;
	uint8_t minute_ten = 0;
	while ( minute > 0){
    3454:	88 23       	and	r24, r24
    3456:	c1 f7       	brne	.-16     	; 0x3448 <RTCSetMinute+0x6>
			minute_one = 0;
			minute_ten ++;
		}
		minute --;
	}
	RTCWriteByte(0x01, (( minute_ten << 4 ) + minute_one ));
    3458:	62 95       	swap	r22
    345a:	60 7f       	andi	r22, 0xF0	; 240
    345c:	69 0f       	add	r22, r25
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    3464:	08 95       	ret

00003466 <RTCSetHour>:
		}
		weekday --;
	}
	RTCWriteByte(0x03, (( weekday_ten << 4 ) + weekday_one ));
}
void  RTCSetHour( uint8_t hour ){
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	06 c0       	rjmp	.+12     	; 0x3478 <RTCSetHour+0x12>
	uint8_t	hour_one = 0;
	uint8_t hour_ten = 0;
	while ( hour > 0){
		hour_one ++;
    346c:	9f 5f       	subi	r25, 0xFF	; 255
		if( hour_one == 10 ){
    346e:	9a 30       	cpi	r25, 0x0A	; 10
    3470:	11 f4       	brne	.+4      	; 0x3476 <RTCSetHour+0x10>
			hour_one = 0;
			hour_ten ++;
    3472:	6f 5f       	subi	r22, 0xFF	; 255
    3474:	90 e0       	ldi	r25, 0x00	; 0
		}
		hour --;
    3476:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x03, (( weekday_ten << 4 ) + weekday_one ));
}
void  RTCSetHour( uint8_t hour ){
	uint8_t	hour_one = 0;
	uint8_t hour_ten = 0;
	while ( hour > 0){
    3478:	88 23       	and	r24, r24
    347a:	c1 f7       	brne	.-16     	; 0x346c <RTCSetHour+0x6>
			hour_one = 0;
			hour_ten ++;
		}
		hour --;
	}
	RTCWriteByte(0x02, (( hour_ten << 4 ) + hour_one ));
    347c:	62 95       	swap	r22
    347e:	60 7f       	andi	r22, 0xF0	; 240
    3480:	69 0f       	add	r22, r25
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    3488:	08 95       	ret

0000348a <RTCSetWeekday>:
		}
		date --;
	}
	RTCWriteByte(0x04, (( date_ten << 4 ) + date_one ));
}
void RTCSetWeekday( uint8_t weekday ){
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	06 c0       	rjmp	.+12     	; 0x349c <RTCSetWeekday+0x12>
	uint8_t	weekday_one = 0;
	uint8_t weekday_ten = 0;
	while ( weekday > 0){
		weekday_one ++;
    3490:	9f 5f       	subi	r25, 0xFF	; 255
		if( weekday_one == 10 ){
    3492:	9a 30       	cpi	r25, 0x0A	; 10
    3494:	11 f4       	brne	.+4      	; 0x349a <RTCSetWeekday+0x10>
			weekday_one = 0;
			weekday_ten ++;
    3496:	6f 5f       	subi	r22, 0xFF	; 255
    3498:	90 e0       	ldi	r25, 0x00	; 0
		}
		weekday --;
    349a:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x04, (( date_ten << 4 ) + date_one ));
}
void RTCSetWeekday( uint8_t weekday ){
	uint8_t	weekday_one = 0;
	uint8_t weekday_ten = 0;
	while ( weekday > 0){
    349c:	88 23       	and	r24, r24
    349e:	c1 f7       	brne	.-16     	; 0x3490 <RTCSetWeekday+0x6>
			weekday_one = 0;
			weekday_ten ++;
		}
		weekday --;
	}
	RTCWriteByte(0x03, (( weekday_ten << 4 ) + weekday_one ));
    34a0:	62 95       	swap	r22
    34a2:	60 7f       	andi	r22, 0xF0	; 240
    34a4:	69 0f       	add	r22, r25
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    34ac:	08 95       	ret

000034ae <RTCSetDate>:
		}
		month --;
	}
	RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
}
void RTCSetDate( uint8_t date ){
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	06 c0       	rjmp	.+12     	; 0x34c0 <RTCSetDate+0x12>
	uint8_t	date_one = 0;
	uint8_t date_ten = 0;
	while ( date > 0){
		date_one ++;
    34b4:	9f 5f       	subi	r25, 0xFF	; 255
		if( date_one == 10 ){
    34b6:	9a 30       	cpi	r25, 0x0A	; 10
    34b8:	11 f4       	brne	.+4      	; 0x34be <RTCSetDate+0x10>
			date_one = 0;
			date_ten ++;
    34ba:	6f 5f       	subi	r22, 0xFF	; 255
    34bc:	90 e0       	ldi	r25, 0x00	; 0
		}
		date --;
    34be:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
}
void RTCSetDate( uint8_t date ){
	uint8_t	date_one = 0;
	uint8_t date_ten = 0;
	while ( date > 0){
    34c0:	88 23       	and	r24, r24
    34c2:	c1 f7       	brne	.-16     	; 0x34b4 <RTCSetDate+0x6>
			date_one = 0;
			date_ten ++;
		}
		date --;
	}
	RTCWriteByte(0x04, (( date_ten << 4 ) + date_one ));
    34c4:	62 95       	swap	r22
    34c6:	60 7f       	andi	r22, 0xF0	; 240
    34c8:	69 0f       	add	r22, r25
    34ca:	84 e0       	ldi	r24, 0x04	; 4
    34cc:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    34d0:	08 95       	ret

000034d2 <RTCSetMonth>:
		}
		year --;
	}
	RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
}
void RTCSetMonth( uint8_t month ){
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	06 c0       	rjmp	.+12     	; 0x34e4 <RTCSetMonth+0x12>
	uint8_t	month_one = 0;
	uint8_t month_ten = 0;
	while ( month > 0){
		month_one ++;
    34d8:	9f 5f       	subi	r25, 0xFF	; 255
		if( month_one == 10 ){
    34da:	9a 30       	cpi	r25, 0x0A	; 10
    34dc:	11 f4       	brne	.+4      	; 0x34e2 <RTCSetMonth+0x10>
			month_one = 0;
			month_ten ++;
    34de:	6f 5f       	subi	r22, 0xFF	; 255
    34e0:	90 e0       	ldi	r25, 0x00	; 0
		}
		month --;
    34e2:	81 50       	subi	r24, 0x01	; 1
	RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
}
void RTCSetMonth( uint8_t month ){
	uint8_t	month_one = 0;
	uint8_t month_ten = 0;
	while ( month > 0){
    34e4:	88 23       	and	r24, r24
    34e6:	c1 f7       	brne	.-16     	; 0x34d8 <RTCSetMonth+0x6>
			month_one = 0;
			month_ten ++;
		}
		month --;
	}
	RTCWriteByte(0x05, (( month_ten << 4 ) + month_one ));
    34e8:	62 95       	swap	r22
    34ea:	60 7f       	andi	r22, 0xF0	; 240
    34ec:	69 0f       	add	r22, r25
    34ee:	85 e0       	ldi	r24, 0x05	; 5
    34f0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    34f4:	08 95       	ret

000034f6 <RTCSetYear>:
	return u8data;
}

// Set Time settings
//
void RTCSetYear( uint8_t year ){
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	06 c0       	rjmp	.+12     	; 0x3508 <RTCSetYear+0x12>
	uint8_t	year_one = 0;
	uint8_t year_ten = 0;
	while ( year > 0){
		year_one ++;
    34fc:	9f 5f       	subi	r25, 0xFF	; 255
		if( year_one == 10 ){
    34fe:	9a 30       	cpi	r25, 0x0A	; 10
    3500:	11 f4       	brne	.+4      	; 0x3506 <RTCSetYear+0x10>
			year_one = 0;
			year_ten ++;
    3502:	6f 5f       	subi	r22, 0xFF	; 255
    3504:	90 e0       	ldi	r25, 0x00	; 0
		}
		year --;
    3506:	81 50       	subi	r24, 0x01	; 1
// Set Time settings
//
void RTCSetYear( uint8_t year ){
	uint8_t	year_one = 0;
	uint8_t year_ten = 0;
	while ( year > 0){
    3508:	88 23       	and	r24, r24
    350a:	c1 f7       	brne	.-16     	; 0x34fc <RTCSetYear+0x6>
			year_one = 0;
			year_ten ++;
		}
		year --;
	}
	RTCWriteByte(0x06, (( year_ten << 4 ) + year_one ));
    350c:	62 95       	swap	r22
    350e:	60 7f       	andi	r22, 0xF0	; 240
    3510:	69 0f       	add	r22, r25
    3512:	86 e0       	ldi	r24, 0x06	; 6
    3514:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
}
    3518:	08 95       	ret

0000351a <InitRTC>:

#define RTCREAD  0b11011111
#define RTCWRITE 0b11011110

void InitRTC( void ){
	RTCWriteByte(0x00, 0b10001000); // 0b10000000 --> Disable external input
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	68 e8       	ldi	r22, 0x88	; 136
    351e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <RTCWriteByte>
    3522:	84 ed       	ldi	r24, 0xD4	; 212
    3524:	90 e3       	ldi	r25, 0x30	; 48
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <InitRTC+0xc>
	_delay_ms(50);
}
    352a:	08 95       	ret

0000352c <__cmpsf2>:
    352c:	6c d0       	rcall	.+216    	; 0x3606 <__fp_cmp>
    352e:	08 f4       	brcc	.+2      	; 0x3532 <__cmpsf2+0x6>
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	08 95       	ret

00003534 <__fixunssfsi>:
    3534:	94 d0       	rcall	.+296    	; 0x365e <__fp_splitA>
    3536:	88 f0       	brcs	.+34     	; 0x355a <__fixunssfsi+0x26>
    3538:	9f 57       	subi	r25, 0x7F	; 127
    353a:	90 f0       	brcs	.+36     	; 0x3560 <__fixunssfsi+0x2c>
    353c:	b9 2f       	mov	r27, r25
    353e:	99 27       	eor	r25, r25
    3540:	b7 51       	subi	r27, 0x17	; 23
    3542:	a0 f0       	brcs	.+40     	; 0x356c <__fixunssfsi+0x38>
    3544:	d1 f0       	breq	.+52     	; 0x357a <__fixunssfsi+0x46>
    3546:	66 0f       	add	r22, r22
    3548:	77 1f       	adc	r23, r23
    354a:	88 1f       	adc	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	1a f0       	brmi	.+6      	; 0x3556 <__fixunssfsi+0x22>
    3550:	ba 95       	dec	r27
    3552:	c9 f7       	brne	.-14     	; 0x3546 <__fixunssfsi+0x12>
    3554:	12 c0       	rjmp	.+36     	; 0x357a <__fixunssfsi+0x46>
    3556:	b1 30       	cpi	r27, 0x01	; 1
    3558:	81 f0       	breq	.+32     	; 0x357a <__fixunssfsi+0x46>
    355a:	9b d0       	rcall	.+310    	; 0x3692 <__fp_zero>
    355c:	b1 e0       	ldi	r27, 0x01	; 1
    355e:	08 95       	ret
    3560:	98 c0       	rjmp	.+304    	; 0x3692 <__fp_zero>
    3562:	67 2f       	mov	r22, r23
    3564:	78 2f       	mov	r23, r24
    3566:	88 27       	eor	r24, r24
    3568:	b8 5f       	subi	r27, 0xF8	; 248
    356a:	39 f0       	breq	.+14     	; 0x357a <__fixunssfsi+0x46>
    356c:	b9 3f       	cpi	r27, 0xF9	; 249
    356e:	cc f3       	brlt	.-14     	; 0x3562 <__fixunssfsi+0x2e>
    3570:	86 95       	lsr	r24
    3572:	77 95       	ror	r23
    3574:	67 95       	ror	r22
    3576:	b3 95       	inc	r27
    3578:	d9 f7       	brne	.-10     	; 0x3570 <__fixunssfsi+0x3c>
    357a:	3e f4       	brtc	.+14     	; 0x358a <__fixunssfsi+0x56>
    357c:	90 95       	com	r25
    357e:	80 95       	com	r24
    3580:	70 95       	com	r23
    3582:	61 95       	neg	r22
    3584:	7f 4f       	sbci	r23, 0xFF	; 255
    3586:	8f 4f       	sbci	r24, 0xFF	; 255
    3588:	9f 4f       	sbci	r25, 0xFF	; 255
    358a:	08 95       	ret

0000358c <__floatunsisf>:
    358c:	e8 94       	clt
    358e:	09 c0       	rjmp	.+18     	; 0x35a2 <__floatsisf+0x12>

00003590 <__floatsisf>:
    3590:	97 fb       	bst	r25, 7
    3592:	3e f4       	brtc	.+14     	; 0x35a2 <__floatsisf+0x12>
    3594:	90 95       	com	r25
    3596:	80 95       	com	r24
    3598:	70 95       	com	r23
    359a:	61 95       	neg	r22
    359c:	7f 4f       	sbci	r23, 0xFF	; 255
    359e:	8f 4f       	sbci	r24, 0xFF	; 255
    35a0:	9f 4f       	sbci	r25, 0xFF	; 255
    35a2:	99 23       	and	r25, r25
    35a4:	a9 f0       	breq	.+42     	; 0x35d0 <__floatsisf+0x40>
    35a6:	f9 2f       	mov	r31, r25
    35a8:	96 e9       	ldi	r25, 0x96	; 150
    35aa:	bb 27       	eor	r27, r27
    35ac:	93 95       	inc	r25
    35ae:	f6 95       	lsr	r31
    35b0:	87 95       	ror	r24
    35b2:	77 95       	ror	r23
    35b4:	67 95       	ror	r22
    35b6:	b7 95       	ror	r27
    35b8:	f1 11       	cpse	r31, r1
    35ba:	f8 cf       	rjmp	.-16     	; 0x35ac <__floatsisf+0x1c>
    35bc:	fa f4       	brpl	.+62     	; 0x35fc <__floatsisf+0x6c>
    35be:	bb 0f       	add	r27, r27
    35c0:	11 f4       	brne	.+4      	; 0x35c6 <__floatsisf+0x36>
    35c2:	60 ff       	sbrs	r22, 0
    35c4:	1b c0       	rjmp	.+54     	; 0x35fc <__floatsisf+0x6c>
    35c6:	6f 5f       	subi	r22, 0xFF	; 255
    35c8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ca:	8f 4f       	sbci	r24, 0xFF	; 255
    35cc:	9f 4f       	sbci	r25, 0xFF	; 255
    35ce:	16 c0       	rjmp	.+44     	; 0x35fc <__floatsisf+0x6c>
    35d0:	88 23       	and	r24, r24
    35d2:	11 f0       	breq	.+4      	; 0x35d8 <__floatsisf+0x48>
    35d4:	96 e9       	ldi	r25, 0x96	; 150
    35d6:	11 c0       	rjmp	.+34     	; 0x35fa <__floatsisf+0x6a>
    35d8:	77 23       	and	r23, r23
    35da:	21 f0       	breq	.+8      	; 0x35e4 <__floatsisf+0x54>
    35dc:	9e e8       	ldi	r25, 0x8E	; 142
    35de:	87 2f       	mov	r24, r23
    35e0:	76 2f       	mov	r23, r22
    35e2:	05 c0       	rjmp	.+10     	; 0x35ee <__floatsisf+0x5e>
    35e4:	66 23       	and	r22, r22
    35e6:	71 f0       	breq	.+28     	; 0x3604 <__floatsisf+0x74>
    35e8:	96 e8       	ldi	r25, 0x86	; 134
    35ea:	86 2f       	mov	r24, r22
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	2a f0       	brmi	.+10     	; 0x35fc <__floatsisf+0x6c>
    35f2:	9a 95       	dec	r25
    35f4:	66 0f       	add	r22, r22
    35f6:	77 1f       	adc	r23, r23
    35f8:	88 1f       	adc	r24, r24
    35fa:	da f7       	brpl	.-10     	; 0x35f2 <__floatsisf+0x62>
    35fc:	88 0f       	add	r24, r24
    35fe:	96 95       	lsr	r25
    3600:	87 95       	ror	r24
    3602:	97 f9       	bld	r25, 7
    3604:	08 95       	ret

00003606 <__fp_cmp>:
    3606:	99 0f       	add	r25, r25
    3608:	00 08       	sbc	r0, r0
    360a:	55 0f       	add	r21, r21
    360c:	aa 0b       	sbc	r26, r26
    360e:	e0 e8       	ldi	r30, 0x80	; 128
    3610:	fe ef       	ldi	r31, 0xFE	; 254
    3612:	16 16       	cp	r1, r22
    3614:	17 06       	cpc	r1, r23
    3616:	e8 07       	cpc	r30, r24
    3618:	f9 07       	cpc	r31, r25
    361a:	c0 f0       	brcs	.+48     	; 0x364c <__fp_cmp+0x46>
    361c:	12 16       	cp	r1, r18
    361e:	13 06       	cpc	r1, r19
    3620:	e4 07       	cpc	r30, r20
    3622:	f5 07       	cpc	r31, r21
    3624:	98 f0       	brcs	.+38     	; 0x364c <__fp_cmp+0x46>
    3626:	62 1b       	sub	r22, r18
    3628:	73 0b       	sbc	r23, r19
    362a:	84 0b       	sbc	r24, r20
    362c:	95 0b       	sbc	r25, r21
    362e:	39 f4       	brne	.+14     	; 0x363e <__fp_cmp+0x38>
    3630:	0a 26       	eor	r0, r26
    3632:	61 f0       	breq	.+24     	; 0x364c <__fp_cmp+0x46>
    3634:	23 2b       	or	r18, r19
    3636:	24 2b       	or	r18, r20
    3638:	25 2b       	or	r18, r21
    363a:	21 f4       	brne	.+8      	; 0x3644 <__fp_cmp+0x3e>
    363c:	08 95       	ret
    363e:	0a 26       	eor	r0, r26
    3640:	09 f4       	brne	.+2      	; 0x3644 <__fp_cmp+0x3e>
    3642:	a1 40       	sbci	r26, 0x01	; 1
    3644:	a6 95       	lsr	r26
    3646:	8f ef       	ldi	r24, 0xFF	; 255
    3648:	81 1d       	adc	r24, r1
    364a:	81 1d       	adc	r24, r1
    364c:	08 95       	ret

0000364e <__fp_split3>:
    364e:	57 fd       	sbrc	r21, 7
    3650:	90 58       	subi	r25, 0x80	; 128
    3652:	44 0f       	add	r20, r20
    3654:	55 1f       	adc	r21, r21
    3656:	59 f0       	breq	.+22     	; 0x366e <__fp_splitA+0x10>
    3658:	5f 3f       	cpi	r21, 0xFF	; 255
    365a:	71 f0       	breq	.+28     	; 0x3678 <__fp_splitA+0x1a>
    365c:	47 95       	ror	r20

0000365e <__fp_splitA>:
    365e:	88 0f       	add	r24, r24
    3660:	97 fb       	bst	r25, 7
    3662:	99 1f       	adc	r25, r25
    3664:	61 f0       	breq	.+24     	; 0x367e <__fp_splitA+0x20>
    3666:	9f 3f       	cpi	r25, 0xFF	; 255
    3668:	79 f0       	breq	.+30     	; 0x3688 <__fp_splitA+0x2a>
    366a:	87 95       	ror	r24
    366c:	08 95       	ret
    366e:	12 16       	cp	r1, r18
    3670:	13 06       	cpc	r1, r19
    3672:	14 06       	cpc	r1, r20
    3674:	55 1f       	adc	r21, r21
    3676:	f2 cf       	rjmp	.-28     	; 0x365c <__fp_split3+0xe>
    3678:	46 95       	lsr	r20
    367a:	f1 df       	rcall	.-30     	; 0x365e <__fp_splitA>
    367c:	08 c0       	rjmp	.+16     	; 0x368e <__fp_splitA+0x30>
    367e:	16 16       	cp	r1, r22
    3680:	17 06       	cpc	r1, r23
    3682:	18 06       	cpc	r1, r24
    3684:	99 1f       	adc	r25, r25
    3686:	f1 cf       	rjmp	.-30     	; 0x366a <__fp_splitA+0xc>
    3688:	86 95       	lsr	r24
    368a:	71 05       	cpc	r23, r1
    368c:	61 05       	cpc	r22, r1
    368e:	08 94       	sec
    3690:	08 95       	ret

00003692 <__fp_zero>:
    3692:	e8 94       	clt

00003694 <__fp_szero>:
    3694:	bb 27       	eor	r27, r27
    3696:	66 27       	eor	r22, r22
    3698:	77 27       	eor	r23, r23
    369a:	cb 01       	movw	r24, r22
    369c:	97 f9       	bld	r25, 7
    369e:	08 95       	ret

000036a0 <__gesf2>:
    36a0:	b2 df       	rcall	.-156    	; 0x3606 <__fp_cmp>
    36a2:	08 f4       	brcc	.+2      	; 0x36a6 <__gesf2+0x6>
    36a4:	8f ef       	ldi	r24, 0xFF	; 255
    36a6:	08 95       	ret

000036a8 <__mulsf3>:
    36a8:	0b d0       	rcall	.+22     	; 0x36c0 <__mulsf3x>
    36aa:	78 c0       	rjmp	.+240    	; 0x379c <__fp_round>
    36ac:	69 d0       	rcall	.+210    	; 0x3780 <__fp_pscA>
    36ae:	28 f0       	brcs	.+10     	; 0x36ba <__mulsf3+0x12>
    36b0:	6e d0       	rcall	.+220    	; 0x378e <__fp_pscB>
    36b2:	18 f0       	brcs	.+6      	; 0x36ba <__mulsf3+0x12>
    36b4:	95 23       	and	r25, r21
    36b6:	09 f0       	breq	.+2      	; 0x36ba <__mulsf3+0x12>
    36b8:	5a c0       	rjmp	.+180    	; 0x376e <__fp_inf>
    36ba:	5f c0       	rjmp	.+190    	; 0x377a <__fp_nan>
    36bc:	11 24       	eor	r1, r1
    36be:	ea cf       	rjmp	.-44     	; 0x3694 <__fp_szero>

000036c0 <__mulsf3x>:
    36c0:	c6 df       	rcall	.-116    	; 0x364e <__fp_split3>
    36c2:	a0 f3       	brcs	.-24     	; 0x36ac <__mulsf3+0x4>

000036c4 <__mulsf3_pse>:
    36c4:	95 9f       	mul	r25, r21
    36c6:	d1 f3       	breq	.-12     	; 0x36bc <__mulsf3+0x14>
    36c8:	95 0f       	add	r25, r21
    36ca:	50 e0       	ldi	r21, 0x00	; 0
    36cc:	55 1f       	adc	r21, r21
    36ce:	62 9f       	mul	r22, r18
    36d0:	f0 01       	movw	r30, r0
    36d2:	72 9f       	mul	r23, r18
    36d4:	bb 27       	eor	r27, r27
    36d6:	f0 0d       	add	r31, r0
    36d8:	b1 1d       	adc	r27, r1
    36da:	63 9f       	mul	r22, r19
    36dc:	aa 27       	eor	r26, r26
    36de:	f0 0d       	add	r31, r0
    36e0:	b1 1d       	adc	r27, r1
    36e2:	aa 1f       	adc	r26, r26
    36e4:	64 9f       	mul	r22, r20
    36e6:	66 27       	eor	r22, r22
    36e8:	b0 0d       	add	r27, r0
    36ea:	a1 1d       	adc	r26, r1
    36ec:	66 1f       	adc	r22, r22
    36ee:	82 9f       	mul	r24, r18
    36f0:	22 27       	eor	r18, r18
    36f2:	b0 0d       	add	r27, r0
    36f4:	a1 1d       	adc	r26, r1
    36f6:	62 1f       	adc	r22, r18
    36f8:	73 9f       	mul	r23, r19
    36fa:	b0 0d       	add	r27, r0
    36fc:	a1 1d       	adc	r26, r1
    36fe:	62 1f       	adc	r22, r18
    3700:	83 9f       	mul	r24, r19
    3702:	a0 0d       	add	r26, r0
    3704:	61 1d       	adc	r22, r1
    3706:	22 1f       	adc	r18, r18
    3708:	74 9f       	mul	r23, r20
    370a:	33 27       	eor	r19, r19
    370c:	a0 0d       	add	r26, r0
    370e:	61 1d       	adc	r22, r1
    3710:	23 1f       	adc	r18, r19
    3712:	84 9f       	mul	r24, r20
    3714:	60 0d       	add	r22, r0
    3716:	21 1d       	adc	r18, r1
    3718:	82 2f       	mov	r24, r18
    371a:	76 2f       	mov	r23, r22
    371c:	6a 2f       	mov	r22, r26
    371e:	11 24       	eor	r1, r1
    3720:	9f 57       	subi	r25, 0x7F	; 127
    3722:	50 40       	sbci	r21, 0x00	; 0
    3724:	8a f0       	brmi	.+34     	; 0x3748 <__mulsf3_pse+0x84>
    3726:	e1 f0       	breq	.+56     	; 0x3760 <__mulsf3_pse+0x9c>
    3728:	88 23       	and	r24, r24
    372a:	4a f0       	brmi	.+18     	; 0x373e <__mulsf3_pse+0x7a>
    372c:	ee 0f       	add	r30, r30
    372e:	ff 1f       	adc	r31, r31
    3730:	bb 1f       	adc	r27, r27
    3732:	66 1f       	adc	r22, r22
    3734:	77 1f       	adc	r23, r23
    3736:	88 1f       	adc	r24, r24
    3738:	91 50       	subi	r25, 0x01	; 1
    373a:	50 40       	sbci	r21, 0x00	; 0
    373c:	a9 f7       	brne	.-22     	; 0x3728 <__mulsf3_pse+0x64>
    373e:	9e 3f       	cpi	r25, 0xFE	; 254
    3740:	51 05       	cpc	r21, r1
    3742:	70 f0       	brcs	.+28     	; 0x3760 <__mulsf3_pse+0x9c>
    3744:	14 c0       	rjmp	.+40     	; 0x376e <__fp_inf>
    3746:	a6 cf       	rjmp	.-180    	; 0x3694 <__fp_szero>
    3748:	5f 3f       	cpi	r21, 0xFF	; 255
    374a:	ec f3       	brlt	.-6      	; 0x3746 <__mulsf3_pse+0x82>
    374c:	98 3e       	cpi	r25, 0xE8	; 232
    374e:	dc f3       	brlt	.-10     	; 0x3746 <__mulsf3_pse+0x82>
    3750:	86 95       	lsr	r24
    3752:	77 95       	ror	r23
    3754:	67 95       	ror	r22
    3756:	b7 95       	ror	r27
    3758:	f7 95       	ror	r31
    375a:	e7 95       	ror	r30
    375c:	9f 5f       	subi	r25, 0xFF	; 255
    375e:	c1 f7       	brne	.-16     	; 0x3750 <__mulsf3_pse+0x8c>
    3760:	fe 2b       	or	r31, r30
    3762:	88 0f       	add	r24, r24
    3764:	91 1d       	adc	r25, r1
    3766:	96 95       	lsr	r25
    3768:	87 95       	ror	r24
    376a:	97 f9       	bld	r25, 7
    376c:	08 95       	ret

0000376e <__fp_inf>:
    376e:	97 f9       	bld	r25, 7
    3770:	9f 67       	ori	r25, 0x7F	; 127
    3772:	80 e8       	ldi	r24, 0x80	; 128
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	08 95       	ret

0000377a <__fp_nan>:
    377a:	9f ef       	ldi	r25, 0xFF	; 255
    377c:	80 ec       	ldi	r24, 0xC0	; 192
    377e:	08 95       	ret

00003780 <__fp_pscA>:
    3780:	00 24       	eor	r0, r0
    3782:	0a 94       	dec	r0
    3784:	16 16       	cp	r1, r22
    3786:	17 06       	cpc	r1, r23
    3788:	18 06       	cpc	r1, r24
    378a:	09 06       	cpc	r0, r25
    378c:	08 95       	ret

0000378e <__fp_pscB>:
    378e:	00 24       	eor	r0, r0
    3790:	0a 94       	dec	r0
    3792:	12 16       	cp	r1, r18
    3794:	13 06       	cpc	r1, r19
    3796:	14 06       	cpc	r1, r20
    3798:	05 06       	cpc	r0, r21
    379a:	08 95       	ret

0000379c <__fp_round>:
    379c:	09 2e       	mov	r0, r25
    379e:	03 94       	inc	r0
    37a0:	00 0c       	add	r0, r0
    37a2:	11 f4       	brne	.+4      	; 0x37a8 <__fp_round+0xc>
    37a4:	88 23       	and	r24, r24
    37a6:	52 f0       	brmi	.+20     	; 0x37bc <__fp_round+0x20>
    37a8:	bb 0f       	add	r27, r27
    37aa:	40 f4       	brcc	.+16     	; 0x37bc <__fp_round+0x20>
    37ac:	bf 2b       	or	r27, r31
    37ae:	11 f4       	brne	.+4      	; 0x37b4 <__fp_round+0x18>
    37b0:	60 ff       	sbrs	r22, 0
    37b2:	04 c0       	rjmp	.+8      	; 0x37bc <__fp_round+0x20>
    37b4:	6f 5f       	subi	r22, 0xFF	; 255
    37b6:	7f 4f       	sbci	r23, 0xFF	; 255
    37b8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ba:	9f 4f       	sbci	r25, 0xFF	; 255
    37bc:	08 95       	ret

000037be <__divmodhi4>:
    37be:	97 fb       	bst	r25, 7
    37c0:	09 2e       	mov	r0, r25
    37c2:	07 26       	eor	r0, r23
    37c4:	0a d0       	rcall	.+20     	; 0x37da <__divmodhi4_neg1>
    37c6:	77 fd       	sbrc	r23, 7
    37c8:	04 d0       	rcall	.+8      	; 0x37d2 <__divmodhi4_neg2>
    37ca:	0c d0       	rcall	.+24     	; 0x37e4 <__udivmodhi4>
    37cc:	06 d0       	rcall	.+12     	; 0x37da <__divmodhi4_neg1>
    37ce:	00 20       	and	r0, r0
    37d0:	1a f4       	brpl	.+6      	; 0x37d8 <__divmodhi4_exit>

000037d2 <__divmodhi4_neg2>:
    37d2:	70 95       	com	r23
    37d4:	61 95       	neg	r22
    37d6:	7f 4f       	sbci	r23, 0xFF	; 255

000037d8 <__divmodhi4_exit>:
    37d8:	08 95       	ret

000037da <__divmodhi4_neg1>:
    37da:	f6 f7       	brtc	.-4      	; 0x37d8 <__divmodhi4_exit>
    37dc:	90 95       	com	r25
    37de:	81 95       	neg	r24
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	08 95       	ret

000037e4 <__udivmodhi4>:
    37e4:	aa 1b       	sub	r26, r26
    37e6:	bb 1b       	sub	r27, r27
    37e8:	51 e1       	ldi	r21, 0x11	; 17
    37ea:	07 c0       	rjmp	.+14     	; 0x37fa <__udivmodhi4_ep>

000037ec <__udivmodhi4_loop>:
    37ec:	aa 1f       	adc	r26, r26
    37ee:	bb 1f       	adc	r27, r27
    37f0:	a6 17       	cp	r26, r22
    37f2:	b7 07       	cpc	r27, r23
    37f4:	10 f0       	brcs	.+4      	; 0x37fa <__udivmodhi4_ep>
    37f6:	a6 1b       	sub	r26, r22
    37f8:	b7 0b       	sbc	r27, r23

000037fa <__udivmodhi4_ep>:
    37fa:	88 1f       	adc	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	5a 95       	dec	r21
    3800:	a9 f7       	brne	.-22     	; 0x37ec <__udivmodhi4_loop>
    3802:	80 95       	com	r24
    3804:	90 95       	com	r25
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	08 95       	ret

0000380c <do_rand>:
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	ec e0       	ldi	r30, 0x0C	; 12
    3812:	fc e1       	ldi	r31, 0x1C	; 28
    3814:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__prologue_saves__+0x10>
    3818:	ec 01       	movw	r28, r24
    381a:	a8 80       	ld	r10, Y
    381c:	b9 80       	ldd	r11, Y+1	; 0x01
    381e:	ca 80       	ldd	r12, Y+2	; 0x02
    3820:	db 80       	ldd	r13, Y+3	; 0x03
    3822:	a1 14       	cp	r10, r1
    3824:	b1 04       	cpc	r11, r1
    3826:	c1 04       	cpc	r12, r1
    3828:	d1 04       	cpc	r13, r1
    382a:	41 f4       	brne	.+16     	; 0x383c <do_rand+0x30>
    382c:	84 e2       	ldi	r24, 0x24	; 36
    382e:	a8 2e       	mov	r10, r24
    3830:	89 ed       	ldi	r24, 0xD9	; 217
    3832:	b8 2e       	mov	r11, r24
    3834:	8b e5       	ldi	r24, 0x5B	; 91
    3836:	c8 2e       	mov	r12, r24
    3838:	87 e0       	ldi	r24, 0x07	; 7
    383a:	d8 2e       	mov	r13, r24
    383c:	c6 01       	movw	r24, r12
    383e:	b5 01       	movw	r22, r10
    3840:	2d e1       	ldi	r18, 0x1D	; 29
    3842:	33 ef       	ldi	r19, 0xF3	; 243
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodsi4>
    384c:	27 ea       	ldi	r18, 0xA7	; 167
    384e:	31 e4       	ldi	r19, 0x41	; 65
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	50 e0       	ldi	r21, 0x00	; 0
    3854:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <__mulsi3>
    3858:	7b 01       	movw	r14, r22
    385a:	8c 01       	movw	r16, r24
    385c:	c6 01       	movw	r24, r12
    385e:	b5 01       	movw	r22, r10
    3860:	2d e1       	ldi	r18, 0x1D	; 29
    3862:	33 ef       	ldi	r19, 0xF3	; 243
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodsi4>
    386c:	ca 01       	movw	r24, r20
    386e:	b9 01       	movw	r22, r18
    3870:	2c ee       	ldi	r18, 0xEC	; 236
    3872:	34 ef       	ldi	r19, 0xF4	; 244
    3874:	4f ef       	ldi	r20, 0xFF	; 255
    3876:	5f ef       	ldi	r21, 0xFF	; 255
    3878:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <__mulsi3>
    387c:	6e 0d       	add	r22, r14
    387e:	7f 1d       	adc	r23, r15
    3880:	80 1f       	adc	r24, r16
    3882:	91 1f       	adc	r25, r17
    3884:	97 ff       	sbrs	r25, 7
    3886:	04 c0       	rjmp	.+8      	; 0x3890 <do_rand+0x84>
    3888:	61 50       	subi	r22, 0x01	; 1
    388a:	70 40       	sbci	r23, 0x00	; 0
    388c:	80 40       	sbci	r24, 0x00	; 0
    388e:	90 48       	sbci	r25, 0x80	; 128
    3890:	68 83       	st	Y, r22
    3892:	79 83       	std	Y+1, r23	; 0x01
    3894:	8a 83       	std	Y+2, r24	; 0x02
    3896:	9b 83       	std	Y+3, r25	; 0x03
    3898:	9b 01       	movw	r18, r22
    389a:	3f 77       	andi	r19, 0x7F	; 127
    389c:	c9 01       	movw	r24, r18
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	ea e0       	ldi	r30, 0x0A	; 10
    38a4:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__epilogue_restores__+0x10>

000038a8 <rand_r>:
    38a8:	0e 94 06 1c 	call	0x380c	; 0x380c <do_rand>
    38ac:	08 95       	ret

000038ae <rand>:
    38ae:	8e e3       	ldi	r24, 0x3E	; 62
    38b0:	92 e0       	ldi	r25, 0x02	; 2
    38b2:	0e 94 06 1c 	call	0x380c	; 0x380c <do_rand>
    38b6:	08 95       	ret

000038b8 <srand>:
    38b8:	a0 e0       	ldi	r26, 0x00	; 0
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	80 93 3e 02 	sts	0x023E, r24
    38c0:	90 93 3f 02 	sts	0x023F, r25
    38c4:	a0 93 40 02 	sts	0x0240, r26
    38c8:	b0 93 41 02 	sts	0x0241, r27
    38cc:	08 95       	ret

000038ce <memcpy_P>:
    38ce:	fb 01       	movw	r30, r22
    38d0:	dc 01       	movw	r26, r24
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <memcpy_P+0xa>
    38d4:	05 90       	lpm	r0, Z+
    38d6:	0d 92       	st	X+, r0
    38d8:	41 50       	subi	r20, 0x01	; 1
    38da:	50 40       	sbci	r21, 0x00	; 0
    38dc:	d8 f7       	brcc	.-10     	; 0x38d4 <memcpy_P+0x6>
    38de:	08 95       	ret

000038e0 <strcpy>:
    38e0:	fb 01       	movw	r30, r22
    38e2:	dc 01       	movw	r26, r24
    38e4:	01 90       	ld	r0, Z+
    38e6:	0d 92       	st	X+, r0
    38e8:	00 20       	and	r0, r0
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <strcpy+0x4>
    38ec:	08 95       	ret

000038ee <sprintf>:
    38ee:	ae e0       	ldi	r26, 0x0E	; 14
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	ed e7       	ldi	r30, 0x7D	; 125
    38f4:	fc e1       	ldi	r31, 0x1C	; 28
    38f6:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__prologue_saves__+0x1c>
    38fa:	0d 89       	ldd	r16, Y+21	; 0x15
    38fc:	1e 89       	ldd	r17, Y+22	; 0x16
    38fe:	86 e0       	ldi	r24, 0x06	; 6
    3900:	8c 83       	std	Y+4, r24	; 0x04
    3902:	1a 83       	std	Y+2, r17	; 0x02
    3904:	09 83       	std	Y+1, r16	; 0x01
    3906:	8f ef       	ldi	r24, 0xFF	; 255
    3908:	9f e7       	ldi	r25, 0x7F	; 127
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
    390e:	9e 01       	movw	r18, r28
    3910:	27 5e       	subi	r18, 0xE7	; 231
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	ce 01       	movw	r24, r28
    3916:	01 96       	adiw	r24, 0x01	; 1
    3918:	6f 89       	ldd	r22, Y+23	; 0x17
    391a:	78 8d       	ldd	r23, Y+24	; 0x18
    391c:	a9 01       	movw	r20, r18
    391e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <vfprintf>
    3922:	2f 81       	ldd	r18, Y+7	; 0x07
    3924:	38 85       	ldd	r19, Y+8	; 0x08
    3926:	02 0f       	add	r16, r18
    3928:	13 1f       	adc	r17, r19
    392a:	f8 01       	movw	r30, r16
    392c:	10 82       	st	Z, r1
    392e:	2e 96       	adiw	r28, 0x0e	; 14
    3930:	e4 e0       	ldi	r30, 0x04	; 4
    3932:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <__epilogue_restores__+0x1c>

00003936 <vfprintf>:
    3936:	ab e0       	ldi	r26, 0x0B	; 11
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	e1 ea       	ldi	r30, 0xA1	; 161
    393c:	fc e1       	ldi	r31, 0x1C	; 28
    393e:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__prologue_saves__>
    3942:	3c 01       	movw	r6, r24
    3944:	2b 01       	movw	r4, r22
    3946:	5a 01       	movw	r10, r20
    3948:	fc 01       	movw	r30, r24
    394a:	17 82       	std	Z+7, r1	; 0x07
    394c:	16 82       	std	Z+6, r1	; 0x06
    394e:	83 81       	ldd	r24, Z+3	; 0x03
    3950:	81 fd       	sbrc	r24, 1
    3952:	03 c0       	rjmp	.+6      	; 0x395a <vfprintf+0x24>
    3954:	6f ef       	ldi	r22, 0xFF	; 255
    3956:	7f ef       	ldi	r23, 0xFF	; 255
    3958:	c6 c1       	rjmp	.+908    	; 0x3ce6 <vfprintf+0x3b0>
    395a:	9a e0       	ldi	r25, 0x0A	; 10
    395c:	89 2e       	mov	r8, r25
    395e:	1e 01       	movw	r2, r28
    3960:	08 94       	sec
    3962:	21 1c       	adc	r2, r1
    3964:	31 1c       	adc	r3, r1
    3966:	f3 01       	movw	r30, r6
    3968:	23 81       	ldd	r18, Z+3	; 0x03
    396a:	f2 01       	movw	r30, r4
    396c:	23 fd       	sbrc	r18, 3
    396e:	85 91       	lpm	r24, Z+
    3970:	23 ff       	sbrs	r18, 3
    3972:	81 91       	ld	r24, Z+
    3974:	2f 01       	movw	r4, r30
    3976:	88 23       	and	r24, r24
    3978:	09 f4       	brne	.+2      	; 0x397c <vfprintf+0x46>
    397a:	b2 c1       	rjmp	.+868    	; 0x3ce0 <vfprintf+0x3aa>
    397c:	85 32       	cpi	r24, 0x25	; 37
    397e:	39 f4       	brne	.+14     	; 0x398e <vfprintf+0x58>
    3980:	23 fd       	sbrc	r18, 3
    3982:	85 91       	lpm	r24, Z+
    3984:	23 ff       	sbrs	r18, 3
    3986:	81 91       	ld	r24, Z+
    3988:	2f 01       	movw	r4, r30
    398a:	85 32       	cpi	r24, 0x25	; 37
    398c:	29 f4       	brne	.+10     	; 0x3998 <vfprintf+0x62>
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	b3 01       	movw	r22, r6
    3992:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3996:	e7 cf       	rjmp	.-50     	; 0x3966 <vfprintf+0x30>
    3998:	98 2f       	mov	r25, r24
    399a:	ff 24       	eor	r15, r15
    399c:	ee 24       	eor	r14, r14
    399e:	99 24       	eor	r9, r9
    39a0:	ff e1       	ldi	r31, 0x1F	; 31
    39a2:	ff 15       	cp	r31, r15
    39a4:	d0 f0       	brcs	.+52     	; 0x39da <vfprintf+0xa4>
    39a6:	9b 32       	cpi	r25, 0x2B	; 43
    39a8:	69 f0       	breq	.+26     	; 0x39c4 <vfprintf+0x8e>
    39aa:	9c 32       	cpi	r25, 0x2C	; 44
    39ac:	28 f4       	brcc	.+10     	; 0x39b8 <vfprintf+0x82>
    39ae:	90 32       	cpi	r25, 0x20	; 32
    39b0:	59 f0       	breq	.+22     	; 0x39c8 <vfprintf+0x92>
    39b2:	93 32       	cpi	r25, 0x23	; 35
    39b4:	91 f4       	brne	.+36     	; 0x39da <vfprintf+0xa4>
    39b6:	0e c0       	rjmp	.+28     	; 0x39d4 <vfprintf+0x9e>
    39b8:	9d 32       	cpi	r25, 0x2D	; 45
    39ba:	49 f0       	breq	.+18     	; 0x39ce <vfprintf+0x98>
    39bc:	90 33       	cpi	r25, 0x30	; 48
    39be:	69 f4       	brne	.+26     	; 0x39da <vfprintf+0xa4>
    39c0:	41 e0       	ldi	r20, 0x01	; 1
    39c2:	24 c0       	rjmp	.+72     	; 0x3a0c <vfprintf+0xd6>
    39c4:	52 e0       	ldi	r21, 0x02	; 2
    39c6:	f5 2a       	or	r15, r21
    39c8:	84 e0       	ldi	r24, 0x04	; 4
    39ca:	f8 2a       	or	r15, r24
    39cc:	28 c0       	rjmp	.+80     	; 0x3a1e <vfprintf+0xe8>
    39ce:	98 e0       	ldi	r25, 0x08	; 8
    39d0:	f9 2a       	or	r15, r25
    39d2:	25 c0       	rjmp	.+74     	; 0x3a1e <vfprintf+0xe8>
    39d4:	e0 e1       	ldi	r30, 0x10	; 16
    39d6:	fe 2a       	or	r15, r30
    39d8:	22 c0       	rjmp	.+68     	; 0x3a1e <vfprintf+0xe8>
    39da:	f7 fc       	sbrc	r15, 7
    39dc:	29 c0       	rjmp	.+82     	; 0x3a30 <vfprintf+0xfa>
    39de:	89 2f       	mov	r24, r25
    39e0:	80 53       	subi	r24, 0x30	; 48
    39e2:	8a 30       	cpi	r24, 0x0A	; 10
    39e4:	70 f4       	brcc	.+28     	; 0x3a02 <vfprintf+0xcc>
    39e6:	f6 fe       	sbrs	r15, 6
    39e8:	05 c0       	rjmp	.+10     	; 0x39f4 <vfprintf+0xbe>
    39ea:	98 9c       	mul	r9, r8
    39ec:	90 2c       	mov	r9, r0
    39ee:	11 24       	eor	r1, r1
    39f0:	98 0e       	add	r9, r24
    39f2:	15 c0       	rjmp	.+42     	; 0x3a1e <vfprintf+0xe8>
    39f4:	e8 9c       	mul	r14, r8
    39f6:	e0 2c       	mov	r14, r0
    39f8:	11 24       	eor	r1, r1
    39fa:	e8 0e       	add	r14, r24
    39fc:	f0 e2       	ldi	r31, 0x20	; 32
    39fe:	ff 2a       	or	r15, r31
    3a00:	0e c0       	rjmp	.+28     	; 0x3a1e <vfprintf+0xe8>
    3a02:	9e 32       	cpi	r25, 0x2E	; 46
    3a04:	29 f4       	brne	.+10     	; 0x3a10 <vfprintf+0xda>
    3a06:	f6 fc       	sbrc	r15, 6
    3a08:	6b c1       	rjmp	.+726    	; 0x3ce0 <vfprintf+0x3aa>
    3a0a:	40 e4       	ldi	r20, 0x40	; 64
    3a0c:	f4 2a       	or	r15, r20
    3a0e:	07 c0       	rjmp	.+14     	; 0x3a1e <vfprintf+0xe8>
    3a10:	9c 36       	cpi	r25, 0x6C	; 108
    3a12:	19 f4       	brne	.+6      	; 0x3a1a <vfprintf+0xe4>
    3a14:	50 e8       	ldi	r21, 0x80	; 128
    3a16:	f5 2a       	or	r15, r21
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <vfprintf+0xe8>
    3a1a:	98 36       	cpi	r25, 0x68	; 104
    3a1c:	49 f4       	brne	.+18     	; 0x3a30 <vfprintf+0xfa>
    3a1e:	f2 01       	movw	r30, r4
    3a20:	23 fd       	sbrc	r18, 3
    3a22:	95 91       	lpm	r25, Z+
    3a24:	23 ff       	sbrs	r18, 3
    3a26:	91 91       	ld	r25, Z+
    3a28:	2f 01       	movw	r4, r30
    3a2a:	99 23       	and	r25, r25
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <vfprintf+0xfa>
    3a2e:	b8 cf       	rjmp	.-144    	; 0x39a0 <vfprintf+0x6a>
    3a30:	89 2f       	mov	r24, r25
    3a32:	85 54       	subi	r24, 0x45	; 69
    3a34:	83 30       	cpi	r24, 0x03	; 3
    3a36:	18 f0       	brcs	.+6      	; 0x3a3e <vfprintf+0x108>
    3a38:	80 52       	subi	r24, 0x20	; 32
    3a3a:	83 30       	cpi	r24, 0x03	; 3
    3a3c:	38 f4       	brcc	.+14     	; 0x3a4c <vfprintf+0x116>
    3a3e:	44 e0       	ldi	r20, 0x04	; 4
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	a4 0e       	add	r10, r20
    3a44:	b5 1e       	adc	r11, r21
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	59 83       	std	Y+1, r21	; 0x01
    3a4a:	0f c0       	rjmp	.+30     	; 0x3a6a <vfprintf+0x134>
    3a4c:	93 36       	cpi	r25, 0x63	; 99
    3a4e:	31 f0       	breq	.+12     	; 0x3a5c <vfprintf+0x126>
    3a50:	93 37       	cpi	r25, 0x73	; 115
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <vfprintf+0x13c>
    3a54:	93 35       	cpi	r25, 0x53	; 83
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <vfprintf+0x124>
    3a58:	56 c0       	rjmp	.+172    	; 0x3b06 <vfprintf+0x1d0>
    3a5a:	20 c0       	rjmp	.+64     	; 0x3a9c <vfprintf+0x166>
    3a5c:	f5 01       	movw	r30, r10
    3a5e:	80 81       	ld	r24, Z
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	42 e0       	ldi	r20, 0x02	; 2
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	a4 0e       	add	r10, r20
    3a68:	b5 1e       	adc	r11, r21
    3a6a:	61 01       	movw	r12, r2
    3a6c:	01 e0       	ldi	r16, 0x01	; 1
    3a6e:	10 e0       	ldi	r17, 0x00	; 0
    3a70:	12 c0       	rjmp	.+36     	; 0x3a96 <vfprintf+0x160>
    3a72:	f5 01       	movw	r30, r10
    3a74:	c0 80       	ld	r12, Z
    3a76:	d1 80       	ldd	r13, Z+1	; 0x01
    3a78:	f6 fc       	sbrc	r15, 6
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <vfprintf+0x14c>
    3a7c:	6f ef       	ldi	r22, 0xFF	; 255
    3a7e:	7f ef       	ldi	r23, 0xFF	; 255
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <vfprintf+0x150>
    3a82:	69 2d       	mov	r22, r9
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	42 e0       	ldi	r20, 0x02	; 2
    3a88:	50 e0       	ldi	r21, 0x00	; 0
    3a8a:	a4 0e       	add	r10, r20
    3a8c:	b5 1e       	adc	r11, r21
    3a8e:	c6 01       	movw	r24, r12
    3a90:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <strnlen>
    3a94:	8c 01       	movw	r16, r24
    3a96:	5f e7       	ldi	r21, 0x7F	; 127
    3a98:	f5 22       	and	r15, r21
    3a9a:	14 c0       	rjmp	.+40     	; 0x3ac4 <vfprintf+0x18e>
    3a9c:	f5 01       	movw	r30, r10
    3a9e:	c0 80       	ld	r12, Z
    3aa0:	d1 80       	ldd	r13, Z+1	; 0x01
    3aa2:	f6 fc       	sbrc	r15, 6
    3aa4:	03 c0       	rjmp	.+6      	; 0x3aac <vfprintf+0x176>
    3aa6:	6f ef       	ldi	r22, 0xFF	; 255
    3aa8:	7f ef       	ldi	r23, 0xFF	; 255
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <vfprintf+0x17a>
    3aac:	69 2d       	mov	r22, r9
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	42 e0       	ldi	r20, 0x02	; 2
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	a4 0e       	add	r10, r20
    3ab6:	b5 1e       	adc	r11, r21
    3ab8:	c6 01       	movw	r24, r12
    3aba:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <strnlen_P>
    3abe:	8c 01       	movw	r16, r24
    3ac0:	50 e8       	ldi	r21, 0x80	; 128
    3ac2:	f5 2a       	or	r15, r21
    3ac4:	f3 fe       	sbrs	r15, 3
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <vfprintf+0x1a0>
    3ac8:	1a c0       	rjmp	.+52     	; 0x3afe <vfprintf+0x1c8>
    3aca:	80 e2       	ldi	r24, 0x20	; 32
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	b3 01       	movw	r22, r6
    3ad0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3ad4:	ea 94       	dec	r14
    3ad6:	8e 2d       	mov	r24, r14
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	08 17       	cp	r16, r24
    3adc:	19 07       	cpc	r17, r25
    3ade:	a8 f3       	brcs	.-22     	; 0x3aca <vfprintf+0x194>
    3ae0:	0e c0       	rjmp	.+28     	; 0x3afe <vfprintf+0x1c8>
    3ae2:	f6 01       	movw	r30, r12
    3ae4:	f7 fc       	sbrc	r15, 7
    3ae6:	85 91       	lpm	r24, Z+
    3ae8:	f7 fe       	sbrs	r15, 7
    3aea:	81 91       	ld	r24, Z+
    3aec:	6f 01       	movw	r12, r30
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	b3 01       	movw	r22, r6
    3af2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3af6:	e1 10       	cpse	r14, r1
    3af8:	ea 94       	dec	r14
    3afa:	01 50       	subi	r16, 0x01	; 1
    3afc:	10 40       	sbci	r17, 0x00	; 0
    3afe:	01 15       	cp	r16, r1
    3b00:	11 05       	cpc	r17, r1
    3b02:	79 f7       	brne	.-34     	; 0x3ae2 <vfprintf+0x1ac>
    3b04:	ea c0       	rjmp	.+468    	; 0x3cda <vfprintf+0x3a4>
    3b06:	94 36       	cpi	r25, 0x64	; 100
    3b08:	11 f0       	breq	.+4      	; 0x3b0e <vfprintf+0x1d8>
    3b0a:	99 36       	cpi	r25, 0x69	; 105
    3b0c:	69 f5       	brne	.+90     	; 0x3b68 <vfprintf+0x232>
    3b0e:	f7 fe       	sbrs	r15, 7
    3b10:	08 c0       	rjmp	.+16     	; 0x3b22 <vfprintf+0x1ec>
    3b12:	f5 01       	movw	r30, r10
    3b14:	20 81       	ld	r18, Z
    3b16:	31 81       	ldd	r19, Z+1	; 0x01
    3b18:	42 81       	ldd	r20, Z+2	; 0x02
    3b1a:	53 81       	ldd	r21, Z+3	; 0x03
    3b1c:	84 e0       	ldi	r24, 0x04	; 4
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0a c0       	rjmp	.+20     	; 0x3b36 <vfprintf+0x200>
    3b22:	f5 01       	movw	r30, r10
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	9c 01       	movw	r18, r24
    3b2a:	44 27       	eor	r20, r20
    3b2c:	37 fd       	sbrc	r19, 7
    3b2e:	40 95       	com	r20
    3b30:	54 2f       	mov	r21, r20
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	a8 0e       	add	r10, r24
    3b38:	b9 1e       	adc	r11, r25
    3b3a:	9f e6       	ldi	r25, 0x6F	; 111
    3b3c:	f9 22       	and	r15, r25
    3b3e:	57 ff       	sbrs	r21, 7
    3b40:	09 c0       	rjmp	.+18     	; 0x3b54 <vfprintf+0x21e>
    3b42:	50 95       	com	r21
    3b44:	40 95       	com	r20
    3b46:	30 95       	com	r19
    3b48:	21 95       	neg	r18
    3b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4c:	4f 4f       	sbci	r20, 0xFF	; 255
    3b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b50:	e0 e8       	ldi	r30, 0x80	; 128
    3b52:	fe 2a       	or	r15, r30
    3b54:	ca 01       	movw	r24, r20
    3b56:	b9 01       	movw	r22, r18
    3b58:	a1 01       	movw	r20, r2
    3b5a:	2a e0       	ldi	r18, 0x0A	; 10
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__ultoa_invert>
    3b62:	d8 2e       	mov	r13, r24
    3b64:	d2 18       	sub	r13, r2
    3b66:	40 c0       	rjmp	.+128    	; 0x3be8 <vfprintf+0x2b2>
    3b68:	95 37       	cpi	r25, 0x75	; 117
    3b6a:	29 f4       	brne	.+10     	; 0x3b76 <vfprintf+0x240>
    3b6c:	1f 2d       	mov	r17, r15
    3b6e:	1f 7e       	andi	r17, 0xEF	; 239
    3b70:	2a e0       	ldi	r18, 0x0A	; 10
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	1d c0       	rjmp	.+58     	; 0x3bb0 <vfprintf+0x27a>
    3b76:	1f 2d       	mov	r17, r15
    3b78:	19 7f       	andi	r17, 0xF9	; 249
    3b7a:	9f 36       	cpi	r25, 0x6F	; 111
    3b7c:	61 f0       	breq	.+24     	; 0x3b96 <vfprintf+0x260>
    3b7e:	90 37       	cpi	r25, 0x70	; 112
    3b80:	20 f4       	brcc	.+8      	; 0x3b8a <vfprintf+0x254>
    3b82:	98 35       	cpi	r25, 0x58	; 88
    3b84:	09 f0       	breq	.+2      	; 0x3b88 <vfprintf+0x252>
    3b86:	ac c0       	rjmp	.+344    	; 0x3ce0 <vfprintf+0x3aa>
    3b88:	0f c0       	rjmp	.+30     	; 0x3ba8 <vfprintf+0x272>
    3b8a:	90 37       	cpi	r25, 0x70	; 112
    3b8c:	39 f0       	breq	.+14     	; 0x3b9c <vfprintf+0x266>
    3b8e:	98 37       	cpi	r25, 0x78	; 120
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <vfprintf+0x25e>
    3b92:	a6 c0       	rjmp	.+332    	; 0x3ce0 <vfprintf+0x3aa>
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <vfprintf+0x268>
    3b96:	28 e0       	ldi	r18, 0x08	; 8
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	0a c0       	rjmp	.+20     	; 0x3bb0 <vfprintf+0x27a>
    3b9c:	10 61       	ori	r17, 0x10	; 16
    3b9e:	14 fd       	sbrc	r17, 4
    3ba0:	14 60       	ori	r17, 0x04	; 4
    3ba2:	20 e1       	ldi	r18, 0x10	; 16
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <vfprintf+0x27a>
    3ba8:	14 fd       	sbrc	r17, 4
    3baa:	16 60       	ori	r17, 0x06	; 6
    3bac:	20 e1       	ldi	r18, 0x10	; 16
    3bae:	32 e0       	ldi	r19, 0x02	; 2
    3bb0:	17 ff       	sbrs	r17, 7
    3bb2:	08 c0       	rjmp	.+16     	; 0x3bc4 <vfprintf+0x28e>
    3bb4:	f5 01       	movw	r30, r10
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	44 e0       	ldi	r20, 0x04	; 4
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	08 c0       	rjmp	.+16     	; 0x3bd4 <vfprintf+0x29e>
    3bc4:	f5 01       	movw	r30, r10
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	bc 01       	movw	r22, r24
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	42 e0       	ldi	r20, 0x02	; 2
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	a4 0e       	add	r10, r20
    3bd6:	b5 1e       	adc	r11, r21
    3bd8:	a1 01       	movw	r20, r2
    3bda:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__ultoa_invert>
    3bde:	d8 2e       	mov	r13, r24
    3be0:	d2 18       	sub	r13, r2
    3be2:	8f e7       	ldi	r24, 0x7F	; 127
    3be4:	f8 2e       	mov	r15, r24
    3be6:	f1 22       	and	r15, r17
    3be8:	f6 fe       	sbrs	r15, 6
    3bea:	0b c0       	rjmp	.+22     	; 0x3c02 <vfprintf+0x2cc>
    3bec:	5e ef       	ldi	r21, 0xFE	; 254
    3bee:	f5 22       	and	r15, r21
    3bf0:	d9 14       	cp	r13, r9
    3bf2:	38 f4       	brcc	.+14     	; 0x3c02 <vfprintf+0x2cc>
    3bf4:	f4 fe       	sbrs	r15, 4
    3bf6:	07 c0       	rjmp	.+14     	; 0x3c06 <vfprintf+0x2d0>
    3bf8:	f2 fc       	sbrc	r15, 2
    3bfa:	05 c0       	rjmp	.+10     	; 0x3c06 <vfprintf+0x2d0>
    3bfc:	8f ee       	ldi	r24, 0xEF	; 239
    3bfe:	f8 22       	and	r15, r24
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <vfprintf+0x2d0>
    3c02:	1d 2d       	mov	r17, r13
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <vfprintf+0x2d2>
    3c06:	19 2d       	mov	r17, r9
    3c08:	f4 fe       	sbrs	r15, 4
    3c0a:	0d c0       	rjmp	.+26     	; 0x3c26 <vfprintf+0x2f0>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	ed 0d       	add	r30, r13
    3c10:	f1 1d       	adc	r31, r1
    3c12:	80 81       	ld	r24, Z
    3c14:	80 33       	cpi	r24, 0x30	; 48
    3c16:	19 f4       	brne	.+6      	; 0x3c1e <vfprintf+0x2e8>
    3c18:	99 ee       	ldi	r25, 0xE9	; 233
    3c1a:	f9 22       	and	r15, r25
    3c1c:	08 c0       	rjmp	.+16     	; 0x3c2e <vfprintf+0x2f8>
    3c1e:	1f 5f       	subi	r17, 0xFF	; 255
    3c20:	f2 fe       	sbrs	r15, 2
    3c22:	05 c0       	rjmp	.+10     	; 0x3c2e <vfprintf+0x2f8>
    3c24:	03 c0       	rjmp	.+6      	; 0x3c2c <vfprintf+0x2f6>
    3c26:	8f 2d       	mov	r24, r15
    3c28:	86 78       	andi	r24, 0x86	; 134
    3c2a:	09 f0       	breq	.+2      	; 0x3c2e <vfprintf+0x2f8>
    3c2c:	1f 5f       	subi	r17, 0xFF	; 255
    3c2e:	0f 2d       	mov	r16, r15
    3c30:	f3 fc       	sbrc	r15, 3
    3c32:	14 c0       	rjmp	.+40     	; 0x3c5c <vfprintf+0x326>
    3c34:	f0 fe       	sbrs	r15, 0
    3c36:	0f c0       	rjmp	.+30     	; 0x3c56 <vfprintf+0x320>
    3c38:	1e 15       	cp	r17, r14
    3c3a:	10 f0       	brcs	.+4      	; 0x3c40 <vfprintf+0x30a>
    3c3c:	9d 2c       	mov	r9, r13
    3c3e:	0b c0       	rjmp	.+22     	; 0x3c56 <vfprintf+0x320>
    3c40:	9d 2c       	mov	r9, r13
    3c42:	9e 0c       	add	r9, r14
    3c44:	91 1a       	sub	r9, r17
    3c46:	1e 2d       	mov	r17, r14
    3c48:	06 c0       	rjmp	.+12     	; 0x3c56 <vfprintf+0x320>
    3c4a:	80 e2       	ldi	r24, 0x20	; 32
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	b3 01       	movw	r22, r6
    3c50:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3c54:	1f 5f       	subi	r17, 0xFF	; 255
    3c56:	1e 15       	cp	r17, r14
    3c58:	c0 f3       	brcs	.-16     	; 0x3c4a <vfprintf+0x314>
    3c5a:	04 c0       	rjmp	.+8      	; 0x3c64 <vfprintf+0x32e>
    3c5c:	1e 15       	cp	r17, r14
    3c5e:	10 f4       	brcc	.+4      	; 0x3c64 <vfprintf+0x32e>
    3c60:	e1 1a       	sub	r14, r17
    3c62:	01 c0       	rjmp	.+2      	; 0x3c66 <vfprintf+0x330>
    3c64:	ee 24       	eor	r14, r14
    3c66:	04 ff       	sbrs	r16, 4
    3c68:	0f c0       	rjmp	.+30     	; 0x3c88 <vfprintf+0x352>
    3c6a:	80 e3       	ldi	r24, 0x30	; 48
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	b3 01       	movw	r22, r6
    3c70:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3c74:	02 ff       	sbrs	r16, 2
    3c76:	1d c0       	rjmp	.+58     	; 0x3cb2 <vfprintf+0x37c>
    3c78:	01 fd       	sbrc	r16, 1
    3c7a:	03 c0       	rjmp	.+6      	; 0x3c82 <vfprintf+0x34c>
    3c7c:	88 e7       	ldi	r24, 0x78	; 120
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0e c0       	rjmp	.+28     	; 0x3c9e <vfprintf+0x368>
    3c82:	88 e5       	ldi	r24, 0x58	; 88
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0b c0       	rjmp	.+22     	; 0x3c9e <vfprintf+0x368>
    3c88:	80 2f       	mov	r24, r16
    3c8a:	86 78       	andi	r24, 0x86	; 134
    3c8c:	91 f0       	breq	.+36     	; 0x3cb2 <vfprintf+0x37c>
    3c8e:	01 ff       	sbrs	r16, 1
    3c90:	02 c0       	rjmp	.+4      	; 0x3c96 <vfprintf+0x360>
    3c92:	8b e2       	ldi	r24, 0x2B	; 43
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <vfprintf+0x362>
    3c96:	80 e2       	ldi	r24, 0x20	; 32
    3c98:	f7 fc       	sbrc	r15, 7
    3c9a:	8d e2       	ldi	r24, 0x2D	; 45
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	b3 01       	movw	r22, r6
    3ca0:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3ca4:	06 c0       	rjmp	.+12     	; 0x3cb2 <vfprintf+0x37c>
    3ca6:	80 e3       	ldi	r24, 0x30	; 48
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	b3 01       	movw	r22, r6
    3cac:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3cb0:	9a 94       	dec	r9
    3cb2:	d9 14       	cp	r13, r9
    3cb4:	c0 f3       	brcs	.-16     	; 0x3ca6 <vfprintf+0x370>
    3cb6:	da 94       	dec	r13
    3cb8:	f1 01       	movw	r30, r2
    3cba:	ed 0d       	add	r30, r13
    3cbc:	f1 1d       	adc	r31, r1
    3cbe:	80 81       	ld	r24, Z
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	b3 01       	movw	r22, r6
    3cc4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3cc8:	dd 20       	and	r13, r13
    3cca:	a9 f7       	brne	.-22     	; 0x3cb6 <vfprintf+0x380>
    3ccc:	06 c0       	rjmp	.+12     	; 0x3cda <vfprintf+0x3a4>
    3cce:	80 e2       	ldi	r24, 0x20	; 32
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	b3 01       	movw	r22, r6
    3cd4:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    3cd8:	ea 94       	dec	r14
    3cda:	ee 20       	and	r14, r14
    3cdc:	c1 f7       	brne	.-16     	; 0x3cce <vfprintf+0x398>
    3cde:	43 ce       	rjmp	.-890    	; 0x3966 <vfprintf+0x30>
    3ce0:	f3 01       	movw	r30, r6
    3ce2:	66 81       	ldd	r22, Z+6	; 0x06
    3ce4:	77 81       	ldd	r23, Z+7	; 0x07
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	2b 96       	adiw	r28, 0x0b	; 11
    3cea:	e2 e1       	ldi	r30, 0x12	; 18
    3cec:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__epilogue_restores__>

00003cf0 <strnlen_P>:
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	05 90       	lpm	r0, Z+
    3cf4:	61 50       	subi	r22, 0x01	; 1
    3cf6:	70 40       	sbci	r23, 0x00	; 0
    3cf8:	01 10       	cpse	r0, r1
    3cfa:	d8 f7       	brcc	.-10     	; 0x3cf2 <strnlen_P+0x2>
    3cfc:	80 95       	com	r24
    3cfe:	90 95       	com	r25
    3d00:	8e 0f       	add	r24, r30
    3d02:	9f 1f       	adc	r25, r31
    3d04:	08 95       	ret

00003d06 <strnlen>:
    3d06:	fc 01       	movw	r30, r24
    3d08:	61 50       	subi	r22, 0x01	; 1
    3d0a:	70 40       	sbci	r23, 0x00	; 0
    3d0c:	01 90       	ld	r0, Z+
    3d0e:	01 10       	cpse	r0, r1
    3d10:	d8 f7       	brcc	.-10     	; 0x3d08 <strnlen+0x2>
    3d12:	80 95       	com	r24
    3d14:	90 95       	com	r25
    3d16:	8e 0f       	add	r24, r30
    3d18:	9f 1f       	adc	r25, r31
    3d1a:	08 95       	ret

00003d1c <fputc>:
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	8c 01       	movw	r16, r24
    3d26:	eb 01       	movw	r28, r22
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	81 ff       	sbrs	r24, 1
    3d2c:	1b c0       	rjmp	.+54     	; 0x3d64 <fputc+0x48>
    3d2e:	82 ff       	sbrs	r24, 2
    3d30:	0d c0       	rjmp	.+26     	; 0x3d4c <fputc+0x30>
    3d32:	2e 81       	ldd	r18, Y+6	; 0x06
    3d34:	3f 81       	ldd	r19, Y+7	; 0x07
    3d36:	8c 81       	ldd	r24, Y+4	; 0x04
    3d38:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	64 f4       	brge	.+24     	; 0x3d58 <fputc+0x3c>
    3d40:	e8 81       	ld	r30, Y
    3d42:	f9 81       	ldd	r31, Y+1	; 0x01
    3d44:	01 93       	st	Z+, r16
    3d46:	f9 83       	std	Y+1, r31	; 0x01
    3d48:	e8 83       	st	Y, r30
    3d4a:	06 c0       	rjmp	.+12     	; 0x3d58 <fputc+0x3c>
    3d4c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d4e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d50:	80 2f       	mov	r24, r16
    3d52:	09 95       	icall
    3d54:	89 2b       	or	r24, r25
    3d56:	31 f4       	brne	.+12     	; 0x3d64 <fputc+0x48>
    3d58:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	9f 83       	std	Y+7, r25	; 0x07
    3d60:	8e 83       	std	Y+6, r24	; 0x06
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <fputc+0x4c>
    3d64:	0f ef       	ldi	r16, 0xFF	; 255
    3d66:	1f ef       	ldi	r17, 0xFF	; 255
    3d68:	c8 01       	movw	r24, r16
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	08 95       	ret

00003d74 <__ultoa_invert>:
    3d74:	fa 01       	movw	r30, r20
    3d76:	aa 27       	eor	r26, r26
    3d78:	28 30       	cpi	r18, 0x08	; 8
    3d7a:	51 f1       	breq	.+84     	; 0x3dd0 <__ultoa_invert+0x5c>
    3d7c:	20 31       	cpi	r18, 0x10	; 16
    3d7e:	81 f1       	breq	.+96     	; 0x3de0 <__ultoa_invert+0x6c>
    3d80:	e8 94       	clt
    3d82:	6f 93       	push	r22
    3d84:	6e 7f       	andi	r22, 0xFE	; 254
    3d86:	6e 5f       	subi	r22, 0xFE	; 254
    3d88:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8e:	af 4f       	sbci	r26, 0xFF	; 255
    3d90:	b1 e0       	ldi	r27, 0x01	; 1
    3d92:	3e d0       	rcall	.+124    	; 0x3e10 <__ultoa_invert+0x9c>
    3d94:	b4 e0       	ldi	r27, 0x04	; 4
    3d96:	3c d0       	rcall	.+120    	; 0x3e10 <__ultoa_invert+0x9c>
    3d98:	67 0f       	add	r22, r23
    3d9a:	78 1f       	adc	r23, r24
    3d9c:	89 1f       	adc	r24, r25
    3d9e:	9a 1f       	adc	r25, r26
    3da0:	a1 1d       	adc	r26, r1
    3da2:	68 0f       	add	r22, r24
    3da4:	79 1f       	adc	r23, r25
    3da6:	8a 1f       	adc	r24, r26
    3da8:	91 1d       	adc	r25, r1
    3daa:	a1 1d       	adc	r26, r1
    3dac:	6a 0f       	add	r22, r26
    3dae:	71 1d       	adc	r23, r1
    3db0:	81 1d       	adc	r24, r1
    3db2:	91 1d       	adc	r25, r1
    3db4:	a1 1d       	adc	r26, r1
    3db6:	20 d0       	rcall	.+64     	; 0x3df8 <__ultoa_invert+0x84>
    3db8:	09 f4       	brne	.+2      	; 0x3dbc <__ultoa_invert+0x48>
    3dba:	68 94       	set
    3dbc:	3f 91       	pop	r19
    3dbe:	2a e0       	ldi	r18, 0x0A	; 10
    3dc0:	26 9f       	mul	r18, r22
    3dc2:	11 24       	eor	r1, r1
    3dc4:	30 19       	sub	r19, r0
    3dc6:	30 5d       	subi	r19, 0xD0	; 208
    3dc8:	31 93       	st	Z+, r19
    3dca:	de f6       	brtc	.-74     	; 0x3d82 <__ultoa_invert+0xe>
    3dcc:	cf 01       	movw	r24, r30
    3dce:	08 95       	ret
    3dd0:	46 2f       	mov	r20, r22
    3dd2:	47 70       	andi	r20, 0x07	; 7
    3dd4:	40 5d       	subi	r20, 0xD0	; 208
    3dd6:	41 93       	st	Z+, r20
    3dd8:	b3 e0       	ldi	r27, 0x03	; 3
    3dda:	0f d0       	rcall	.+30     	; 0x3dfa <__ultoa_invert+0x86>
    3ddc:	c9 f7       	brne	.-14     	; 0x3dd0 <__ultoa_invert+0x5c>
    3dde:	f6 cf       	rjmp	.-20     	; 0x3dcc <__ultoa_invert+0x58>
    3de0:	46 2f       	mov	r20, r22
    3de2:	4f 70       	andi	r20, 0x0F	; 15
    3de4:	40 5d       	subi	r20, 0xD0	; 208
    3de6:	4a 33       	cpi	r20, 0x3A	; 58
    3de8:	18 f0       	brcs	.+6      	; 0x3df0 <__ultoa_invert+0x7c>
    3dea:	49 5d       	subi	r20, 0xD9	; 217
    3dec:	31 fd       	sbrc	r19, 1
    3dee:	40 52       	subi	r20, 0x20	; 32
    3df0:	41 93       	st	Z+, r20
    3df2:	02 d0       	rcall	.+4      	; 0x3df8 <__ultoa_invert+0x84>
    3df4:	a9 f7       	brne	.-22     	; 0x3de0 <__ultoa_invert+0x6c>
    3df6:	ea cf       	rjmp	.-44     	; 0x3dcc <__ultoa_invert+0x58>
    3df8:	b4 e0       	ldi	r27, 0x04	; 4
    3dfa:	a6 95       	lsr	r26
    3dfc:	97 95       	ror	r25
    3dfe:	87 95       	ror	r24
    3e00:	77 95       	ror	r23
    3e02:	67 95       	ror	r22
    3e04:	ba 95       	dec	r27
    3e06:	c9 f7       	brne	.-14     	; 0x3dfa <__ultoa_invert+0x86>
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	61 05       	cpc	r22, r1
    3e0c:	71 05       	cpc	r23, r1
    3e0e:	08 95       	ret
    3e10:	9b 01       	movw	r18, r22
    3e12:	ac 01       	movw	r20, r24
    3e14:	0a 2e       	mov	r0, r26
    3e16:	06 94       	lsr	r0
    3e18:	57 95       	ror	r21
    3e1a:	47 95       	ror	r20
    3e1c:	37 95       	ror	r19
    3e1e:	27 95       	ror	r18
    3e20:	ba 95       	dec	r27
    3e22:	c9 f7       	brne	.-14     	; 0x3e16 <__ultoa_invert+0xa2>
    3e24:	62 0f       	add	r22, r18
    3e26:	73 1f       	adc	r23, r19
    3e28:	84 1f       	adc	r24, r20
    3e2a:	95 1f       	adc	r25, r21
    3e2c:	a0 1d       	adc	r26, r0
    3e2e:	08 95       	ret

00003e30 <__mulsi3>:
    3e30:	62 9f       	mul	r22, r18
    3e32:	d0 01       	movw	r26, r0
    3e34:	73 9f       	mul	r23, r19
    3e36:	f0 01       	movw	r30, r0
    3e38:	82 9f       	mul	r24, r18
    3e3a:	e0 0d       	add	r30, r0
    3e3c:	f1 1d       	adc	r31, r1
    3e3e:	64 9f       	mul	r22, r20
    3e40:	e0 0d       	add	r30, r0
    3e42:	f1 1d       	adc	r31, r1
    3e44:	92 9f       	mul	r25, r18
    3e46:	f0 0d       	add	r31, r0
    3e48:	83 9f       	mul	r24, r19
    3e4a:	f0 0d       	add	r31, r0
    3e4c:	74 9f       	mul	r23, r20
    3e4e:	f0 0d       	add	r31, r0
    3e50:	65 9f       	mul	r22, r21
    3e52:	f0 0d       	add	r31, r0
    3e54:	99 27       	eor	r25, r25
    3e56:	72 9f       	mul	r23, r18
    3e58:	b0 0d       	add	r27, r0
    3e5a:	e1 1d       	adc	r30, r1
    3e5c:	f9 1f       	adc	r31, r25
    3e5e:	63 9f       	mul	r22, r19
    3e60:	b0 0d       	add	r27, r0
    3e62:	e1 1d       	adc	r30, r1
    3e64:	f9 1f       	adc	r31, r25
    3e66:	bd 01       	movw	r22, r26
    3e68:	cf 01       	movw	r24, r30
    3e6a:	11 24       	eor	r1, r1
    3e6c:	08 95       	ret

00003e6e <__divmodsi4>:
    3e6e:	97 fb       	bst	r25, 7
    3e70:	09 2e       	mov	r0, r25
    3e72:	05 26       	eor	r0, r21
    3e74:	0e d0       	rcall	.+28     	; 0x3e92 <__divmodsi4_neg1>
    3e76:	57 fd       	sbrc	r21, 7
    3e78:	04 d0       	rcall	.+8      	; 0x3e82 <__divmodsi4_neg2>
    3e7a:	4b d0       	rcall	.+150    	; 0x3f12 <__udivmodsi4>
    3e7c:	0a d0       	rcall	.+20     	; 0x3e92 <__divmodsi4_neg1>
    3e7e:	00 1c       	adc	r0, r0
    3e80:	38 f4       	brcc	.+14     	; 0x3e90 <__divmodsi4_exit>

00003e82 <__divmodsi4_neg2>:
    3e82:	50 95       	com	r21
    3e84:	40 95       	com	r20
    3e86:	30 95       	com	r19
    3e88:	21 95       	neg	r18
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255

00003e90 <__divmodsi4_exit>:
    3e90:	08 95       	ret

00003e92 <__divmodsi4_neg1>:
    3e92:	f6 f7       	brtc	.-4      	; 0x3e90 <__divmodsi4_exit>
    3e94:	90 95       	com	r25
    3e96:	80 95       	com	r24
    3e98:	70 95       	com	r23
    3e9a:	61 95       	neg	r22
    3e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	08 95       	ret

00003ea4 <__prologue_saves__>:
    3ea4:	2f 92       	push	r2
    3ea6:	3f 92       	push	r3
    3ea8:	4f 92       	push	r4
    3eaa:	5f 92       	push	r5
    3eac:	6f 92       	push	r6
    3eae:	7f 92       	push	r7
    3eb0:	8f 92       	push	r8
    3eb2:	9f 92       	push	r9
    3eb4:	af 92       	push	r10
    3eb6:	bf 92       	push	r11
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ef 92       	push	r14
    3ebe:	ff 92       	push	r15
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	ca 1b       	sub	r28, r26
    3ece:	db 0b       	sbc	r29, r27
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	09 94       	ijmp

00003edc <__epilogue_restores__>:
    3edc:	2a 88       	ldd	r2, Y+18	; 0x12
    3ede:	39 88       	ldd	r3, Y+17	; 0x11
    3ee0:	48 88       	ldd	r4, Y+16	; 0x10
    3ee2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ee4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ee6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ee8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eea:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eec:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eee:	b9 84       	ldd	r11, Y+9	; 0x09
    3ef0:	c8 84       	ldd	r12, Y+8	; 0x08
    3ef2:	df 80       	ldd	r13, Y+7	; 0x07
    3ef4:	ee 80       	ldd	r14, Y+6	; 0x06
    3ef6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ef8:	0c 81       	ldd	r16, Y+4	; 0x04
    3efa:	1b 81       	ldd	r17, Y+3	; 0x03
    3efc:	aa 81       	ldd	r26, Y+2	; 0x02
    3efe:	b9 81       	ldd	r27, Y+1	; 0x01
    3f00:	ce 0f       	add	r28, r30
    3f02:	d1 1d       	adc	r29, r1
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
    3f0e:	ed 01       	movw	r28, r26
    3f10:	08 95       	ret

00003f12 <__udivmodsi4>:
    3f12:	a1 e2       	ldi	r26, 0x21	; 33
    3f14:	1a 2e       	mov	r1, r26
    3f16:	aa 1b       	sub	r26, r26
    3f18:	bb 1b       	sub	r27, r27
    3f1a:	fd 01       	movw	r30, r26
    3f1c:	0d c0       	rjmp	.+26     	; 0x3f38 <__udivmodsi4_ep>

00003f1e <__udivmodsi4_loop>:
    3f1e:	aa 1f       	adc	r26, r26
    3f20:	bb 1f       	adc	r27, r27
    3f22:	ee 1f       	adc	r30, r30
    3f24:	ff 1f       	adc	r31, r31
    3f26:	a2 17       	cp	r26, r18
    3f28:	b3 07       	cpc	r27, r19
    3f2a:	e4 07       	cpc	r30, r20
    3f2c:	f5 07       	cpc	r31, r21
    3f2e:	20 f0       	brcs	.+8      	; 0x3f38 <__udivmodsi4_ep>
    3f30:	a2 1b       	sub	r26, r18
    3f32:	b3 0b       	sbc	r27, r19
    3f34:	e4 0b       	sbc	r30, r20
    3f36:	f5 0b       	sbc	r31, r21

00003f38 <__udivmodsi4_ep>:
    3f38:	66 1f       	adc	r22, r22
    3f3a:	77 1f       	adc	r23, r23
    3f3c:	88 1f       	adc	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	1a 94       	dec	r1
    3f42:	69 f7       	brne	.-38     	; 0x3f1e <__udivmodsi4_loop>
    3f44:	60 95       	com	r22
    3f46:	70 95       	com	r23
    3f48:	80 95       	com	r24
    3f4a:	90 95       	com	r25
    3f4c:	9b 01       	movw	r18, r22
    3f4e:	ac 01       	movw	r20, r24
    3f50:	bd 01       	movw	r22, r26
    3f52:	cf 01       	movw	r24, r30
    3f54:	08 95       	ret

00003f56 <_exit>:
    3f56:	f8 94       	cli

00003f58 <__stop_program>:
    3f58:	ff cf       	rjmp	.-2      	; 0x3f58 <__stop_program>
