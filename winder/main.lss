
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00003704  00003798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800168  00800168  00003800  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000800  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000262e  00000000  00000000  00004160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d44  00000000  00000000  0000678e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020c2  00000000  00000000  000074d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000560  00000000  00000000  00009594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ed  00000000  00000000  00009af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002308  00000000  00000000  0000a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__ctors_end>
       4:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
       8:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
       c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      10:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      14:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      18:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      1c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      20:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      24:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      28:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      2c:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_11>
      30:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      34:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      38:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      3c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      40:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      44:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      48:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      4c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      50:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      54:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      58:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      5c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      60:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      64:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>

00000068 <batman>:
	...
      c4:	80 c0 c0 e0 e0 f0 f0 f8 f8 f8 fc fc fe fe fe ff     ................
      d4:	ff ff ff e7 83 01 01 00 00 00 00 00 00 80 c0 fe     ................
      e4:	fc f8 f8 fc fe c0 80 00 00 00 00 00 00 01 01 83     ................
      f4:	e7 ff ff ff ff fe fe fe fc fc f8 f8 f8 f0 f0 e0     ................
     104:	e0 c0 c0 80 00 00 00 00 00 00 00 00 c0 e0 70 78     ..............px
     114:	3c 3e 3f 3f 3f 3f 3f 3f 7f 7f ff ff ff ff ff ff     <>??????........
     124:	ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe fe     ................
     134:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
     144:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     154:	ff ff 7f 7f 3f 3f 3f 3f 3f 3f 3e 3c 78 70 e0 c0     ....??????><xp..
	...
     170:	00 00 00 01 03 0f 3f 7f 3f 3f 1f 1f 0f 0f 0f 0f     ......?.??......
     180:	0f 1f 1f 1f 3f 3f 7f ff ff ff ff ff ff ff ff ff     ....??..........
     190:	ff ff ff ff ff 7f 3f 3f 1f 1f 1f 0f 0f 0f 0f 1f     ......??........
     1a0:	1f 1f 3f 3f 7f 3f 0f 03 01 00 00 00 00 00 00 00     ..??.?..........
	...
     1dc:	01 03 07 0f 3f ff ff 3f 0f 07 03 01 00 00 00 00     ....?..?........
	...
     234:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000260 <Font5x7>:
     260:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     270:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     280:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     290:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     2a0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     2b0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     2c0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     2d0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     2e0:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2f0:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     300:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     310:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     320:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     330:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     340:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     350:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     360:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     370:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     380:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     390:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     3a0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     3b0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     3c0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     3d0:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     3e0:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3f0:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     400:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     410:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     420:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     430:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000440 <bmp_oslogo>:
	...
     470:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     480:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     4e8:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     4f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     508:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     564:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     574:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     584:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     594:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5e4:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5f4:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     604:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     614:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     664:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     674:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     684:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     694:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     6e4:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     6f4:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     714:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     768:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     778:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     788:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     7f4:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     804:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000840 <font_Earthbound_12x19_48to57>:
     840:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     850:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     860:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     870:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     880:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     890:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     8a0:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     8b0:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     8c0:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     8d0:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     8e0:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     8f0:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     900:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     910:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     920:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     930:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     940:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     950:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     960:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     970:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     980:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     990:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     9a0:	01 01 01 00 00 00 00 00                             ........

000009a8 <Font5x7>:
     9a8:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     9b8:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     9c8:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     9d8:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     9e8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     9f8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     a08:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     a18:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     a28:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     a38:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     a48:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     a58:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     a68:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     a78:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a88:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a98:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     aa8:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     ab8:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     ac8:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     ad8:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     ae8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     af8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     b08:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     b18:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     b28:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     b38:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     b48:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     b58:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     b68:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     b78:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000b88 <Liberation_Sans15x21_Numbers>:
     b88:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     b98:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     bb4:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     bc4:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     be4:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     bf4:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     c04:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     c14:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     c24:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     c34:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     c44:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     c54:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     c64:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     c74:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     c84:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     c94:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     ca4:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     cb4:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     cc4:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     cd4:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     ce4:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     cf4:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     d04:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     d14:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     d24:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     d34:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     d44:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     d54:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     d64:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     d74:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     d84:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     d94:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     da4:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000db0 <__ctors_end>:
     db0:	11 24       	eor	r1, r1
     db2:	1f be       	out	0x3f, r1	; 63
     db4:	cf ef       	ldi	r28, 0xFF	; 255
     db6:	d8 e0       	ldi	r29, 0x08	; 8
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	cd bf       	out	0x3d, r28	; 61

00000dbc <__do_copy_data>:
     dbc:	11 e0       	ldi	r17, 0x01	; 1
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b1 e0       	ldi	r27, 0x01	; 1
     dc2:	e4 e0       	ldi	r30, 0x04	; 4
     dc4:	f7 e3       	ldi	r31, 0x37	; 55
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <.do_copy_data_start>

00000dc8 <.do_copy_data_loop>:
     dc8:	05 90       	lpm	r0, Z+
     dca:	0d 92       	st	X+, r0

00000dcc <.do_copy_data_start>:
     dcc:	a8 36       	cpi	r26, 0x68	; 104
     dce:	b1 07       	cpc	r27, r17
     dd0:	d9 f7       	brne	.-10     	; 0xdc8 <.do_copy_data_loop>

00000dd2 <__do_clear_bss>:
     dd2:	13 e0       	ldi	r17, 0x03	; 3
     dd4:	a8 e6       	ldi	r26, 0x68	; 104
     dd6:	b1 e0       	ldi	r27, 0x01	; 1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <.do_clear_bss_start>

00000dda <.do_clear_bss_loop>:
     dda:	1d 92       	st	X+, r1

00000ddc <.do_clear_bss_start>:
     ddc:	a7 37       	cpi	r26, 0x77	; 119
     dde:	b1 07       	cpc	r27, r17
     de0:	e1 f7       	brne	.-8      	; 0xdda <.do_clear_bss_loop>
     de2:	0e 94 36 07 	call	0xe6c	; 0xe6c <main>
     de6:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <_exit>

00000dea <__bad_interrupt>:
     dea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000dee <__vector_11>:
}

uint8_t ms, ms10,ms100,sec,min,entprell, state;

ISR (TIMER1_COMPA_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
	ms10++;
     dfc:	90 91 6b 01 	lds	r25, 0x016B
     e00:	9f 5f       	subi	r25, 0xFF	; 255
     e02:	90 93 6b 01 	sts	0x016B, r25
	
	if(entprell != 0){
     e06:	80 91 6c 01 	lds	r24, 0x016C
     e0a:	88 23       	and	r24, r24
     e0c:	19 f0       	breq	.+6      	; 0xe14 <__vector_11+0x26>
		entprell--;
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	80 93 6c 01 	sts	0x016C, r24
	}
	
	//10ms
	if(ms10 == 10){
     e14:	9a 30       	cpi	r25, 0x0A	; 10
     e16:	39 f4       	brne	.+14     	; 0xe26 <__vector_11+0x38>
		ms10 = 0;
     e18:	10 92 6b 01 	sts	0x016B, r1
		ms100++;
     e1c:	80 91 6e 01 	lds	r24, 0x016E
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 6e 01 	sts	0x016E, r24
	}
	
	//100ms
    if(ms100 == 10){
     e26:	80 91 6e 01 	lds	r24, 0x016E
     e2a:	8a 30       	cpi	r24, 0x0A	; 10
     e2c:	39 f4       	brne	.+14     	; 0xe3c <__vector_11+0x4e>
		ms100 = 0;
     e2e:	10 92 6e 01 	sts	0x016E, r1
		sec++;
     e32:	80 91 6f 01 	lds	r24, 0x016F
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 6f 01 	sts	0x016F, r24
	}
	
	//Minute
	if(sec == 10){
     e3c:	90 91 6f 01 	lds	r25, 0x016F
     e40:	9a 30       	cpi	r25, 0x0A	; 10
     e42:	69 f4       	brne	.+26     	; 0xe5e <__vector_11+0x70>
		sec = 0;
     e44:	10 92 6f 01 	sts	0x016F, r1
		min++;
     e48:	80 91 6d 01 	lds	r24, 0x016D
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	80 93 6d 01 	sts	0x016D, r24
		if(state == 11){
     e52:	80 91 6a 01 	lds	r24, 0x016A
     e56:	8b 30       	cpi	r24, 0x0B	; 11
     e58:	11 f4       	brne	.+4      	; 0xe5e <__vector_11+0x70>
			state = 10;
     e5a:	90 93 6a 01 	sts	0x016A, r25
		}
	}
}
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <main>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
	};
	
int main(void)
{	
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	6e 97       	sbiw	r28, 0x1e	; 30
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
	uint16_t test = 0;
	char string[30] = " ";
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	ab 83       	std	Y+3, r26	; 0x03
     e96:	bc 83       	std	Y+4, r27	; 0x04
     e98:	fe 01       	movw	r30, r28
     e9a:	35 96       	adiw	r30, 0x05	; 5
     e9c:	8a e1       	ldi	r24, 0x1A	; 26
     e9e:	df 01       	movw	r26, r30
     ea0:	1d 92       	st	X+, r1
     ea2:	8a 95       	dec	r24
     ea4:	e9 f7       	brne	.-6      	; 0xea0 <main+0x34>
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
     ea6:	22 9a       	sbi	0x04, 2	; 4
	//PORTB |= (1<<PB2);
	PORTB &= ~(1<<PB2);
     ea8:	2a 98       	cbi	0x05, 2	; 5
	
	DDRC &= ~(1<<PC0); //Eingang Hallsensor
     eaa:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PC0);	//Pullup Hallsensor einschalten
     eac:	40 9a       	sbi	0x08, 0	; 8
	
	DDRC |=(1<<PC1); 	//Eingang Hallsensor
     eae:	39 9a       	sbi	0x07, 1	; 7
	PORTC |= (1<<PC1);	//Pullup Hallsensor einschalten
     eb0:	41 9a       	sbi	0x08, 1	; 8
	
	
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     eb2:	8a b1       	in	r24, 0x0a	; 10
     eb4:	8b 79       	andi	r24, 0x9B	; 155
     eb6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     eb8:	8b b1       	in	r24, 0x0b	; 11
     eba:	84 66       	ori	r24, 0x64	; 100
     ebc:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<PD4); //T0 Counter Input
     ebe:	54 98       	cbi	0x0a, 4	; 10
	TCCR0B |= (1<<CS02) | (1<<CS01) | (1<<CS00);//Counter 0 enabled clock on rising edge
     ec0:	85 b5       	in	r24, 0x25	; 37
     ec2:	87 60       	ori	r24, 0x07	; 7
     ec4:	85 bd       	out	0x25, r24	; 37
	
	//Timer 1 Configuration
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
     ec6:	8c e9       	ldi	r24, 0x9C	; 156
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 89 00 	sts	0x0089, r25
     ece:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     ed2:	e1 e8       	ldi	r30, 0x81	; 129
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 60       	ori	r24, 0x08	; 8
     eda:	80 83       	st	Z, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     edc:	af e6       	ldi	r26, 0x6F	; 111
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	8c 91       	ld	r24, X
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8c 93       	st	X, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
     ee6:	80 81       	ld	r24, Z
     ee8:	85 60       	ori	r24, 0x05	; 5
     eea:	80 83       	st	Z, r24
    // set prescaler to 1024 and start the timer

    sei();
     eec:	78 94       	sei
static void setup(void);

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     eee:	0e 94 82 08 	call	0x1104	; 0x1104 <glcd_init>
    sei();
    // enable interrupts
	
	setup();
	
	glcd_clear();
     ef2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
	glcd_write();
     ef6:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
	
	min = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 6d 01 	sts	0x016D, r24
	
	// eeprom
	
	TWIInit();
     f00:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <TWIInit>
	
	EEWrite2Bytes(1, 500);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	64 ef       	ldi	r22, 0xF4	; 244
     f0a:	71 e0       	ldi	r23, 0x01	; 1
     f0c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <EEWrite2Bytes>
	
	test = EERead2Bytes(1);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 ef 15 	call	0x2bde	; 0x2bde <EERead2Bytes>
     f18:	7c 01       	movw	r14, r24
	
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
     f1a:	80 e6       	ldi	r24, 0x60	; 96
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	47 e0       	ldi	r20, 0x07	; 7
     f22:	20 e2       	ldi	r18, 0x20	; 32
     f24:	0f e7       	ldi	r16, 0x7F	; 127
     f26:	0e 94 3d 14 	call	0x287a	; 0x287a <glcd_tiny_set_font>
	glcd_clear_buffer();
     f2a:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>
	sprintf(string,"%d", test);
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <main+0xc4>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <main+0xc6>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <main+0xc8>
     f34:	ed b7       	in	r30, 0x3d	; 61
     f36:	fe b7       	in	r31, 0x3e	; 62
     f38:	31 96       	adiw	r30, 0x01	; 1
     f3a:	8e 01       	movw	r16, r28
     f3c:	0f 5f       	subi	r16, 0xFF	; 255
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	ad b7       	in	r26, 0x3d	; 61
     f42:	be b7       	in	r27, 0x3e	; 62
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	1c 93       	st	X, r17
     f48:	0e 93       	st	-X, r16
     f4a:	11 97       	sbiw	r26, 0x01	; 1
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
     f54:	f5 82       	std	Z+5, r15	; 0x05
     f56:	e4 82       	std	Z+4, r14	; 0x04
     f58:	0e 94 4c 18 	call	0x3098	; 0x3098 <sprintf>
	glcd_draw_string_xy(0,0,string);
     f5c:	8d b7       	in	r24, 0x3d	; 61
     f5e:	9e b7       	in	r25, 0x3e	; 62
     f60:	06 96       	adiw	r24, 0x06	; 6
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	9e bf       	out	0x3e, r25	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	8d bf       	out	0x3d, r24	; 61
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	a8 01       	movw	r20, r16
     f72:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <glcd_draw_string_xy>
	glcd_write();
     f76:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
	}//End of while
	*/
	//---------------------------------------------
	
	return 0;
}//end of main
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	6e 96       	adiw	r28, 0x1e	; 30
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
     f98:	98 2f       	mov	r25, r24
     f9a:	84 35       	cpi	r24, 0x54	; 84
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <glcd_update_bbox+0x8>
     f9e:	93 e5       	ldi	r25, 0x53	; 83
     fa0:	44 35       	cpi	r20, 0x54	; 84
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <glcd_update_bbox+0xe>
     fa4:	43 e5       	ldi	r20, 0x53	; 83
     fa6:	60 33       	cpi	r22, 0x30	; 48
     fa8:	08 f0       	brcs	.+2      	; 0xfac <glcd_update_bbox+0x14>
     faa:	6f e2       	ldi	r22, 0x2F	; 47
     fac:	20 33       	cpi	r18, 0x30	; 48
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <glcd_update_bbox+0x1a>
     fb0:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     fb2:	e0 91 6e 03 	lds	r30, 0x036E
     fb6:	f0 91 6f 03 	lds	r31, 0x036F
     fba:	80 81       	ld	r24, Z
     fbc:	98 17       	cp	r25, r24
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
     fc0:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	84 17       	cp	r24, r20
     fc6:	08 f4       	brcc	.+2      	; 0xfca <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
     fc8:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	68 17       	cp	r22, r24
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
     fd0:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     fd2:	83 81       	ldd	r24, Z+3	; 0x03
     fd4:	82 17       	cp	r24, r18
     fd6:	08 f4       	brcc	.+2      	; 0xfda <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
     fd8:	23 83       	std	Z+3, r18	; 0x03
     fda:	08 95       	ret

00000fdc <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     fdc:	e0 91 6e 03 	lds	r30, 0x036E
     fe0:	f0 91 6f 03 	lds	r31, 0x036F
     fe4:	83 e5       	ldi	r24, 0x53	; 83
     fe6:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     fe8:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     fea:	8f e2       	ldi	r24, 0x2F	; 47
     fec:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     fee:	13 82       	std	Z+3, r1	; 0x03
}
     ff0:	08 95       	ret

00000ff2 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     ff2:	e0 91 6e 03 	lds	r30, 0x036E
     ff6:	f0 91 6f 03 	lds	r31, 0x036F
     ffa:	83 e5       	ldi	r24, 0x53	; 83
     ffc:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     ffe:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
    1000:	8f e2       	ldi	r24, 0x2F	; 47
    1002:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
    1004:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
    1006:	08 95       	ret

00001008 <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
    1008:	e0 91 6e 03 	lds	r30, 0x036E
    100c:	f0 91 6f 03 	lds	r31, 0x036F
    1010:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
    1012:	83 e5       	ldi	r24, 0x53	; 83
    1014:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
    1016:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
    1018:	8f e2       	ldi	r24, 0x2F	; 47
    101a:	83 83       	std	Z+3, r24	; 0x03
}
    101c:	08 95       	ret

0000101e <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
    101e:	90 93 6d 03 	sts	0x036D, r25
    1022:	80 93 6c 03 	sts	0x036C, r24
	glcd_bbox_selected = bbox;
    1026:	70 93 6f 03 	sts	0x036F, r23
    102a:	60 93 6e 03 	sts	0x036E, r22
}
    102e:	08 95       	ret

00001030 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
    1030:	08 95       	ret

00001032 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    103a:	64 e5       	ldi	r22, 0x54	; 84
    103c:	80 91 6c 03 	lds	r24, 0x036C
    1040:	90 91 6d 03 	lds	r25, 0x036D
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
    1044:	45 30       	cpi	r20, 0x05	; 5
    1046:	51 05       	cpc	r21, r1
    1048:	81 f0       	breq	.+32     	; 0x106a <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
    104a:	dc 01       	movw	r26, r24
    104c:	a2 0f       	add	r26, r18
    104e:	b3 1f       	adc	r27, r19
    1050:	2c 5a       	subi	r18, 0xAC	; 172
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	fc 01       	movw	r30, r24
    1056:	e2 0f       	add	r30, r18
    1058:	f3 1f       	adc	r31, r19
    105a:	24 55       	subi	r18, 0x54	; 84
    105c:	30 40       	sbci	r19, 0x00	; 0
    105e:	84 e5       	ldi	r24, 0x54	; 84
    1060:	01 90       	ld	r0, Z+
    1062:	0d 92       	st	X+, r0
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	e1 f7       	brne	.-8      	; 0x1060 <glcd_scroll_line+0x2e>
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    106a:	8c 55       	subi	r24, 0x5C	; 92
    106c:	9e 4f       	sbci	r25, 0xFE	; 254
    106e:	dc 01       	movw	r26, r24
    1070:	86 2f       	mov	r24, r22
    1072:	1d 92       	st	X+, r1
    1074:	8a 95       	dec	r24
    1076:	e9 f7       	brne	.-6      	; 0x1072 <glcd_scroll_line+0x40>
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	2c 5a       	subi	r18, 0xAC	; 172
    107e:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
    1080:	46 30       	cpi	r20, 0x06	; 6
    1082:	51 05       	cpc	r21, r1
    1084:	d9 f6       	brne	.-74     	; 0x103c <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	43 e5       	ldi	r20, 0x53	; 83
    108c:	2f e2       	ldi	r18, 0x2F	; 47
    108e:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
}
    1092:	08 95       	ret

00001094 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    1094:	e0 91 6c 03 	lds	r30, 0x036C
    1098:	f0 91 6d 03 	lds	r31, 0x036D
    109c:	88 ef       	ldi	r24, 0xF8	; 248
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	df 01       	movw	r26, r30
    10a2:	9c 01       	movw	r18, r24
    10a4:	1d 92       	st	X+, r1
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	30 40       	sbci	r19, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	43 e5       	ldi	r20, 0x53	; 83
    10b2:	2f e2       	ldi	r18, 0x2F	; 47
    10b4:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
}
    10b8:	08 95       	ret

000010ba <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
    10ba:	e0 91 6c 03 	lds	r30, 0x036C
    10be:	f0 91 6d 03 	lds	r31, 0x036D
    10c2:	88 ef       	ldi	r24, 0xF8	; 248
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	df 01       	movw	r26, r30
    10c8:	9c 01       	movw	r18, r24
    10ca:	1d 92       	st	X+, r1
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	30 40       	sbci	r19, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	43 e5       	ldi	r20, 0x53	; 83
    10d8:	2f e2       	ldi	r18, 0x2F	; 47
    10da:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	glcd_write();
    10de:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
}
    10e2:	08 95       	ret

000010e4 <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
    10e4:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
    10e6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
    10e8:	0d b4       	in	r0, 0x2d	; 45
    10ea:	07 fe       	sbrs	r0, 7
    10ec:	fd cf       	rjmp	.-6      	; 0x10e8 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
    10ee:	28 9a       	sbi	0x05, 0	; 5
}
    10f0:	08 95       	ret

000010f2 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
    10f2:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
    10f4:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f6:	80 ea       	ldi	r24, 0xA0	; 160
    10f8:	9f e0       	ldi	r25, 0x0F	; 15
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
    10fe:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
    1100:	28 9a       	sbi	0x05, 0	; 5
}
    1102:	08 95       	ret

00001104 <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
    1104:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
    1106:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
    1108:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
    110a:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
    110c:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
    110e:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
    1110:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
    1112:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
    1114:	80 e5       	ldi	r24, 0x50	; 80
    1116:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    1118:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    111a:	0e 94 a0 08 	call	0x1140	; 0x1140 <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    111e:	84 e7       	ldi	r24, 0x74	; 116
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	60 e7       	ldi	r22, 0x70	; 112
    1124:	71 e0       	ldi	r23, 0x01	; 1
    1126:	0e 94 0f 08 	call	0x101e	; 0x101e <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    112a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
    112e:	08 95       	ret

00001130 <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    1130:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    1132:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_spi_write>
}
    1136:	08 95       	ret

00001138 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    1138:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    113a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_spi_write>
}
    113e:	08 95       	ret

00001140 <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
    1140:	0e 94 79 08 	call	0x10f2	; 0x10f2 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    1144:	81 e2       	ldi	r24, 0x21	; 33
    1146:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    114a:	82 e1       	ldi	r24, 0x12	; 18
    114c:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    1150:	8c eb       	ldi	r24, 0xBC	; 188
    1152:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    115c:	8c e0       	ldi	r24, 0x0C	; 12
    115e:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1162:	08 95       	ret

00001164 <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    117a:	e0 91 6e 03 	lds	r30, 0x036E
    117e:	f0 91 6f 03 	lds	r31, 0x036F
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
    1182:	88 e0       	ldi	r24, 0x08	; 8
    1184:	e8 2e       	mov	r14, r24
    1186:	f1 2c       	mov	r15, r1
    1188:	e2 0e       	add	r14, r18
    118a:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	8e 15       	cp	r24, r14
    1192:	9f 05       	cpc	r25, r15
    1194:	54 f5       	brge	.+84     	; 0x11ea <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
    1196:	83 81       	ldd	r24, Z+3	; 0x03
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	64 f1       	brlt	.+88     	; 0x11f8 <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    11a0:	80 2f       	mov	r24, r16
    11a2:	80 64       	ori	r24, 0x40	; 64
    11a4:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    11a8:	e0 91 6e 03 	lds	r30, 0x036E
    11ac:	f0 91 6f 03 	lds	r31, 0x036F
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    11b8:	e0 91 6e 03 	lds	r30, 0x036E
    11bc:	f0 91 6f 03 	lds	r31, 0x036F
    11c0:	10 81       	ld	r17, Z
    11c2:	0c c0       	rjmp	.+24     	; 0x11dc <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    11c4:	e0 91 6c 03 	lds	r30, 0x036C
    11c8:	f0 91 6d 03 	lds	r31, 0x036D
    11cc:	ec 0f       	add	r30, r28
    11ce:	fd 1f       	adc	r31, r29
    11d0:	e1 0f       	add	r30, r17
    11d2:	f1 1d       	adc	r31, r1
    11d4:	80 81       	ld	r24, Z
    11d6:	0e 94 98 08 	call	0x1130	; 0x1130 <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    11da:	1f 5f       	subi	r17, 0xFF	; 255
    11dc:	e0 91 6e 03 	lds	r30, 0x036E
    11e0:	f0 91 6f 03 	lds	r31, 0x036F
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	81 17       	cp	r24, r17
    11e8:	68 f7       	brcc	.-38     	; 0x11c4 <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    11ea:	0f 5f       	subi	r16, 0xFF	; 255
    11ec:	cc 5a       	subi	r28, 0xAC	; 172
    11ee:	df 4f       	sbci	r29, 0xFF	; 255
    11f0:	06 30       	cpi	r16, 0x06	; 6
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <glcd_write+0x94>
    11f4:	97 01       	movw	r18, r14
    11f6:	c1 cf       	rjmp	.-126    	; 0x117a <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    11f8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_reset_bbox>

}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	08 95       	ret

0000120a <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1210:	08 95       	ret

00001212 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    1212:	86 30       	cpi	r24, 0x06	; 6
    1214:	10 f0       	brcs	.+4      	; 0x121a <glcd_set_y_address+0x8>
    1216:	85 e4       	ldi	r24, 0x45	; 69
    1218:	01 c0       	rjmp	.+2      	; 0x121c <glcd_set_y_address+0xa>
    121a:	80 64       	ori	r24, 0x40	; 64
    121c:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1220:	08 95       	ret

00001222 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1228:	08 95       	ret

0000122a <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    122a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    122e:	84 e2       	ldi	r24, 0x24	; 36
    1230:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1234:	08 95       	ret

00001236 <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    1236:	1f 93       	push	r17
    1238:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    123a:	81 e2       	ldi	r24, 0x21	; 33
    123c:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    1240:	81 2f       	mov	r24, r17
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    124e:	8c e0       	ldi	r24, 0x0C	; 12
    1250:	0e 94 9c 08 	call	0x1138	; 0x1138 <glcd_command>
}
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    1258:	28 2f       	mov	r18, r24
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	68 1b       	sub	r22, r24
    1260:	71 09       	sbc	r23, r1
    1262:	46 9f       	mul	r20, r22
    1264:	c0 01       	movw	r24, r0
    1266:	47 9f       	mul	r20, r23
    1268:	90 0d       	add	r25, r0
    126a:	56 9f       	mul	r21, r22
    126c:	90 0d       	add	r25, r0
    126e:	11 24       	eor	r1, r1
    1270:	6f ef       	ldi	r22, 0xFF	; 255
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    1278:	82 2f       	mov	r24, r18
    127a:	86 0f       	add	r24, r22
    127c:	08 95       	ret

0000127e <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    127e:	2f 92       	push	r2
    1280:	3f 92       	push	r3
    1282:	5f 92       	push	r5
    1284:	6f 92       	push	r6
    1286:	7f 92       	push	r7
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	0f 92       	push	r0
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	88 2e       	mov	r8, r24
    12a8:	b6 2e       	mov	r11, r22
    12aa:	94 2e       	mov	r9, r20
    12ac:	c2 2e       	mov	r12, r18
    12ae:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    12b0:	01 e0       	ldi	r16, 0x01	; 1
    12b2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <glcd_draw_rect>
    12b6:	dd 24       	eor	r13, r13
    12b8:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    12ba:	0c 2d       	mov	r16, r12
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	38 01       	movw	r6, r16
    12c0:	08 94       	sec
    12c2:	61 08       	sbc	r6, r1
    12c4:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    12c6:	29 2c       	mov	r2, r9
    12c8:	33 24       	eor	r3, r3
    12ca:	08 94       	sec
    12cc:	21 08       	sbc	r2, r1
    12ce:	31 08       	sbc	r3, r1
    12d0:	12 c0       	rjmp	.+36     	; 0x12f6 <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    12d2:	8f 2d       	mov	r24, r15
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	6a 2d       	mov	r22, r10
    12d8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <glcd_get_pixel>
    12dc:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    12de:	8f 2d       	mov	r24, r15
    12e0:	6a 2d       	mov	r22, r10
    12e2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    12e6:	e3 94       	inc	r14
    12e8:	f3 94       	inc	r15
    12ea:	8e 2d       	mov	r24, r14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	82 15       	cp	r24, r2
    12f0:	93 05       	cpc	r25, r3
    12f2:	7c f3       	brlt	.-34     	; 0x12d2 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    12f4:	d3 94       	inc	r13
    12f6:	8d 2d       	mov	r24, r13
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	86 15       	cp	r24, r6
    12fc:	97 05       	cpc	r25, r7
    12fe:	34 f4       	brge	.+12     	; 0x130c <glcd_scrolling_bar_graph+0x8e>
    1300:	f8 2c       	mov	r15, r8
    1302:	ee 24       	eor	r14, r14
    1304:	e3 94       	inc	r14
    1306:	ad 2c       	mov	r10, r13
    1308:	ab 0c       	add	r10, r11
    130a:	ee cf       	rjmp	.-36     	; 0x12e8 <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    130c:	03 50       	subi	r16, 0x03	; 3
    130e:	10 40       	sbci	r17, 0x00	; 0
    1310:	85 2d       	mov	r24, r5
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9c 01       	movw	r18, r24
    1316:	02 9f       	mul	r16, r18
    1318:	c0 01       	movw	r24, r0
    131a:	03 9f       	mul	r16, r19
    131c:	90 0d       	add	r25, r0
    131e:	12 9f       	mul	r17, r18
    1320:	90 0d       	add	r25, r0
    1322:	11 24       	eor	r1, r1
    1324:	6f ef       	ldi	r22, 0xFF	; 255
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    132c:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    132e:	0f 5f       	subi	r16, 0xFF	; 255
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	86 2f       	mov	r24, r22
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	80 17       	cp	r24, r16
    1338:	91 07       	cpc	r25, r17
    133a:	14 f0       	brlt	.+4      	; 0x1340 <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    133c:	2c 2d       	mov	r18, r12
    133e:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1340:	6c 2d       	mov	r22, r12
    1342:	6b 0d       	add	r22, r11
    1344:	98 2d       	mov	r25, r8
    1346:	92 50       	subi	r25, 0x02	; 2
    1348:	99 0d       	add	r25, r9
    134a:	16 2f       	mov	r17, r22
    134c:	12 1b       	sub	r17, r18
    134e:	62 50       	subi	r22, 0x02	; 2
    1350:	12 50       	subi	r17, 0x02	; 2
    1352:	89 2f       	mov	r24, r25
    1354:	49 2f       	mov	r20, r25
    1356:	21 2f       	mov	r18, r17
    1358:	01 e0       	ldi	r16, 0x01	; 1
    135a:	99 83       	std	Y+1, r25	; 0x01
    135c:	0e 94 95 10 	call	0x212a	; 0x212a <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    1360:	11 50       	subi	r17, 0x01	; 1
    1362:	b3 94       	inc	r11
    1364:	99 81       	ldd	r25, Y+1	; 0x01
    1366:	89 2f       	mov	r24, r25
    1368:	61 2f       	mov	r22, r17
    136a:	49 2f       	mov	r20, r25
    136c:	2b 2d       	mov	r18, r11
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	0e 94 95 10 	call	0x212a	; 0x212a <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    1374:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
}
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	7f 90       	pop	r7
    1394:	6f 90       	pop	r6
    1396:	5f 90       	pop	r5
    1398:	3f 90       	pop	r3
    139a:	2f 90       	pop	r2
    139c:	08 95       	ret

0000139e <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	78 2e       	mov	r7, r24
    13b6:	86 2e       	mov	r8, r22
    13b8:	94 2e       	mov	r9, r20
    13ba:	a2 2e       	mov	r10, r18
    13bc:	b0 2e       	mov	r11, r16
    13be:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    13c0:	ee 20       	and	r14, r14
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <glcd_scrolling_bar_graph_timing+0x2a>
    13c4:	ff 24       	eor	r15, r15
    13c6:	f3 94       	inc	r15
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    13cc:	87 2d       	mov	r24, r7
    13ce:	68 2d       	mov	r22, r8
    13d0:	49 2d       	mov	r20, r9
    13d2:	2a 2d       	mov	r18, r10
    13d4:	0b 2d       	mov	r16, r11
    13d6:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    13da:	1f 5f       	subi	r17, 0xFF	; 255
    13dc:	1f 15       	cp	r17, r15
    13de:	b0 f3       	brcs	.-20     	; 0x13cc <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    13e0:	c1 14       	cp	r12, r1
    13e2:	d1 04       	cpc	r13, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <glcd_scrolling_bar_graph_timing+0x4a>
    13e6:	41 c0       	rjmp	.+130    	; 0x146a <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    13e8:	b6 01       	movw	r22, r12
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__floatunsisf>
    13f2:	5b 01       	movw	r10, r22
    13f4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a e7       	ldi	r20, 0x7A	; 122
    13fc:	55 e4       	ldi	r21, 0x45	; 69
    13fe:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__mulsf3>
    1402:	7b 01       	movw	r14, r22
    1404:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__cmpsf2>
    1412:	88 23       	and	r24, r24
    1414:	1c f4       	brge	.+6      	; 0x141c <glcd_scrolling_bar_graph_timing+0x7e>
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	24 c0       	rjmp	.+72     	; 0x1464 <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    141c:	c8 01       	movw	r24, r16
    141e:	b7 01       	movw	r22, r14
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__gesf2>
    142c:	18 16       	cp	r1, r24
    142e:	b4 f4       	brge	.+44     	; 0x145c <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	c6 01       	movw	r24, r12
    1432:	b5 01       	movw	r22, r10
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__mulsf3>
    1440:	0e 94 76 16 	call	0x2cec	; 0x2cec <__fixunssfsi>
    1444:	80 e9       	ldi	r24, 0x90	; 144
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <glcd_scrolling_bar_graph_timing+0xb6>
    144a:	fc 01       	movw	r30, r24
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	61 50       	subi	r22, 0x01	; 1
    1452:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1454:	61 15       	cp	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	c1 f7       	brne	.-16     	; 0x144a <glcd_scrolling_bar_graph_timing+0xac>
    145a:	07 c0       	rjmp	.+14     	; 0x146a <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	c8 01       	movw	r24, r16
    145e:	b7 01       	movw	r22, r14
    1460:	0e 94 76 16 	call	0x2cec	; 0x2cec <__fixunssfsi>
    1464:	cb 01       	movw	r24, r22
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	08 95       	ret

00001482 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	e8 2e       	mov	r14, r24
    148e:	f6 2e       	mov	r15, r22
    1490:	d4 2e       	mov	r13, r20
    1492:	12 2f       	mov	r17, r18
    1494:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    1496:	62 2f       	mov	r22, r18
    1498:	62 50       	subi	r22, 0x02	; 2
    149a:	40 95       	com	r20
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 2c 09 	call	0x1258	; 0x1258 <glcd_map>
    14a2:	f8 0e       	add	r15, r24
    14a4:	18 1b       	sub	r17, r24
    14a6:	12 50       	subi	r17, 0x02	; 2
    14a8:	8e 2d       	mov	r24, r14
    14aa:	6f 2d       	mov	r22, r15
    14ac:	4d 2d       	mov	r20, r13
    14ae:	21 2f       	mov	r18, r17
    14b0:	01 e0       	ldi	r16, 0x01	; 1
    14b2:	0e 94 3a 10 	call	0x2074	; 0x2074 <glcd_fill_rect>
}
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	08 95       	ret

000014c2 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	c8 2e       	mov	r12, r24
    14d0:	d6 2e       	mov	r13, r22
    14d2:	e4 2e       	mov	r14, r20
    14d4:	12 2f       	mov	r17, r18
    14d6:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    14d8:	01 e0       	ldi	r16, 0x01	; 1
    14da:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    14de:	61 2f       	mov	r22, r17
    14e0:	62 50       	subi	r22, 0x02	; 2
    14e2:	f0 94       	com	r15
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	4f 2d       	mov	r20, r15
    14e8:	0e 94 2c 09 	call	0x1258	; 0x1258 <glcd_map>
    14ec:	68 2f       	mov	r22, r24
    14ee:	6f 5f       	subi	r22, 0xFF	; 255
    14f0:	6d 0d       	add	r22, r13
    14f2:	9e ef       	ldi	r25, 0xFE	; 254
    14f4:	e9 0e       	add	r14, r25
    14f6:	18 1b       	sub	r17, r24
    14f8:	12 50       	subi	r17, 0x02	; 2
    14fa:	8c 2d       	mov	r24, r12
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	4e 2d       	mov	r20, r14
    1500:	21 2f       	mov	r18, r17
    1502:	0e 94 3a 10 	call	0x2074	; 0x2074 <glcd_fill_rect>
}
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	08 95       	ret

00001514 <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	f8 2e       	mov	r15, r24
    151e:	e6 2e       	mov	r14, r22
    1520:	12 2f       	mov	r17, r18
	if (height < 3) {
    1522:	23 30       	cpi	r18, 0x03	; 3
    1524:	60 f0       	brcs	.+24     	; 0x153e <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	64 2f       	mov	r22, r20
    152a:	40 2f       	mov	r20, r16
    152c:	0e 94 2c 09 	call	0x1258	; 0x1258 <glcd_map>
    1530:	48 2f       	mov	r20, r24
    1532:	8f 2d       	mov	r24, r15
    1534:	6e 2d       	mov	r22, r14
    1536:	21 2f       	mov	r18, r17
    1538:	01 e0       	ldi	r16, 0x01	; 1
    153a:	0e 94 3a 10 	call	0x2074	; 0x2074 <glcd_fill_rect>
}
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	08 95       	ret

00001548 <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	c8 2e       	mov	r12, r24
    1556:	e6 2e       	mov	r14, r22
    1558:	14 2f       	mov	r17, r20
    155a:	f2 2e       	mov	r15, r18
    155c:	d0 2e       	mov	r13, r16
	if (height < 3) {
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	82 17       	cp	r24, r18
    1562:	a0 f4       	brcc	.+40     	; 0x158c <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    1564:	8c 2d       	mov	r24, r12
    1566:	01 e0       	ldi	r16, 0x01	; 1
    1568:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    156c:	12 50       	subi	r17, 0x02	; 2
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	61 2f       	mov	r22, r17
    1572:	4d 2d       	mov	r20, r13
    1574:	0e 94 2c 09 	call	0x1258	; 0x1258 <glcd_map>
    1578:	48 2f       	mov	r20, r24
    157a:	e3 94       	inc	r14
    157c:	8e ef       	ldi	r24, 0xFE	; 254
    157e:	f8 0e       	add	r15, r24
    1580:	8c 2d       	mov	r24, r12
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	6e 2d       	mov	r22, r14
    1586:	2f 2d       	mov	r18, r15
    1588:	0e 94 3a 10 	call	0x2074	; 0x2074 <glcd_fill_rect>
}
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    159a:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    159c:	90 93 71 03 	sts	0x0371, r25
    15a0:	80 93 70 03 	sts	0x0370, r24
	font_current.width = width;
    15a4:	60 93 72 03 	sts	0x0372, r22
	font_current.height = height;
    15a8:	40 93 73 03 	sts	0x0373, r20
	font_current.start_char = start_char;
    15ac:	20 93 74 03 	sts	0x0374, r18
	font_current.end_char = end_char;
    15b0:	00 93 75 03 	sts	0x0375, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 76 03 	sts	0x0376, r24
}
    15ba:	0f 91       	pop	r16
    15bc:	08 95       	ret

000015be <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    15be:	ef 92       	push	r14
    15c0:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    15c2:	90 93 71 03 	sts	0x0371, r25
    15c6:	80 93 70 03 	sts	0x0370, r24
	font_current.width = width;
    15ca:	60 93 72 03 	sts	0x0372, r22
	font_current.height = height;
    15ce:	40 93 73 03 	sts	0x0373, r20
	font_current.start_char = start_char;
    15d2:	20 93 74 03 	sts	0x0374, r18
	font_current.end_char = end_char;
    15d6:	00 93 75 03 	sts	0x0375, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    15da:	e0 92 76 03 	sts	0x0376, r14
}
    15de:	0f 91       	pop	r16
    15e0:	ef 90       	pop	r14
    15e2:	08 95       	ret

000015e4 <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    15e4:	2f 92       	push	r2
    15e6:	3f 92       	push	r3
    15e8:	4f 92       	push	r4
    15ea:	5f 92       	push	r5
    15ec:	6f 92       	push	r6
    15ee:	7f 92       	push	r7
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	63 97       	sbiw	r28, 0x13	; 19
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	48 2e       	mov	r4, r24
    161a:	e6 2e       	mov	r14, r22
    161c:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    161e:	50 91 74 03 	lds	r21, 0x0374
    1622:	45 17       	cp	r20, r21
    1624:	20 f0       	brcs	.+8      	; 0x162e <glcd_draw_char_xy+0x4a>
    1626:	80 91 75 03 	lds	r24, 0x0375
    162a:	84 17       	cp	r24, r20
    162c:	08 f4       	brcc	.+2      	; 0x1630 <glcd_draw_char_xy+0x4c>
    162e:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1630:	80 91 76 03 	lds	r24, 0x0376
    1634:	88 23       	and	r24, r24
    1636:	09 f0       	breq	.+2      	; 0x163a <glcd_draw_char_xy+0x56>
    1638:	58 c0       	rjmp	.+176    	; 0x16ea <glcd_draw_char_xy+0x106>
    163a:	04 2d       	mov	r16, r4
    163c:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    163e:	43 2e       	mov	r4, r19
    1640:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1642:	60 2e       	mov	r6, r16
    1644:	77 24       	eor	r7, r7
    1646:	8e 2c       	mov	r8, r14
    1648:	99 24       	eor	r9, r9
    164a:	49 c0       	rjmp	.+146    	; 0x16de <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    164c:	4f 2d       	mov	r20, r15
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	80 91 74 03 	lds	r24, 0x0374
    1654:	92 01       	movw	r18, r4
    1656:	28 1b       	sub	r18, r24
    1658:	31 09       	sbc	r19, r1
    165a:	89 2f       	mov	r24, r25
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	bc 01       	movw	r22, r24
    1660:	26 9f       	mul	r18, r22
    1662:	c0 01       	movw	r24, r0
    1664:	27 9f       	mul	r18, r23
    1666:	90 0d       	add	r25, r0
    1668:	36 9f       	mul	r19, r22
    166a:	90 0d       	add	r25, r0
    166c:	11 24       	eor	r1, r1
    166e:	84 0f       	add	r24, r20
    1670:	95 1f       	adc	r25, r21
    1672:	e0 91 70 03 	lds	r30, 0x0370
    1676:	f0 91 71 03 	lds	r31, 0x0371
    167a:	e8 0f       	add	r30, r24
    167c:	f9 1f       	adc	r31, r25
    167e:	e4 91       	lpm	r30, Z+
    1680:	1e 2d       	mov	r17, r14
    1682:	22 24       	eor	r2, r2
    1684:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1686:	5a 01       	movw	r10, r20
    1688:	a6 0c       	add	r10, r6
    168a:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    168c:	ce 2e       	mov	r12, r30
    168e:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1690:	74 e5       	ldi	r23, 0x54	; 84
    1692:	a7 16       	cp	r10, r23
    1694:	b1 04       	cpc	r11, r1
    1696:	0c f0       	brlt	.+2      	; 0x169a <glcd_draw_char_xy+0xb6>
    1698:	70 c1       	rjmp	.+736    	; 0x197a <glcd_draw_char_xy+0x396>
    169a:	c1 01       	movw	r24, r2
    169c:	88 0d       	add	r24, r8
    169e:	99 1d       	adc	r25, r9
    16a0:	c0 97       	sbiw	r24, 0x30	; 48
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <glcd_draw_char_xy+0xc2>
    16a4:	6a c1       	rjmp	.+724    	; 0x197a <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    16a6:	c6 01       	movw	r24, r12
    16a8:	02 2c       	mov	r0, r2
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <glcd_draw_char_xy+0xcc>
    16ac:	95 95       	asr	r25
    16ae:	87 95       	ror	r24
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <glcd_draw_char_xy+0xc8>
    16b4:	80 ff       	sbrs	r24, 0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    16b8:	80 2f       	mov	r24, r16
    16ba:	61 2f       	mov	r22, r17
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    16c0:	80 2f       	mov	r24, r16
    16c2:	61 2f       	mov	r22, r17
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    16ca:	08 94       	sec
    16cc:	21 1c       	adc	r2, r1
    16ce:	31 1c       	adc	r3, r1
    16d0:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    16d2:	88 e0       	ldi	r24, 0x08	; 8
    16d4:	28 16       	cp	r2, r24
    16d6:	31 04       	cpc	r3, r1
    16d8:	d9 f6       	brne	.-74     	; 0x1690 <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    16da:	f3 94       	inc	r15
    16dc:	0f 5f       	subi	r16, 0xFF	; 255
    16de:	90 91 72 03 	lds	r25, 0x0372
    16e2:	f9 16       	cp	r15, r25
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <glcd_draw_char_xy+0x104>
    16e6:	b2 cf       	rjmp	.-156    	; 0x164c <glcd_draw_char_xy+0x68>
    16e8:	49 c1       	rjmp	.+658    	; 0x197c <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <glcd_draw_char_xy+0x10c>
    16ee:	9c c0       	rjmp	.+312    	; 0x1828 <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    16f0:	20 91 73 03 	lds	r18, 0x0373
    16f4:	82 2f       	mov	r24, r18
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	87 70       	andi	r24, 0x07	; 7
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	26 95       	lsr	r18
    16fe:	26 95       	lsr	r18
    1700:	26 95       	lsr	r18
    1702:	89 2b       	or	r24, r25
    1704:	09 f0       	breq	.+2      	; 0x1708 <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    1706:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    1708:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    170a:	80 91 72 03 	lds	r24, 0x0372
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	98 9f       	mul	r25, r24
    1712:	80 2d       	mov	r24, r0
    1714:	11 24       	eor	r1, r1
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	23 2f       	mov	r18, r19
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	25 1b       	sub	r18, r21
    1720:	31 09       	sbc	r19, r1
    1722:	dc 01       	movw	r26, r24
    1724:	a2 9f       	mul	r26, r18
    1726:	c0 01       	movw	r24, r0
    1728:	a3 9f       	mul	r26, r19
    172a:	90 0d       	add	r25, r0
    172c:	b2 9f       	mul	r27, r18
    172e:	90 0d       	add	r25, r0
    1730:	11 24       	eor	r1, r1
    1732:	e0 91 70 03 	lds	r30, 0x0370
    1736:	f0 91 71 03 	lds	r31, 0x0371
    173a:	e8 0f       	add	r30, r24
    173c:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    173e:	b4 91       	lpm	r27, Z+
    1740:	bb 83       	std	Y+3, r27	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	23 2f       	mov	r18, r19
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3a 83       	std	Y+2, r19	; 0x02
    174a:	29 83       	std	Y+1, r18	; 0x01
    174c:	3f 01       	movw	r6, r30
    174e:	08 94       	sec
    1750:	61 1c       	adc	r6, r1
    1752:	71 1c       	adc	r7, r1
    1754:	54 2c       	mov	r5, r4
    1756:	88 24       	eor	r8, r8
    1758:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    175a:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    175c:	44 2d       	mov	r20, r4
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	5c 87       	std	Y+12, r21	; 0x0c
    1762:	4b 87       	std	Y+11, r20	; 0x0b
    1764:	4f c0       	rjmp	.+158    	; 0x1804 <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    1766:	f5 01       	movw	r30, r10
    1768:	84 91       	lpm	r24, Z+
    176a:	e8 86       	std	Y+8, r14	; 0x08
    176c:	86 01       	movw	r16, r12
    176e:	1b 8a       	std	Y+19, r1	; 0x13
    1770:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1772:	28 2e       	mov	r2, r24
    1774:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1776:	29 85       	ldd	r18, Y+9	; 0x09
    1778:	3a 85       	ldd	r19, Y+10	; 0x0a
    177a:	24 35       	cpi	r18, 0x54	; 84
    177c:	31 05       	cpc	r19, r1
    177e:	0c f0       	brlt	.+2      	; 0x1782 <glcd_draw_char_xy+0x19e>
    1780:	fc c0       	rjmp	.+504    	; 0x197a <glcd_draw_char_xy+0x396>
    1782:	2a 89       	ldd	r18, Y+18	; 0x12
    1784:	8a 89       	ldd	r24, Y+18	; 0x12
    1786:	9b 89       	ldd	r25, Y+19	; 0x13
    1788:	8e 0d       	add	r24, r14
    178a:	9f 1d       	adc	r25, r15
    178c:	c0 97       	sbiw	r24, 0x30	; 48
    178e:	0c f0       	brlt	.+2      	; 0x1792 <glcd_draw_char_xy+0x1ae>
    1790:	f4 c0       	rjmp	.+488    	; 0x197a <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1792:	80 91 73 03 	lds	r24, 0x0373
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	08 17       	cp	r16, r24
    179a:	19 07       	cpc	r17, r25
    179c:	94 f4       	brge	.+36     	; 0x17c2 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    179e:	c1 01       	movw	r24, r2
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <glcd_draw_char_xy+0x1c4>
    17a4:	95 95       	asr	r25
    17a6:	87 95       	ror	r24
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <glcd_draw_char_xy+0x1c0>
    17ac:	68 85       	ldd	r22, Y+8	; 0x08
    17ae:	62 0f       	add	r22, r18
    17b0:	80 ff       	sbrs	r24, 0
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    17b4:	85 2d       	mov	r24, r5
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    17ba:	85 2d       	mov	r24, r5
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    17c2:	4a 89       	ldd	r20, Y+18	; 0x12
    17c4:	5b 89       	ldd	r21, Y+19	; 0x13
    17c6:	4f 5f       	subi	r20, 0xFF	; 255
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	5b 8b       	std	Y+19, r21	; 0x13
    17cc:	4a 8b       	std	Y+18, r20	; 0x12
    17ce:	0f 5f       	subi	r16, 0xFF	; 255
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    17d2:	48 30       	cpi	r20, 0x08	; 8
    17d4:	51 05       	cpc	r21, r1
    17d6:	79 f6       	brne	.-98     	; 0x1776 <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    17d8:	43 94       	inc	r4
    17da:	68 e0       	ldi	r22, 0x08	; 8
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	e6 0e       	add	r14, r22
    17e0:	f7 1e       	adc	r15, r23
    17e2:	c6 0e       	add	r12, r22
    17e4:	d7 1e       	adc	r13, r23
    17e6:	08 94       	sec
    17e8:	a1 1c       	adc	r10, r1
    17ea:	b1 1c       	adc	r11, r1
    17ec:	7c 81       	ldd	r23, Y+4	; 0x04
    17ee:	47 16       	cp	r4, r23
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <glcd_draw_char_xy+0x210>
    17f2:	b9 cf       	rjmp	.-142    	; 0x1766 <glcd_draw_char_xy+0x182>
    17f4:	08 94       	sec
    17f6:	81 1c       	adc	r8, r1
    17f8:	91 1c       	adc	r9, r1
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	68 0e       	add	r6, r24
    1800:	79 1e       	adc	r7, r25
    1802:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	89 16       	cp	r8, r25
    1808:	08 f0       	brcs	.+2      	; 0x180c <glcd_draw_char_xy+0x228>
    180a:	b8 c0       	rjmp	.+368    	; 0x197c <glcd_draw_char_xy+0x398>
    180c:	89 89       	ldd	r24, Y+17	; 0x11
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	7c 01       	movw	r14, r24
    1812:	53 01       	movw	r10, r6
    1814:	44 24       	eor	r4, r4
    1816:	cc 24       	eor	r12, r12
    1818:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    181a:	ab 85       	ldd	r26, Y+11	; 0x0b
    181c:	bc 85       	ldd	r27, Y+12	; 0x0c
    181e:	a8 0d       	add	r26, r8
    1820:	b9 1d       	adc	r27, r9
    1822:	ba 87       	std	Y+10, r27	; 0x0a
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	e2 cf       	rjmp	.-60     	; 0x17ec <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	09 f0       	breq	.+2      	; 0x182e <glcd_draw_char_xy+0x24a>
    182c:	a6 c0       	rjmp	.+332    	; 0x197a <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    182e:	b0 90 73 03 	lds	r11, 0x0373
    1832:	b6 94       	lsr	r11
    1834:	b6 94       	lsr	r11
    1836:	b6 94       	lsr	r11
    1838:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    183a:	40 91 72 03 	lds	r20, 0x0372
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    183e:	23 2f       	mov	r18, r19
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	25 1b       	sub	r18, r21
    1844:	31 09       	sbc	r19, r1
    1846:	b4 9e       	mul	r11, r20
    1848:	80 2d       	mov	r24, r0
    184a:	11 24       	eor	r1, r1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	2e 9f       	mul	r18, r30
    1852:	c0 01       	movw	r24, r0
    1854:	2f 9f       	mul	r18, r31
    1856:	90 0d       	add	r25, r0
    1858:	3e 9f       	mul	r19, r30
    185a:	90 0d       	add	r25, r0
    185c:	11 24       	eor	r1, r1
    185e:	80 90 70 03 	lds	r8, 0x0370
    1862:	90 90 71 03 	lds	r9, 0x0371
    1866:	88 0e       	add	r8, r24
    1868:	99 1e       	adc	r9, r25
    186a:	54 2e       	mov	r5, r20
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	41 50       	subi	r20, 0x01	; 1
    1872:	50 40       	sbci	r21, 0x00	; 0
    1874:	64 2f       	mov	r22, r20
    1876:	63 1b       	sub	r22, r19
    1878:	e0 e0       	ldi	r30, 0x00	; 0
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	07 c0       	rjmp	.+14     	; 0x188e <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    1880:	89 2f       	mov	r24, r25
    1882:	86 1b       	sub	r24, r22
    1884:	f4 01       	movw	r30, r8
    1886:	e8 0f       	add	r30, r24
    1888:	f1 1d       	adc	r31, r1
    188a:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	96 0f       	add	r25, r22
    1890:	2b 15       	cp	r18, r11
    1892:	b0 f3       	brcs	.-20     	; 0x1880 <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    1894:	ee 23       	and	r30, r30
    1896:	21 f4       	brne	.+8      	; 0x18a0 <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    1898:	5a 94       	dec	r5
				if (var_width == 0) {
    189a:	11 f0       	breq	.+4      	; 0x18a0 <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    189c:	3f 5f       	subi	r19, 0xFF	; 255
    189e:	ea cf       	rjmp	.-44     	; 0x1874 <glcd_draw_char_xy+0x290>
		}
    18a0:	ff 24       	eor	r15, r15
    18a2:	66 24       	eor	r6, r6
    18a4:	cc 24       	eor	r12, r12
    18a6:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    18a8:	24 2d       	mov	r18, r4
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	38 8b       	std	Y+16, r19	; 0x10
    18ae:	2f 87       	std	Y+15, r18	; 0x0f
    18b0:	58 c0       	rjmp	.+176    	; 0x1962 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    18b2:	8a 2d       	mov	r24, r10
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	20 91 72 03 	lds	r18, 0x0372
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4e 81       	ldd	r20, Y+6	; 0x06
    18be:	5f 81       	ldd	r21, Y+7	; 0x07
    18c0:	42 9f       	mul	r20, r18
    18c2:	f0 01       	movw	r30, r0
    18c4:	43 9f       	mul	r20, r19
    18c6:	f0 0d       	add	r31, r0
    18c8:	52 9f       	mul	r21, r18
    18ca:	f0 0d       	add	r31, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	e8 0d       	add	r30, r8
    18d4:	f9 1d       	adc	r31, r9
    18d6:	e4 91       	lpm	r30, Z+
    18d8:	86 01       	movw	r16, r12
    18da:	1b 8a       	std	Y+19, r1	; 0x13
    18dc:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    18de:	6f 85       	ldd	r22, Y+15	; 0x0f
    18e0:	78 89       	ldd	r23, Y+16	; 0x10
    18e2:	68 0f       	add	r22, r24
    18e4:	79 1f       	adc	r23, r25
    18e6:	7e 87       	std	Y+14, r23	; 0x0e
    18e8:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    18ea:	2e 2e       	mov	r2, r30
    18ec:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	84 35       	cpi	r24, 0x54	; 84
    18f4:	91 05       	cpc	r25, r1
    18f6:	0c f0       	brlt	.+2      	; 0x18fa <glcd_draw_char_xy+0x316>
    18f8:	40 c0       	rjmp	.+128    	; 0x197a <glcd_draw_char_xy+0x396>
    18fa:	2a 89       	ldd	r18, Y+18	; 0x12
    18fc:	8a 89       	ldd	r24, Y+18	; 0x12
    18fe:	9b 89       	ldd	r25, Y+19	; 0x13
    1900:	8e 0d       	add	r24, r14
    1902:	9f 1d       	adc	r25, r15
    1904:	c0 97       	sbiw	r24, 0x30	; 48
    1906:	cc f5       	brge	.+114    	; 0x197a <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1908:	80 91 73 03 	lds	r24, 0x0373
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	08 17       	cp	r16, r24
    1910:	19 07       	cpc	r17, r25
    1912:	94 f4       	brge	.+36     	; 0x1938 <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1914:	c1 01       	movw	r24, r2
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <glcd_draw_char_xy+0x33a>
    191a:	95 95       	asr	r25
    191c:	87 95       	ror	r24
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <glcd_draw_char_xy+0x336>
    1922:	6d 81       	ldd	r22, Y+5	; 0x05
    1924:	62 0f       	add	r22, r18
    1926:	80 ff       	sbrs	r24, 0
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    192a:	87 2d       	mov	r24, r7
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1930:	87 2d       	mov	r24, r7
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1938:	ea 89       	ldd	r30, Y+18	; 0x12
    193a:	fb 89       	ldd	r31, Y+19	; 0x13
    193c:	31 96       	adiw	r30, 0x01	; 1
    193e:	fb 8b       	std	Y+19, r31	; 0x13
    1940:	ea 8b       	std	Y+18, r30	; 0x12
    1942:	0f 5f       	subi	r16, 0xFF	; 255
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    1946:	38 97       	sbiw	r30, 0x08	; 8
    1948:	91 f6       	brne	.-92     	; 0x18ee <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    194a:	a3 94       	inc	r10
    194c:	73 94       	inc	r7
    194e:	a5 14       	cp	r10, r5
    1950:	08 f4       	brcc	.+2      	; 0x1954 <glcd_draw_char_xy+0x370>
    1952:	af cf       	rjmp	.-162    	; 0x18b2 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    1954:	63 94       	inc	r6
    1956:	28 e0       	ldi	r18, 0x08	; 8
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	e2 0e       	add	r14, r18
    195c:	f3 1e       	adc	r15, r19
    195e:	c2 0e       	add	r12, r18
    1960:	d3 1e       	adc	r13, r19
    1962:	6b 14       	cp	r6, r11
    1964:	10 f0       	brcs	.+4      	; 0x196a <glcd_draw_char_xy+0x386>
    1966:	95 2d       	mov	r25, r5
    1968:	09 c0       	rjmp	.+18     	; 0x197c <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    196a:	46 2d       	mov	r20, r6
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	5f 83       	std	Y+7, r21	; 0x07
    1970:	4e 83       	std	Y+6, r20	; 0x06
    1972:	ed 82       	std	Y+5, r14	; 0x05
    1974:	74 2c       	mov	r7, r4
    1976:	aa 24       	eor	r10, r10
    1978:	ea cf       	rjmp	.-44     	; 0x194e <glcd_draw_char_xy+0x36a>
    197a:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    197c:	89 2f       	mov	r24, r25
    197e:	63 96       	adiw	r28, 0x13	; 19
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	8f 90       	pop	r8
    19a2:	7f 90       	pop	r7
    19a4:	6f 90       	pop	r6
    19a6:	5f 90       	pop	r5
    19a8:	4f 90       	pop	r4
    19aa:	3f 90       	pop	r3
    19ac:	2f 90       	pop	r2
    19ae:	08 95       	ret

000019b0 <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	18 2f       	mov	r17, r24
    19ba:	06 2f       	mov	r16, r22
    19bc:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    19be:	86 2f       	mov	r24, r22
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	40 91 73 03 	lds	r20, 0x0373
    19c6:	2f e2       	ldi	r18, 0x2F	; 47
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	24 1b       	sub	r18, r20
    19cc:	31 09       	sbc	r19, r1
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	64 f0       	brlt	.+24     	; 0x19ec <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    19d4:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    19d6:	21 96       	adiw	r28, 0x01	; 1
    19d8:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    19da:	44 23       	and	r20, r20
    19dc:	39 f0       	breq	.+14     	; 0x19ec <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    19de:	81 2f       	mov	r24, r17
    19e0:	60 2f       	mov	r22, r16
    19e2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <glcd_draw_char_xy>
		x += (width + 1);
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	18 0f       	add	r17, r24
    19ea:	f4 cf       	rjmp	.-24     	; 0x19d4 <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	18 2f       	mov	r17, r24
    1a00:	06 2f       	mov	r16, r22
    1a02:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1a04:	86 2f       	mov	r24, r22
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	40 91 73 03 	lds	r20, 0x0373
    1a0c:	2f e2       	ldi	r18, 0x2F	; 47
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	24 1b       	sub	r18, r20
    1a12:	31 09       	sbc	r19, r1
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	44 f4       	brge	.+16     	; 0x1a2a <glcd_draw_string_xy+0x34>
    1a1a:	0a c0       	rjmp	.+20     	; 0x1a30 <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    1a1c:	81 2f       	mov	r24, r17
    1a1e:	60 2f       	mov	r22, r16
    1a20:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <glcd_draw_char_xy>
		x += (width + 1);
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	18 0f       	add	r17, r24
		c++;
    1a28:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1a2a:	48 81       	ld	r20, Y
    1a2c:	44 23       	and	r20, r20
    1a2e:	b1 f7       	brne	.-20     	; 0x1a1c <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    1a3a:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1a3c:	84 35       	cpi	r24, 0x54	; 84
    1a3e:	f0 f4       	brcc	.+60     	; 0x1a7c <glcd_get_pixel+0x42>
    1a40:	60 33       	cpi	r22, 0x30	; 48
    1a42:	e0 f4       	brcc	.+56     	; 0x1a7c <glcd_get_pixel+0x42>
    1a44:	86 2f       	mov	r24, r22
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	86 95       	lsr	r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	24 e5       	ldi	r18, 0x54	; 84
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	82 9f       	mul	r24, r18
    1a54:	f0 01       	movw	r30, r0
    1a56:	83 9f       	mul	r24, r19
    1a58:	f0 0d       	add	r31, r0
    1a5a:	92 9f       	mul	r25, r18
    1a5c:	f0 0d       	add	r31, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	e4 0f       	add	r30, r20
    1a62:	f1 1d       	adc	r31, r1
    1a64:	ec 58       	subi	r30, 0x8C	; 140
    1a66:	fe 4f       	sbci	r31, 0xFE	; 254
    1a68:	80 81       	ld	r24, Z
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	67 70       	andi	r22, 0x07	; 7
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <glcd_get_pixel+0x3a>
    1a70:	95 95       	asr	r25
    1a72:	87 95       	ror	r24
    1a74:	6a 95       	dec	r22
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <glcd_get_pixel+0x36>
    1a78:	81 70       	andi	r24, 0x01	; 1
    1a7a:	08 95       	ret
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    1a7e:	08 95       	ret

00001a80 <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    1a80:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    1a82:	80 91 6c 03 	lds	r24, 0x036C
    1a86:	90 91 6d 03 	lds	r25, 0x036D
    1a8a:	48 ef       	ldi	r20, 0xF8	; 248
    1a8c:	51 e0       	ldi	r21, 0x01	; 1
    1a8e:	0e 94 43 18 	call	0x3086	; 0x3086 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    1a92:	0e 94 04 08 	call	0x1008	; 0x1008 <glcd_bbox_refresh>
}
    1a96:	08 95       	ret

00001a98 <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	08 2f       	mov	r16, r24
    1a9e:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1aa0:	84 35       	cpi	r24, 0x54	; 84
    1aa2:	e8 f4       	brcc	.+58     	; 0x1ade <glcd_invert_pixel+0x46>
    1aa4:	60 33       	cpi	r22, 0x30	; 48
    1aa6:	d8 f4       	brcc	.+54     	; 0x1ade <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    1aa8:	40 2f       	mov	r20, r16
    1aaa:	21 2f       	mov	r18, r17
    1aac:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    1ab0:	e1 2f       	mov	r30, r17
    1ab2:	e6 95       	lsr	r30
    1ab4:	e6 95       	lsr	r30
    1ab6:	e6 95       	lsr	r30
    1ab8:	84 e5       	ldi	r24, 0x54	; 84
    1aba:	e8 9f       	mul	r30, r24
    1abc:	f0 01       	movw	r30, r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	e0 0f       	add	r30, r16
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	ec 58       	subi	r30, 0x8C	; 140
    1ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac8:	17 70       	andi	r17, 0x07	; 7
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <glcd_invert_pixel+0x3c>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	1a 95       	dec	r17
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <glcd_invert_pixel+0x38>
    1ad8:	20 81       	ld	r18, Z
    1ada:	28 27       	eor	r18, r24
    1adc:	20 83       	st	Z, r18
}
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	d6 2e       	mov	r13, r22
    1af4:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1af6:	e8 2e       	mov	r14, r24
    1af8:	ff 24       	eor	r15, r15
    1afa:	e4 0e       	add	r14, r20
    1afc:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1afe:	c6 2f       	mov	r28, r22
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	c2 0f       	add	r28, r18
    1b04:	d1 1d       	adc	r29, r1
    1b06:	0b c0       	rjmp	.+22     	; 0x1b1e <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    1b08:	80 2f       	mov	r24, r16
    1b0a:	61 2f       	mov	r22, r17
    1b0c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1b10:	1f 5f       	subi	r17, 0xFF	; 255
    1b12:	81 2f       	mov	r24, r17
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	8c 17       	cp	r24, r28
    1b18:	9d 07       	cpc	r25, r29
    1b1a:	b4 f3       	brlt	.-20     	; 0x1b08 <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1b1c:	0f 5f       	subi	r16, 0xFF	; 255
    1b1e:	80 2f       	mov	r24, r16
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	8e 15       	cp	r24, r14
    1b24:	9f 05       	cpc	r25, r15
    1b26:	14 f4       	brge	.+4      	; 0x1b2c <glcd_invert_area+0x48>
    1b28:	1d 2d       	mov	r17, r13
    1b2a:	f3 cf       	rjmp	.-26     	; 0x1b12 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	08 95       	ret

00001b3c <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    1b3c:	a8 2f       	mov	r26, r24
    1b3e:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    1b40:	84 35       	cpi	r24, 0x54	; 84
    1b42:	d0 f5       	brcc	.+116    	; 0x1bb8 <glcd_set_pixel+0x7c>
    1b44:	60 33       	cpi	r22, 0x30	; 48
    1b46:	c0 f5       	brcc	.+112    	; 0x1bb8 <glcd_set_pixel+0x7c>
    1b48:	56 2f       	mov	r21, r22
    1b4a:	56 95       	lsr	r21
    1b4c:	56 95       	lsr	r21
    1b4e:	56 95       	lsr	r21
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	26 2f       	mov	r18, r22
    1b54:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    1b56:	44 23       	and	r20, r20
    1b58:	a1 f0       	breq	.+40     	; 0x1b82 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    1b5a:	e4 e5       	ldi	r30, 0x54	; 84
    1b5c:	5e 9f       	mul	r21, r30
    1b5e:	f0 01       	movw	r30, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	e8 0f       	add	r30, r24
    1b64:	f9 1f       	adc	r31, r25
    1b66:	ec 58       	subi	r30, 0x8C	; 140
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	27 70       	andi	r18, 0x07	; 7
    1b6c:	30 70       	andi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <glcd_set_pixel+0x3c>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	2a 95       	dec	r18
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <glcd_set_pixel+0x38>
    1b7c:	20 81       	ld	r18, Z
    1b7e:	28 2b       	or	r18, r24
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    1b82:	e4 e5       	ldi	r30, 0x54	; 84
    1b84:	5e 9f       	mul	r21, r30
    1b86:	f0 01       	movw	r30, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f9 1f       	adc	r31, r25
    1b8e:	ec 58       	subi	r30, 0x8C	; 140
    1b90:	fe 4f       	sbci	r31, 0xFE	; 254
    1b92:	27 70       	andi	r18, 0x07	; 7
    1b94:	30 70       	andi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <glcd_set_pixel+0x64>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	2a 95       	dec	r18
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <glcd_set_pixel+0x60>
    1ba4:	80 95       	com	r24
    1ba6:	20 81       	ld	r18, Z
    1ba8:	28 23       	and	r18, r24
    1baa:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    1bac:	8a 2f       	mov	r24, r26
    1bae:	67 2f       	mov	r22, r23
    1bb0:	4a 2f       	mov	r20, r26
    1bb2:	27 2f       	mov	r18, r23
    1bb4:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
    1bb8:	08 95       	ret

00001bba <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1bba:	3f 92       	push	r3
    1bbc:	4f 92       	push	r4
    1bbe:	5f 92       	push	r5
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <glcd_fill_circle+0x24>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <glcd_fill_circle+0x26>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <glcd_fill_circle+0x28>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	b8 2e       	mov	r11, r24
    1be8:	e6 2e       	mov	r14, r22
    1bea:	f4 2e       	mov	r15, r20
    1bec:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1bee:	04 2f       	mov	r16, r20
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1bf2:	64 1b       	sub	r22, r20
    1bf4:	48 0f       	add	r20, r24
    1bf6:	2f 2d       	mov	r18, r15
    1bf8:	2e 0d       	add	r18, r14
    1bfa:	8f 19       	sub	r24, r15
    1bfc:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    1c00:	8e 2c       	mov	r8, r14
    1c02:	99 24       	eor	r9, r9
    1c04:	24 01       	movw	r4, r8
    1c06:	40 1a       	sub	r4, r16
    1c08:	51 0a       	sbc	r5, r17
    1c0a:	68 01       	movw	r12, r16
    1c0c:	c8 0c       	add	r12, r8
    1c0e:	d9 1c       	adc	r13, r9
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    1c12:	8b 2d       	mov	r24, r11
    1c14:	64 2d       	mov	r22, r4
    1c16:	46 2d       	mov	r20, r6
    1c18:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    1c1c:	08 94       	sec
    1c1e:	41 1c       	adc	r4, r1
    1c20:	51 1c       	adc	r5, r1
    1c22:	c4 14       	cp	r12, r4
    1c24:	d5 04       	cpc	r13, r5
    1c26:	ac f7       	brge	.-22     	; 0x1c12 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1c28:	dd 24       	eor	r13, r13
    1c2a:	d3 94       	inc	r13
    1c2c:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1c2e:	00 0f       	add	r16, r16
    1c30:	11 1f       	adc	r17, r17
    1c32:	40 2e       	mov	r4, r16
    1c34:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1c36:	cf 2c       	mov	r12, r15
    1c38:	aa 24       	eor	r10, r10
    1c3a:	00 e0       	ldi	r16, 0x00	; 0
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1c42:	8e 2d       	mov	r24, r14
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 01       	movw	r18, r24
    1c48:	21 50       	subi	r18, 0x01	; 1
    1c4a:	30 40       	sbci	r19, 0x00	; 0
    1c4c:	3a 83       	std	Y+2, r19	; 0x02
    1c4e:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1c50:	fc 01       	movw	r30, r24
    1c52:	31 96       	adiw	r30, 0x01	; 1
    1c54:	fc 83       	std	Y+4, r31	; 0x04
    1c56:	eb 83       	std	Y+3, r30	; 0x03
    1c58:	54 c0       	rjmp	.+168    	; 0x1d02 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1c5a:	d7 fc       	sbrc	r13, 7
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <glcd_fill_circle+0xac>
			y--;
    1c5e:	ca 94       	dec	r12
			ddF_y += 2;
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	4f 0e       	add	r4, r31
			f += ddF_y;
    1c64:	d4 0c       	add	r13, r4
		}
		x++;
    1c66:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1c68:	8c 2d       	mov	r24, r12
    1c6a:	99 27       	eor	r25, r25
    1c6c:	87 fd       	sbrc	r24, 7
    1c6e:	90 95       	com	r25
    1c70:	94 01       	movw	r18, r8
    1c72:	28 1b       	sub	r18, r24
    1c74:	39 0b       	sbc	r19, r25
    1c76:	3e 83       	std	Y+6, r19	; 0x06
    1c78:	2d 83       	std	Y+5, r18	; 0x05
    1c7a:	7c 01       	movw	r14, r24
    1c7c:	e8 0c       	add	r14, r8
    1c7e:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    1c80:	3a 2c       	mov	r3, r10
    1c82:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1c84:	5b 2c       	mov	r5, r11
    1c86:	5a 18       	sub	r5, r10
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1c8a:	83 2d       	mov	r24, r3
    1c8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c8e:	46 2d       	mov	r20, r6
    1c90:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1c94:	85 2d       	mov	r24, r5
    1c96:	6d 81       	ldd	r22, Y+5	; 0x05
    1c98:	46 2d       	mov	r20, r6
    1c9a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	ed 81       	ldd	r30, Y+5	; 0x05
    1caa:	fe 81       	ldd	r31, Y+6	; 0x06
    1cac:	ee 16       	cp	r14, r30
    1cae:	ff 06       	cpc	r15, r31
    1cb0:	64 f7       	brge	.-40     	; 0x1c8a <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	20 1b       	sub	r18, r16
    1cb8:	31 0b       	sbc	r19, r17
    1cba:	3e 83       	std	Y+6, r19	; 0x06
    1cbc:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1cbe:	eb 80       	ldd	r14, Y+3	; 0x03
    1cc0:	fc 80       	ldd	r15, Y+4	; 0x04
    1cc2:	e0 0e       	add	r14, r16
    1cc4:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    1cc6:	3c 2c       	mov	r3, r12
    1cc8:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    1cca:	5b 2c       	mov	r5, r11
    1ccc:	5c 18       	sub	r5, r12
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    1cd0:	83 2d       	mov	r24, r3
    1cd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd4:	46 2d       	mov	r20, r6
    1cd6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    1cda:	85 2d       	mov	r24, r5
    1cdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cde:	46 2d       	mov	r20, r6
    1ce0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf0:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf2:	ee 16       	cp	r14, r30
    1cf4:	ff 06       	cpc	r15, r31
    1cf6:	64 f7       	brge	.-40     	; 0x1cd0 <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    1cf8:	d7 0c       	add	r13, r7
    1cfa:	0f 5f       	subi	r16, 0xFF	; 255
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	f2 e0       	ldi	r31, 0x02	; 2
    1d00:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1d02:	ac 14       	cp	r10, r12
    1d04:	0c f4       	brge	.+2      	; 0x1d08 <glcd_fill_circle+0x14e>
    1d06:	a9 cf       	rjmp	.-174    	; 0x1c5a <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1d08:	26 96       	adiw	r28, 0x06	; 6
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	7f 90       	pop	r7
    1d2e:	6f 90       	pop	r6
    1d30:	5f 90       	pop	r5
    1d32:	4f 90       	pop	r4
    1d34:	3f 90       	pop	r3
    1d36:	08 95       	ret

00001d38 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1d38:	7f 92       	push	r7
    1d3a:	8f 92       	push	r8
    1d3c:	9f 92       	push	r9
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	a8 2e       	mov	r10, r24
    1d50:	b6 2e       	mov	r11, r22
    1d52:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    1d54:	99 24       	eor	r9, r9
    1d56:	93 94       	inc	r9
    1d58:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1d5a:	84 2f       	mov	r24, r20
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	78 2e       	mov	r7, r24
    1d64:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1d66:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1d68:	ea 2c       	mov	r14, r10
    1d6a:	e4 1a       	sub	r14, r20
    1d6c:	06 2f       	mov	r16, r22
    1d6e:	04 1b       	sub	r16, r20
    1d70:	f4 2e       	mov	r15, r20
    1d72:	fa 0c       	add	r15, r10
    1d74:	14 2f       	mov	r17, r20
    1d76:	16 0f       	add	r17, r22
    1d78:	8e 2d       	mov	r24, r14
    1d7a:	60 2f       	mov	r22, r16
    1d7c:	4f 2d       	mov	r20, r15
    1d7e:	21 2f       	mov	r18, r17
    1d80:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1d84:	8a 2d       	mov	r24, r10
    1d86:	61 2f       	mov	r22, r17
    1d88:	4c 2d       	mov	r20, r12
    1d8a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1d8e:	8a 2d       	mov	r24, r10
    1d90:	60 2f       	mov	r22, r16
    1d92:	4c 2d       	mov	r20, r12
    1d94:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1d98:	8f 2d       	mov	r24, r15
    1d9a:	6b 2d       	mov	r22, r11
    1d9c:	4c 2d       	mov	r20, r12
    1d9e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1da2:	8e 2d       	mov	r24, r14
    1da4:	6b 2d       	mov	r22, r11
    1da6:	4c 2d       	mov	r20, r12
    1da8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1dac:	ee 24       	eor	r14, r14
    1dae:	23 e0       	ldi	r18, 0x03	; 3
    1db0:	82 2e       	mov	r8, r18
    1db2:	42 c0       	rjmp	.+132    	; 0x1e38 <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1db4:	97 fc       	sbrc	r9, 7
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <glcd_draw_circle+0x88>
			y--;
    1db8:	da 94       	dec	r13
			ddF_y += 2;
    1dba:	82 e0       	ldi	r24, 0x02	; 2
    1dbc:	78 0e       	add	r7, r24
			f += ddF_y;
    1dbe:	97 0c       	add	r9, r7
		}
		x++;
    1dc0:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1dc2:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1dc4:	fe 2c       	mov	r15, r14
    1dc6:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1dc8:	1d 2d       	mov	r17, r13
    1dca:	1b 0d       	add	r17, r11
    1dcc:	8f 2d       	mov	r24, r15
    1dce:	61 2f       	mov	r22, r17
    1dd0:	4c 2d       	mov	r20, r12
    1dd2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1dd6:	0a 2d       	mov	r16, r10
    1dd8:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1dda:	80 2f       	mov	r24, r16
    1ddc:	61 2f       	mov	r22, r17
    1dde:	4c 2d       	mov	r20, r12
    1de0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1de4:	1b 2d       	mov	r17, r11
    1de6:	1d 19       	sub	r17, r13
    1de8:	8f 2d       	mov	r24, r15
    1dea:	61 2f       	mov	r22, r17
    1dec:	4c 2d       	mov	r20, r12
    1dee:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1df2:	80 2f       	mov	r24, r16
    1df4:	61 2f       	mov	r22, r17
    1df6:	4c 2d       	mov	r20, r12
    1df8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1dfc:	fd 2c       	mov	r15, r13
    1dfe:	fa 0c       	add	r15, r10
    1e00:	1e 2d       	mov	r17, r14
    1e02:	1b 0d       	add	r17, r11
    1e04:	8f 2d       	mov	r24, r15
    1e06:	61 2f       	mov	r22, r17
    1e08:	4c 2d       	mov	r20, r12
    1e0a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1e0e:	0a 2d       	mov	r16, r10
    1e10:	0d 19       	sub	r16, r13
    1e12:	80 2f       	mov	r24, r16
    1e14:	61 2f       	mov	r22, r17
    1e16:	4c 2d       	mov	r20, r12
    1e18:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1e1c:	1b 2d       	mov	r17, r11
    1e1e:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1e20:	8f 2d       	mov	r24, r15
    1e22:	61 2f       	mov	r22, r17
    1e24:	4c 2d       	mov	r20, r12
    1e26:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1e2a:	80 2f       	mov	r24, r16
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	4c 2d       	mov	r20, r12
    1e30:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1e38:	ed 14       	cp	r14, r13
    1e3a:	0c f4       	brge	.+2      	; 0x1e3e <glcd_draw_circle+0x106>
    1e3c:	bb cf       	rjmp	.-138    	; 0x1db4 <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	bf 90       	pop	r11
    1e4c:	af 90       	pop	r10
    1e4e:	9f 90       	pop	r9
    1e50:	8f 90       	pop	r8
    1e52:	7f 90       	pop	r7
    1e54:	08 95       	ret

00001e56 <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1e56:	2f 92       	push	r2
    1e58:	3f 92       	push	r3
    1e5a:	4f 92       	push	r4
    1e5c:	5f 92       	push	r5
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <glcd_draw_rect_thick+0x26>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	b8 2e       	mov	r11, r24
    1e84:	a6 2e       	mov	r10, r22
    1e86:	44 2e       	mov	r4, r20
    1e88:	29 83       	std	Y+1, r18	; 0x01
    1e8a:	90 2e       	mov	r9, r16
    1e8c:	8e 2d       	mov	r24, r14
    1e8e:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    1e90:	00 23       	and	r16, r16
    1e92:	11 f4       	brne	.+4      	; 0x1e98 <glcd_draw_rect_thick+0x42>
    1e94:	99 24       	eor	r9, r9
    1e96:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <glcd_draw_rect_thick+0x48>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1e9e:	00 e0       	ldi	r16, 0x00	; 0
    1ea0:	10 e0       	ldi	r17, 0x00	; 0
    1ea2:	cb 2c       	mov	r12, r11
    1ea4:	dd 24       	eor	r13, r13
    1ea6:	16 01       	movw	r2, r12
    1ea8:	24 0c       	add	r2, r4
    1eaa:	31 1c       	adc	r3, r1
    1eac:	89 80       	ldd	r8, Y+1	; 0x01
    1eae:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1eb0:	68 2e       	mov	r6, r24
    1eb2:	77 24       	eor	r7, r7
    1eb4:	18 c0       	rjmp	.+48     	; 0x1ee6 <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    1eb6:	6a 81       	ldd	r22, Y+2	; 0x02
    1eb8:	6a 0d       	add	r22, r10
    1eba:	8e 2d       	mov	r24, r14
    1ebc:	45 2d       	mov	r20, r5
    1ebe:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1ec2:	8e 2d       	mov	r24, r14
    1ec4:	6f 2d       	mov	r22, r15
    1ec6:	45 2d       	mov	r20, r5
    1ec8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	9b 83       	std	Y+3, r25	; 0x03
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	fa 94       	dec	r15
    1ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eda:	fb 81       	ldd	r31, Y+3	; 0x03
    1edc:	e6 15       	cp	r30, r6
    1ede:	f7 05       	cpc	r31, r7
    1ee0:	54 f3       	brlt	.-44     	; 0x1eb6 <glcd_draw_rect_thick+0x60>
    1ee2:	0f 5f       	subi	r16, 0xFF	; 255
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	8c 0d       	add	r24, r12
    1eea:	9d 1d       	adc	r25, r13
    1eec:	82 15       	cp	r24, r2
    1eee:	93 05       	cpc	r25, r3
    1ef0:	34 f4       	brge	.+12     	; 0x1efe <glcd_draw_rect_thick+0xa8>
    1ef2:	f8 2c       	mov	r15, r8
    1ef4:	1b 82       	std	Y+3, r1	; 0x03
    1ef6:	1a 82       	std	Y+2, r1	; 0x02
    1ef8:	eb 2c       	mov	r14, r11
    1efa:	e0 0e       	add	r14, r16
    1efc:	ec cf       	rjmp	.-40     	; 0x1ed6 <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1efe:	00 e0       	ldi	r16, 0x00	; 0
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	ca 2c       	mov	r12, r10
    1f04:	dd 24       	eor	r13, r13
    1f06:	36 01       	movw	r6, r12
    1f08:	f9 81       	ldd	r31, Y+1	; 0x01
    1f0a:	6f 0e       	add	r6, r31
    1f0c:	71 1c       	adc	r7, r1
    1f0e:	34 2c       	mov	r3, r4
    1f10:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1f12:	89 2c       	mov	r8, r9
    1f14:	99 24       	eor	r9, r9
    1f16:	18 c0       	rjmp	.+48     	; 0x1f48 <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	8b 0d       	add	r24, r11
    1f1c:	6f 2d       	mov	r22, r15
    1f1e:	45 2d       	mov	r20, r5
    1f20:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1f24:	8e 2d       	mov	r24, r14
    1f26:	6f 2d       	mov	r22, r15
    1f28:	45 2d       	mov	r20, r5
    1f2a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	9b 83       	std	Y+3, r25	; 0x03
    1f36:	8a 83       	std	Y+2, r24	; 0x02
    1f38:	ea 94       	dec	r14
    1f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3e:	e8 15       	cp	r30, r8
    1f40:	f9 05       	cpc	r31, r9
    1f42:	54 f3       	brlt	.-44     	; 0x1f18 <glcd_draw_rect_thick+0xc2>
    1f44:	0f 5f       	subi	r16, 0xFF	; 255
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1f48:	c8 01       	movw	r24, r16
    1f4a:	8c 0d       	add	r24, r12
    1f4c:	9d 1d       	adc	r25, r13
    1f4e:	86 15       	cp	r24, r6
    1f50:	97 05       	cpc	r25, r7
    1f52:	34 f4       	brge	.+12     	; 0x1f60 <glcd_draw_rect_thick+0x10a>
    1f54:	e3 2c       	mov	r14, r3
    1f56:	1b 82       	std	Y+3, r1	; 0x03
    1f58:	1a 82       	std	Y+2, r1	; 0x02
    1f5a:	fa 2c       	mov	r15, r10
    1f5c:	f0 0e       	add	r15, r16
    1f5e:	ec cf       	rjmp	.-40     	; 0x1f38 <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1f60:	4b 2d       	mov	r20, r11
    1f62:	41 50       	subi	r20, 0x01	; 1
    1f64:	44 0d       	add	r20, r4
    1f66:	2a 2d       	mov	r18, r10
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f6c:	2f 0f       	add	r18, r31
    1f6e:	8b 2d       	mov	r24, r11
    1f70:	6a 2d       	mov	r22, r10
    1f72:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	bf 90       	pop	r11
    1f8e:	af 90       	pop	r10
    1f90:	9f 90       	pop	r9
    1f92:	8f 90       	pop	r8
    1f94:	7f 90       	pop	r7
    1f96:	6f 90       	pop	r6
    1f98:	5f 90       	pop	r5
    1f9a:	4f 90       	pop	r4
    1f9c:	3f 90       	pop	r3
    1f9e:	2f 90       	pop	r2
    1fa0:	08 95       	ret

00001fa2 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1fa2:	6f 92       	push	r6
    1fa4:	7f 92       	push	r7
    1fa6:	8f 92       	push	r8
    1fa8:	9f 92       	push	r9
    1faa:	af 92       	push	r10
    1fac:	bf 92       	push	r11
    1fae:	cf 92       	push	r12
    1fb0:	df 92       	push	r13
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	e8 2e       	mov	r14, r24
    1fc0:	f6 2e       	mov	r15, r22
    1fc2:	a4 2e       	mov	r10, r20
    1fc4:	72 2e       	mov	r7, r18
    1fc6:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1fc8:	c0 e0       	ldi	r28, 0x00	; 0
    1fca:	d0 e0       	ldi	r29, 0x00	; 0
    1fcc:	c8 2e       	mov	r12, r24
    1fce:	dd 24       	eor	r13, r13
    1fd0:	46 01       	movw	r8, r12
    1fd2:	84 0e       	add	r8, r20
    1fd4:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    1fd6:	fa 94       	dec	r15
    1fd8:	0f 2d       	mov	r16, r15
    1fda:	02 0f       	add	r16, r18
    1fdc:	f3 94       	inc	r15
    1fde:	0d c0       	rjmp	.+26     	; 0x1ffa <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1fe0:	1e 2d       	mov	r17, r14
    1fe2:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    1fe4:	81 2f       	mov	r24, r17
    1fe6:	6f 2d       	mov	r22, r15
    1fe8:	4b 2d       	mov	r20, r11
    1fea:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1fee:	81 2f       	mov	r24, r17
    1ff0:	60 2f       	mov	r22, r16
    1ff2:	4b 2d       	mov	r20, r11
    1ff4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    1ff8:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	8c 0d       	add	r24, r12
    1ffe:	9d 1d       	adc	r25, r13
    2000:	88 15       	cp	r24, r8
    2002:	99 05       	cpc	r25, r9
    2004:	6c f3       	brlt	.-38     	; 0x1fe0 <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    2006:	c0 e0       	ldi	r28, 0x00	; 0
    2008:	d0 e0       	ldi	r29, 0x00	; 0
    200a:	cf 2c       	mov	r12, r15
    200c:	dd 24       	eor	r13, r13
    200e:	46 01       	movw	r8, r12
    2010:	87 0c       	add	r8, r7
    2012:	91 1c       	adc	r9, r1
    2014:	0e 2d       	mov	r16, r14
    2016:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    2018:	60 2e       	mov	r6, r16
    201a:	6a 0c       	add	r6, r10
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    201e:	1f 2d       	mov	r17, r15
    2020:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    2022:	8e 2d       	mov	r24, r14
    2024:	61 2f       	mov	r22, r17
    2026:	4b 2d       	mov	r20, r11
    2028:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    202c:	86 2d       	mov	r24, r6
    202e:	61 2f       	mov	r22, r17
    2030:	4b 2d       	mov	r20, r11
    2032:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    2036:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    2038:	ce 01       	movw	r24, r28
    203a:	8c 0d       	add	r24, r12
    203c:	9d 1d       	adc	r25, r13
    203e:	88 15       	cp	r24, r8
    2040:	99 05       	cpc	r25, r9
    2042:	6c f3       	brlt	.-38     	; 0x201e <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    2044:	0a 0d       	add	r16, r10
    2046:	2f 2d       	mov	r18, r15
    2048:	21 50       	subi	r18, 0x01	; 1
    204a:	27 0d       	add	r18, r7
    204c:	8e 2d       	mov	r24, r14
    204e:	6f 2d       	mov	r22, r15
    2050:	40 2f       	mov	r20, r16
    2052:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	9f 90       	pop	r9
    206c:	8f 90       	pop	r8
    206e:	7f 90       	pop	r7
    2070:	6f 90       	pop	r6
    2072:	08 95       	ret

00002074 <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2074:	2f 92       	push	r2
    2076:	3f 92       	push	r3
    2078:	4f 92       	push	r4
    207a:	5f 92       	push	r5
    207c:	6f 92       	push	r6
    207e:	7f 92       	push	r7
    2080:	8f 92       	push	r8
    2082:	9f 92       	push	r9
    2084:	af 92       	push	r10
    2086:	bf 92       	push	r11
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	d8 2e       	mov	r13, r24
    209a:	c6 2e       	mov	r12, r22
    209c:	44 2e       	mov	r4, r20
    209e:	32 2e       	mov	r3, r18
    20a0:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    20a2:	00 e0       	ldi	r16, 0x00	; 0
    20a4:	10 e0       	ldi	r17, 0x00	; 0
    20a6:	a8 2e       	mov	r10, r24
    20a8:	bb 24       	eor	r11, r11
    20aa:	35 01       	movw	r6, r10
    20ac:	64 0e       	add	r6, r20
    20ae:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    20b0:	e6 2e       	mov	r14, r22
    20b2:	ff 24       	eor	r15, r15
    20b4:	47 01       	movw	r8, r14
    20b6:	82 0e       	add	r8, r18
    20b8:	91 1c       	adc	r9, r1
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <glcd_fill_rect+0x70>
    20bc:	c0 e0       	ldi	r28, 0x00	; 0
    20be:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    20c0:	5d 2c       	mov	r5, r13
    20c2:	50 0e       	add	r5, r16
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <glcd_fill_rect+0x60>
    20c6:	6c 2d       	mov	r22, r12
    20c8:	6c 0f       	add	r22, r28
    20ca:	85 2d       	mov	r24, r5
    20cc:	42 2d       	mov	r20, r2
    20ce:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
    20d2:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    20d4:	ce 01       	movw	r24, r28
    20d6:	8e 0d       	add	r24, r14
    20d8:	9f 1d       	adc	r25, r15
    20da:	88 15       	cp	r24, r8
    20dc:	99 05       	cpc	r25, r9
    20de:	9c f3       	brlt	.-26     	; 0x20c6 <glcd_fill_rect+0x52>
    20e0:	0f 5f       	subi	r16, 0xFF	; 255
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    20e4:	c8 01       	movw	r24, r16
    20e6:	8a 0d       	add	r24, r10
    20e8:	9b 1d       	adc	r25, r11
    20ea:	86 15       	cp	r24, r6
    20ec:	97 05       	cpc	r25, r7
    20ee:	34 f3       	brlt	.-52     	; 0x20bc <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    20f0:	4d 2d       	mov	r20, r13
    20f2:	41 50       	subi	r20, 0x01	; 1
    20f4:	44 0d       	add	r20, r4
    20f6:	2c 2d       	mov	r18, r12
    20f8:	21 50       	subi	r18, 0x01	; 1
    20fa:	23 0d       	add	r18, r3
    20fc:	8d 2d       	mov	r24, r13
    20fe:	6c 2d       	mov	r22, r12
    2100:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
}
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	df 90       	pop	r13
    2112:	cf 90       	pop	r12
    2114:	bf 90       	pop	r11
    2116:	af 90       	pop	r10
    2118:	9f 90       	pop	r9
    211a:	8f 90       	pop	r8
    211c:	7f 90       	pop	r7
    211e:	6f 90       	pop	r6
    2120:	5f 90       	pop	r5
    2122:	4f 90       	pop	r4
    2124:	3f 90       	pop	r3
    2126:	2f 90       	pop	r2
    2128:	08 95       	ret

0000212a <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    212a:	9f 92       	push	r9
    212c:	af 92       	push	r10
    212e:	bf 92       	push	r11
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	f8 2e       	mov	r15, r24
    213e:	e6 2e       	mov	r14, r22
    2140:	d4 2e       	mov	r13, r20
    2142:	12 2f       	mov	r17, r18
    2144:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    2146:	aa 24       	eor	r10, r10
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	26 1b       	sub	r18, r22
    214c:	31 09       	sbc	r19, r1
    214e:	37 ff       	sbrs	r19, 7
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <glcd_draw_line+0x2e>
    2152:	30 95       	com	r19
    2154:	21 95       	neg	r18
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	8d 2d       	mov	r24, r13
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	8f 19       	sub	r24, r15
    215e:	91 09       	sbc	r25, r1
    2160:	97 ff       	sbrs	r25, 7
    2162:	03 c0       	rjmp	.+6      	; 0x216a <glcd_draw_line+0x40>
    2164:	90 95       	com	r25
    2166:	81 95       	neg	r24
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	82 17       	cp	r24, r18
    216c:	93 07       	cpc	r25, r19
    216e:	44 f4       	brge	.+16     	; 0x2180 <glcd_draw_line+0x56>
    2170:	aa 24       	eor	r10, r10
    2172:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    2174:	8e 2d       	mov	r24, r14
    2176:	ef 2c       	mov	r14, r15
    2178:	f8 2e       	mov	r15, r24
    217a:	81 2f       	mov	r24, r17
    217c:	1d 2d       	mov	r17, r13
    217e:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    2180:	df 14       	cp	r13, r15
    2182:	30 f4       	brcc	.+12     	; 0x2190 <glcd_draw_line+0x66>
    2184:	8d 2d       	mov	r24, r13
    2186:	df 2c       	mov	r13, r15
    2188:	f8 2e       	mov	r15, r24
    218a:	81 2f       	mov	r24, r17
    218c:	1e 2d       	mov	r17, r14
    218e:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    2190:	8f 2d       	mov	r24, r15
    2192:	6e 2d       	mov	r22, r14
    2194:	4d 2d       	mov	r20, r13
    2196:	21 2f       	mov	r18, r17
    2198:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>

	dx = x1 - x0;
    219c:	cd 2c       	mov	r12, r13
    219e:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    21a0:	81 2f       	mov	r24, r17
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	8e 19       	sub	r24, r14
    21a6:	91 09       	sbc	r25, r1
    21a8:	97 ff       	sbrs	r25, 7
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <glcd_draw_line+0x88>
    21ac:	90 95       	com	r25
    21ae:	81 95       	neg	r24
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    21b4:	e1 16       	cp	r14, r17
    21b6:	10 f0       	brcs	.+4      	; 0x21bc <glcd_draw_line+0x92>
    21b8:	0f ef       	ldi	r16, 0xFF	; 255
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <glcd_draw_line+0x94>
    21bc:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    21be:	1c 2d       	mov	r17, r12
    21c0:	16 95       	lsr	r17
    21c2:	10 c0       	rjmp	.+32     	; 0x21e4 <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    21c4:	aa 20       	and	r10, r10
    21c6:	19 f0       	breq	.+6      	; 0x21ce <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    21c8:	8e 2d       	mov	r24, r14
    21ca:	6f 2d       	mov	r22, r15
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    21ce:	8f 2d       	mov	r24, r15
    21d0:	6e 2d       	mov	r22, r14
    21d2:	49 2d       	mov	r20, r9
    21d4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
		}
		err -= dy;
    21d8:	1b 19       	sub	r17, r11
		if (err < 0) {
    21da:	17 ff       	sbrs	r17, 7
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <glcd_draw_line+0xb8>
			y0 += ystep;
    21de:	e0 0e       	add	r14, r16
			err += dx;
    21e0:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    21e2:	f3 94       	inc	r15
    21e4:	df 14       	cp	r13, r15
    21e6:	70 f7       	brcc	.-36     	; 0x21c4 <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	bf 90       	pop	r11
    21f6:	af 90       	pop	r10
    21f8:	9f 90       	pop	r9
    21fa:	08 95       	ret

000021fc <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	e8 2e       	mov	r14, r24
    220a:	d6 2e       	mov	r13, r22
    220c:	14 2f       	mov	r17, r20
    220e:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    2210:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    2214:	1e 0d       	add	r17, r14
    2216:	fd 0c       	add	r15, r13
    2218:	8e 2d       	mov	r24, r14
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	6f 2d       	mov	r22, r15
    221e:	41 2f       	mov	r20, r17
    2220:	2f 2d       	mov	r18, r15
    2222:	0e 94 95 10 	call	0x212a	; 0x212a <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    2226:	d3 94       	inc	r13
    2228:	81 2f       	mov	r24, r17
    222a:	6d 2d       	mov	r22, r13
    222c:	41 2f       	mov	r20, r17
    222e:	2f 2d       	mov	r18, r15
    2230:	0e 94 95 10 	call	0x212a	; 0x212a <glcd_draw_line>
}
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	08 95       	ret

00002242 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    2242:	80 e4       	ldi	r24, 0x40	; 64
    2244:	94 e0       	ldi	r25, 0x04	; 4
    2246:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <glcd_draw_bitmap>
	glcd_write();	
    224a:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
	while (1) {
		DEMO_RETURN();
    224e:	80 91 68 01 	lds	r24, 0x0168
    2252:	88 23       	and	r24, r24
    2254:	e1 f3       	breq	.-8      	; 0x224e <glcd_test_bitmap_128x64+0xc>
    2256:	10 92 68 01 	sts	0x0168, r1
	}
}
    225a:	08 95       	ret

0000225c <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
	glcd_clear();
    2264:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
	glcd_write();
    2268:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    226c:	40 c0       	rjmp	.+128    	; 0x22ee <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	42 e3       	ldi	r20, 0x32	; 50
    2274:	22 e3       	ldi	r18, 0x32	; 50
    2276:	0c 2f       	mov	r16, r28
    2278:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    227c:	8c e3       	ldi	r24, 0x3C	; 60
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	42 e3       	ldi	r20, 0x32	; 50
    2282:	2e e1       	ldi	r18, 0x1E	; 30
    2284:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    2288:	8c e3       	ldi	r24, 0x3C	; 60
    228a:	63 e2       	ldi	r22, 0x23	; 35
    228c:	4c e3       	ldi	r20, 0x3C	; 60
    228e:	24 e1       	ldi	r18, 0x14	; 20
    2290:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2294:	80 91 68 01 	lds	r24, 0x0168
    2298:	88 23       	and	r24, r24
    229a:	f9 f4       	brne	.+62     	; 0x22da <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    229c:	64 96       	adiw	r28, 0x14	; 20
    229e:	cf 3f       	cpi	r28, 0xFF	; 255
    22a0:	d1 05       	cpc	r29, r1
    22a2:	29 f3       	breq	.-54     	; 0x226e <glcd_test_scrolling_graph+0x12>
    22a4:	20 f3       	brcs	.-56     	; 0x226e <glcd_test_scrolling_graph+0x12>
    22a6:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    22a8:	01 2f       	mov	r16, r17
    22aa:	00 95       	com	r16
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	42 e3       	ldi	r20, 0x32	; 50
    22b2:	22 e3       	ldi	r18, 0x32	; 50
    22b4:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    22b8:	8c e3       	ldi	r24, 0x3C	; 60
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	42 e3       	ldi	r20, 0x32	; 50
    22be:	2e e1       	ldi	r18, 0x1E	; 30
    22c0:	01 2f       	mov	r16, r17
    22c2:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    22c6:	8c e3       	ldi	r24, 0x3C	; 60
    22c8:	63 e2       	ldi	r22, 0x23	; 35
    22ca:	4c e3       	ldi	r20, 0x3C	; 60
    22cc:	24 e1       	ldi	r18, 0x14	; 20
    22ce:	0e 94 3f 09 	call	0x127e	; 0x127e <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    22d2:	80 91 68 01 	lds	r24, 0x0168
    22d6:	88 23       	and	r24, r24
    22d8:	39 f0       	breq	.+14     	; 0x22e8 <glcd_test_scrolling_graph+0x8c>
    22da:	10 92 68 01 	sts	0x0168, r1
		}
	}	
}
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    22e8:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    22ea:	14 30       	cpi	r17, 0x04	; 4
    22ec:	e9 f6       	brne	.-70     	; 0x22a8 <glcd_test_scrolling_graph+0x4c>
    22ee:	c0 e0       	ldi	r28, 0x00	; 0
    22f0:	d0 e0       	ldi	r29, 0x00	; 0
    22f2:	d5 cf       	rjmp	.-86     	; 0x229e <glcd_test_scrolling_graph+0x42>

000022f4 <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    22f4:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    22f6:	88 ea       	ldi	r24, 0xA8	; 168
    22f8:	99 e0       	ldi	r25, 0x09	; 9
    22fa:	65 e0       	ldi	r22, 0x05	; 5
    22fc:	47 e0       	ldi	r20, 0x07	; 7
    22fe:	20 e2       	ldi	r18, 0x20	; 32
    2300:	0f e7       	ldi	r16, 0x7F	; 127
    2302:	0e 94 3d 14 	call	0x287a	; 0x287a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2306:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	43 e0       	ldi	r20, 0x03	; 3
    2310:	51 e0       	ldi	r21, 0x01	; 1
    2312:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
	glcd_write();
    2316:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
	while(1) {
		DEMO_RETURN();
    231a:	80 91 68 01 	lds	r24, 0x0168
    231e:	88 23       	and	r24, r24
    2320:	e1 f3       	breq	.-8      	; 0x231a <glcd_test_hello_world+0x26>
    2322:	10 92 68 01 	sts	0x0168, r1
	}
}
    2326:	0f 91       	pop	r16
    2328:	08 95       	ret

0000232a <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    232a:	cf 92       	push	r12
    232c:	ef 92       	push	r14
    232e:	0f 93       	push	r16
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2334:	88 ea       	ldi	r24, 0xA8	; 168
    2336:	99 e0       	ldi	r25, 0x09	; 9
    2338:	65 e0       	ldi	r22, 0x05	; 5
    233a:	47 e0       	ldi	r20, 0x07	; 7
    233c:	20 e2       	ldi	r18, 0x20	; 32
    233e:	0f e7       	ldi	r16, 0x7F	; 127
    2340:	0e 94 3d 14 	call	0x287a	; 0x287a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2344:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	40 e1       	ldi	r20, 0x10	; 16
    234e:	51 e0       	ldi	r21, 0x01	; 1
    2350:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
	glcd_write();
    2354:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2358:	80 ed       	ldi	r24, 0xD0	; 208
    235a:	97 e0       	ldi	r25, 0x07	; 7
    235c:	20 e9       	ldi	r18, 0x90	; 144
    235e:	31 e0       	ldi	r19, 0x01	; 1
    2360:	f9 01       	movw	r30, r18
    2362:	31 97       	sbiw	r30, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	d9 f7       	brne	.-10     	; 0x2360 <glcd_test_rectangles+0x36>
    236a:	c0 e9       	ldi	r28, 0x90	; 144
    236c:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    236e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	44 e6       	ldi	r20, 0x64	; 100
    2378:	22 e3       	ldi	r18, 0x32	; 50
    237a:	01 e0       	ldi	r16, 0x01	; 1
    237c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	69 e0       	ldi	r22, 0x09	; 9
    2384:	4f e1       	ldi	r20, 0x1F	; 31
    2386:	51 e0       	ldi	r21, 0x01	; 1
    2388:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
		glcd_write();
    238c:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2390:	88 e8       	ldi	r24, 0x88	; 136
    2392:	93 e1       	ldi	r25, 0x13	; 19
    2394:	fe 01       	movw	r30, r28
    2396:	31 97       	sbiw	r30, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	d9 f7       	brne	.-10     	; 0x2394 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    239e:	80 91 68 01 	lds	r24, 0x0168
    23a2:	88 23       	and	r24, r24
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <glcd_test_rectangles+0x7e>
    23a6:	85 c0       	rjmp	.+266    	; 0x24b2 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    23a8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	69 e0       	ldi	r22, 0x09	; 9
    23b0:	4e e2       	ldi	r20, 0x2E	; 46
    23b2:	51 e0       	ldi	r21, 0x01	; 1
    23b4:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
		glcd_write();
    23b8:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    23bc:	85 e0       	ldi	r24, 0x05	; 5
    23be:	65 e0       	ldi	r22, 0x05	; 5
    23c0:	40 e5       	ldi	r20, 0x50	; 80
    23c2:	2e e1       	ldi	r18, 0x1E	; 30
    23c4:	03 e0       	ldi	r16, 0x03	; 3
    23c6:	56 e0       	ldi	r21, 0x06	; 6
    23c8:	e5 2e       	mov	r14, r21
    23ca:	cc 24       	eor	r12, r12
    23cc:	c3 94       	inc	r12
    23ce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <glcd_draw_rect_thick>
		glcd_write();
    23d2:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    23d6:	88 e8       	ldi	r24, 0x88	; 136
    23d8:	93 e1       	ldi	r25, 0x13	; 19
    23da:	fe 01       	movw	r30, r28
    23dc:	31 97       	sbiw	r30, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	d9 f7       	brne	.-10     	; 0x23da <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    23e4:	80 91 68 01 	lds	r24, 0x0168
    23e8:	88 23       	and	r24, r24
    23ea:	09 f0       	breq	.+2      	; 0x23ee <glcd_test_rectangles+0xc4>
    23ec:	62 c0       	rjmp	.+196    	; 0x24b2 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	44 e1       	ldi	r20, 0x14	; 20
    23f4:	24 e1       	ldi	r18, 0x14	; 20
    23f6:	02 e0       	ldi	r16, 0x02	; 2
    23f8:	32 e0       	ldi	r19, 0x02	; 2
    23fa:	e3 2e       	mov	r14, r19
    23fc:	cc 24       	eor	r12, r12
    23fe:	c3 94       	inc	r12
    2400:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <glcd_draw_rect_thick>
		glcd_write();
    2404:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2408:	88 e8       	ldi	r24, 0x88	; 136
    240a:	93 e1       	ldi	r25, 0x13	; 19
    240c:	fe 01       	movw	r30, r28
    240e:	31 97       	sbiw	r30, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	d9 f7       	brne	.-10     	; 0x240c <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    2416:	80 91 68 01 	lds	r24, 0x0168
    241a:	88 23       	and	r24, r24
    241c:	09 f0       	breq	.+2      	; 0x2420 <glcd_test_rectangles+0xf6>
    241e:	49 c0       	rjmp	.+146    	; 0x24b2 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2420:	84 e6       	ldi	r24, 0x64	; 100
    2422:	6a e0       	ldi	r22, 0x0A	; 10
    2424:	44 e1       	ldi	r20, 0x14	; 20
    2426:	24 e1       	ldi	r18, 0x14	; 20
    2428:	05 e0       	ldi	r16, 0x05	; 5
    242a:	95 e0       	ldi	r25, 0x05	; 5
    242c:	e9 2e       	mov	r14, r25
    242e:	cc 24       	eor	r12, r12
    2430:	c3 94       	inc	r12
    2432:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <glcd_draw_rect_thick>
		glcd_write();
    2436:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    243a:	88 e8       	ldi	r24, 0x88	; 136
    243c:	93 e1       	ldi	r25, 0x13	; 19
    243e:	fe 01       	movw	r30, r28
    2440:	31 97       	sbiw	r30, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	d9 f7       	brne	.-10     	; 0x243e <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    2448:	80 91 68 01 	lds	r24, 0x0168
    244c:	88 23       	and	r24, r24
    244e:	89 f5       	brne	.+98     	; 0x24b2 <glcd_test_rectangles+0x188>

		glcd_clear();
    2450:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	69 e0       	ldi	r22, 0x09	; 9
    2458:	43 e4       	ldi	r20, 0x43	; 67
    245a:	51 e0       	ldi	r21, 0x01	; 1
    245c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	4d e2       	ldi	r20, 0x2D	; 45
    2466:	2e e1       	ldi	r18, 0x1E	; 30
    2468:	01 e0       	ldi	r16, 0x01	; 1
    246a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <glcd_draw_rect_shadow>
		glcd_write();
    246e:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2472:	88 e8       	ldi	r24, 0x88	; 136
    2474:	93 e1       	ldi	r25, 0x13	; 19
    2476:	fe 01       	movw	r30, r28
    2478:	31 97       	sbiw	r30, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	d9 f7       	brne	.-10     	; 0x2476 <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    2480:	80 91 68 01 	lds	r24, 0x0168
    2484:	88 23       	and	r24, r24
    2486:	a9 f4       	brne	.+42     	; 0x24b2 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2488:	8f e5       	ldi	r24, 0x5F	; 95
    248a:	65 e0       	ldi	r22, 0x05	; 5
    248c:	4e e1       	ldi	r20, 0x1E	; 30
    248e:	2e e1       	ldi	r18, 0x1E	; 30
    2490:	01 e0       	ldi	r16, 0x01	; 1
    2492:	0e 94 fe 10 	call	0x21fc	; 0x21fc <glcd_draw_rect_shadow>
		glcd_write();
    2496:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    249a:	88 e8       	ldi	r24, 0x88	; 136
    249c:	93 e1       	ldi	r25, 0x13	; 19
    249e:	fe 01       	movw	r30, r28
    24a0:	31 97       	sbiw	r30, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	d9 f7       	brne	.-10     	; 0x249e <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    24a8:	80 91 68 01 	lds	r24, 0x0168
    24ac:	88 23       	and	r24, r24
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <glcd_test_rectangles+0x188>
    24b0:	5e cf       	rjmp	.-324    	; 0x236e <glcd_test_rectangles+0x44>
    24b2:	10 92 68 01 	sts	0x0168, r1
		
	}
	
}
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	0f 91       	pop	r16
    24bc:	ef 90       	pop	r14
    24be:	cf 90       	pop	r12
    24c0:	08 95       	ret

000024c2 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    24c2:	af 92       	push	r10
    24c4:	bf 92       	push	r11
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	2f 97       	sbiw	r28, 0x0f	; 15
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    24e4:	88 ea       	ldi	r24, 0xA8	; 168
    24e6:	99 e0       	ldi	r25, 0x09	; 9
    24e8:	65 e0       	ldi	r22, 0x05	; 5
    24ea:	47 e0       	ldi	r20, 0x07	; 7
    24ec:	20 e2       	ldi	r18, 0x20	; 32
    24ee:	0f e7       	ldi	r16, 0x7F	; 127
    24f0:	0e 94 3d 14 	call	0x287a	; 0x287a <glcd_tiny_set_font>
    24f4:	00 e2       	ldi	r16, 0x20	; 32
    24f6:	7e 01       	movw	r14, r28
    24f8:	08 94       	sec
    24fa:	e1 1c       	adc	r14, r1
    24fc:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    24fe:	7f e0       	ldi	r23, 0x0F	; 15
    2500:	a7 2e       	mov	r10, r23
    2502:	b1 2c       	mov	r11, r1
    2504:	ac 0e       	add	r10, r28
    2506:	bd 1e       	adc	r11, r29
    2508:	60 e9       	ldi	r22, 0x90	; 144
    250a:	c6 2e       	mov	r12, r22
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2510:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2512:	00 83       	st	Z, r16
			c++;
    2514:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    2516:	07 fd       	sbrc	r16, 7
    2518:	00 e2       	ldi	r16, 0x20	; 32
    251a:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    251c:	ea 15       	cp	r30, r10
    251e:	fb 05       	cpc	r31, r11
    2520:	c1 f7       	brne	.-16     	; 0x2512 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2522:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2524:	c7 01       	movw	r24, r14
    2526:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    252a:	80 91 68 01 	lds	r24, 0x0168
    252e:	88 23       	and	r24, r24
    2530:	91 f0       	breq	.+36     	; 0x2556 <glcd_test_tiny_text+0x94>
    2532:	10 92 68 01 	sts	0x0168, r1
		
		delay_ms(1000);
	}

}
    2536:	2f 96       	adiw	r28, 0x0f	; 15
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	0f 91       	pop	r16
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	df 90       	pop	r13
    254e:	cf 90       	pop	r12
    2550:	bf 90       	pop	r11
    2552:	af 90       	pop	r10
    2554:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    2556:	80 e1       	ldi	r24, 0x10	; 16
    2558:	97 e2       	ldi	r25, 0x27	; 39
    255a:	f6 01       	movw	r30, r12
    255c:	31 97       	sbiw	r30, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	d9 f7       	brne	.-10     	; 0x255a <glcd_test_tiny_text+0x98>
    2564:	d5 cf       	rjmp	.-86     	; 0x2510 <glcd_test_tiny_text+0x4e>

00002566 <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    256e:	88 e8       	ldi	r24, 0x88	; 136
    2570:	9b e0       	ldi	r25, 0x0B	; 11
    2572:	6f e0       	ldi	r22, 0x0F	; 15
    2574:	45 e1       	ldi	r20, 0x15	; 21
    2576:	2e e2       	ldi	r18, 0x2E	; 46
    2578:	09 e3       	ldi	r16, 0x39	; 57
    257a:	0e 94 cd 0a 	call	0x159a	; 0x159a <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    257e:	1e e2       	ldi	r17, 0x2E	; 46
    2580:	80 91 73 03 	lds	r24, 0x0373
    2584:	18 1b       	sub	r17, r24
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	c0 e9       	ldi	r28, 0x90	; 144
    258a:	d1 e0       	ldi	r29, 0x01	; 1
    258c:	16 c0       	rjmp	.+44     	; 0x25ba <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    258e:	80 91 68 01 	lds	r24, 0x0168
    2592:	88 23       	and	r24, r24
    2594:	d1 f4       	brne	.+52     	; 0x25ca <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    2596:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	60 2f       	mov	r22, r16
    259e:	49 e5       	ldi	r20, 0x59	; 89
    25a0:	51 e0       	ldi	r21, 0x01	; 1
    25a2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <glcd_draw_string_xy>
			glcd_write();
    25a6:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    25aa:	80 e2       	ldi	r24, 0x20	; 32
    25ac:	93 e0       	ldi	r25, 0x03	; 3
    25ae:	fe 01       	movw	r30, r28
    25b0:	31 97       	sbiw	r30, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	d9 f7       	brne	.-10     	; 0x25ae <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    25b8:	0f 5f       	subi	r16, 0xFF	; 255
    25ba:	01 17       	cp	r16, r17
    25bc:	40 f3       	brcs	.-48     	; 0x258e <glcd_test_text_up_down+0x28>
    25be:	01 2f       	mov	r16, r17
    25c0:	1d c0       	rjmp	.+58     	; 0x25fc <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    25c2:	80 91 68 01 	lds	r24, 0x0168
    25c6:	88 23       	and	r24, r24
    25c8:	39 f0       	breq	.+14     	; 0x25d8 <glcd_test_text_up_down+0x72>
    25ca:	10 92 68 01 	sts	0x0168, r1
			delay_ms(80);
		}
		
	}

}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    25d8:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	60 2f       	mov	r22, r16
    25e0:	4d e5       	ldi	r20, 0x5D	; 93
    25e2:	51 e0       	ldi	r21, 0x01	; 1
    25e4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <glcd_draw_string_xy>
			glcd_write();
    25e8:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    25ec:	80 e2       	ldi	r24, 0x20	; 32
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	fe 01       	movw	r30, r28
    25f2:	31 97       	sbiw	r30, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	d9 f7       	brne	.-10     	; 0x25f0 <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    25fa:	01 50       	subi	r16, 0x01	; 1
    25fc:	00 23       	and	r16, r16
    25fe:	09 f7       	brne	.-62     	; 0x25c2 <glcd_test_text_up_down+0x5c>
    2600:	dc cf       	rjmp	.-72     	; 0x25ba <glcd_test_text_up_down+0x54>

00002602 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2602:	8f 92       	push	r8
    2604:	9f 92       	push	r9
    2606:	af 92       	push	r10
    2608:	bf 92       	push	r11
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ef 92       	push	r14
    2610:	0f 93       	push	r16
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	28 97       	sbiw	r28, 0x08	; 8
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    2626:	19 82       	std	Y+1, r1	; 0x01
    2628:	1a 82       	std	Y+2, r1	; 0x02
    262a:	1b 82       	std	Y+3, r1	; 0x03
    262c:	1c 82       	std	Y+4, r1	; 0x04
    262e:	1d 82       	std	Y+5, r1	; 0x05
    2630:	1e 82       	std	Y+6, r1	; 0x06
    2632:	1f 82       	std	Y+7, r1	; 0x07
    2634:	18 86       	std	Y+8, r1	; 0x08
    2636:	cc 24       	eor	r12, r12
    2638:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    263a:	5e 01       	movw	r10, r28
    263c:	08 94       	sec
    263e:	a1 1c       	adc	r10, r1
    2640:	b1 1c       	adc	r11, r1
    2642:	f1 e6       	ldi	r31, 0x61	; 97
    2644:	8f 2e       	mov	r8, r31
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    264a:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    264e:	80 e4       	ldi	r24, 0x40	; 64
    2650:	98 e0       	ldi	r25, 0x08	; 8
    2652:	6c e0       	ldi	r22, 0x0C	; 12
    2654:	43 e1       	ldi	r20, 0x13	; 19
    2656:	20 e3       	ldi	r18, 0x30	; 48
    2658:	09 e3       	ldi	r16, 0x39	; 57
    265a:	e2 e0       	ldi	r30, 0x02	; 2
    265c:	ee 2e       	mov	r14, r30
    265e:	0e 94 df 0a 	call	0x15be	; 0x15be <glcd_font>

		sprintf(string,"%d",count);
    2662:	00 d0       	rcall	.+0      	; 0x2664 <glcd_test_glcdutils+0x62>
    2664:	00 d0       	rcall	.+0      	; 0x2666 <glcd_test_glcdutils+0x64>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <glcd_test_glcdutils+0x66>
    2668:	ed b7       	in	r30, 0x3d	; 61
    266a:	fe b7       	in	r31, 0x3e	; 62
    266c:	31 96       	adiw	r30, 0x01	; 1
    266e:	ad b7       	in	r26, 0x3d	; 61
    2670:	be b7       	in	r27, 0x3e	; 62
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	bc 92       	st	X, r11
    2676:	ae 92       	st	-X, r10
    2678:	11 97       	sbiw	r26, 0x01	; 1
    267a:	93 82       	std	Z+3, r9	; 0x03
    267c:	82 82       	std	Z+2, r8	; 0x02
    267e:	d5 82       	std	Z+5, r13	; 0x05
    2680:	c4 82       	std	Z+4, r12	; 0x04
    2682:	0e 94 4c 18 	call	0x3098	; 0x3098 <sprintf>
		glcd_draw_string_xy(0,0,string);
    2686:	8d b7       	in	r24, 0x3d	; 61
    2688:	9e b7       	in	r25, 0x3e	; 62
    268a:	06 96       	adiw	r24, 0x06	; 6
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	9e bf       	out	0x3e, r25	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	8d bf       	out	0x3d, r24	; 61
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	a5 01       	movw	r20, r10
    269c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <glcd_draw_string_xy>
		glcd_write();
    26a0:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
		
		count += 1;
    26a4:	08 94       	sec
    26a6:	c1 1c       	adc	r12, r1
    26a8:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    26aa:	80 91 68 01 	lds	r24, 0x0168
    26ae:	88 23       	and	r24, r24
    26b0:	61 f2       	breq	.-104    	; 0x264a <glcd_test_glcdutils+0x48>
    26b2:	10 92 68 01 	sts	0x0168, r1
	}
}
    26b6:	28 96       	adiw	r28, 0x08	; 8
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	0f 91       	pop	r16
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
    26ce:	bf 90       	pop	r11
    26d0:	af 90       	pop	r10
    26d2:	9f 90       	pop	r9
    26d4:	8f 90       	pop	r8
    26d6:	08 95       	ret

000026d8 <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    26d8:	8f 92       	push	r8
    26da:	9f 92       	push	r9
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	28 97       	sbiw	r28, 0x08	; 8
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    26fe:	19 82       	std	Y+1, r1	; 0x01
    2700:	1a 82       	std	Y+2, r1	; 0x02
    2702:	1b 82       	std	Y+3, r1	; 0x03
    2704:	1c 82       	std	Y+4, r1	; 0x04
    2706:	1d 82       	std	Y+5, r1	; 0x05
    2708:	1e 82       	std	Y+6, r1	; 0x06
    270a:	1f 82       	std	Y+7, r1	; 0x07
    270c:	18 86       	std	Y+8, r1	; 0x08
    270e:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2710:	5e 01       	movw	r10, r28
    2712:	08 94       	sec
    2714:	a1 1c       	adc	r10, r1
    2716:	b1 1c       	adc	r11, r1
    2718:	11 e6       	ldi	r17, 0x61	; 97
    271a:	81 2e       	mov	r8, r17
    271c:	11 e0       	ldi	r17, 0x01	; 1
    271e:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2720:	0e 94 4a 08 	call	0x1094	; 0x1094 <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2724:	88 e8       	ldi	r24, 0x88	; 136
    2726:	9b e0       	ldi	r25, 0x0B	; 11
    2728:	6f e0       	ldi	r22, 0x0F	; 15
    272a:	45 e1       	ldi	r20, 0x15	; 21
    272c:	2e e2       	ldi	r18, 0x2E	; 46
    272e:	09 e3       	ldi	r16, 0x39	; 57
    2730:	0e 94 cd 0a 	call	0x159a	; 0x159a <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2734:	ed 2c       	mov	r14, r13
    2736:	ff 24       	eor	r15, r15
    2738:	00 d0       	rcall	.+0      	; 0x273a <glcd_test_counter_and_graph+0x62>
    273a:	00 d0       	rcall	.+0      	; 0x273c <glcd_test_counter_and_graph+0x64>
    273c:	00 d0       	rcall	.+0      	; 0x273e <glcd_test_counter_and_graph+0x66>
    273e:	ed b7       	in	r30, 0x3d	; 61
    2740:	fe b7       	in	r31, 0x3e	; 62
    2742:	31 96       	adiw	r30, 0x01	; 1
    2744:	ad b7       	in	r26, 0x3d	; 61
    2746:	be b7       	in	r27, 0x3e	; 62
    2748:	12 96       	adiw	r26, 0x02	; 2
    274a:	bc 92       	st	X, r11
    274c:	ae 92       	st	-X, r10
    274e:	11 97       	sbiw	r26, 0x01	; 1
    2750:	93 82       	std	Z+3, r9	; 0x03
    2752:	82 82       	std	Z+2, r8	; 0x02
    2754:	f5 82       	std	Z+5, r15	; 0x05
    2756:	e4 82       	std	Z+4, r14	; 0x04
    2758:	0e 94 4c 18 	call	0x3098	; 0x3098 <sprintf>
		glcd_draw_string_xy(0,0,string);
    275c:	8d b7       	in	r24, 0x3d	; 61
    275e:	9e b7       	in	r25, 0x3e	; 62
    2760:	06 96       	adiw	r24, 0x06	; 6
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	9e bf       	out	0x3e, r25	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	8d bf       	out	0x3d, r24	; 61
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	a5 01       	movw	r20, r10
    2772:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    2776:	87 01       	movw	r16, r14
    2778:	00 0f       	add	r16, r16
    277a:	11 1f       	adc	r17, r17
    277c:	00 0f       	add	r16, r16
    277e:	11 1f       	adc	r17, r17
    2780:	8a e0       	ldi	r24, 0x0A	; 10
    2782:	66 e2       	ldi	r22, 0x26	; 38
    2784:	4e e1       	ldi	r20, 0x1E	; 30
    2786:	26 e0       	ldi	r18, 0x06	; 6
    2788:	0e 94 a4 0a 	call	0x1548	; 0x1548 <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    278c:	ee 0c       	add	r14, r14
    278e:	ff 1c       	adc	r15, r15
    2790:	86 e4       	ldi	r24, 0x46	; 70
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	48 e0       	ldi	r20, 0x08	; 8
    2796:	2e e1       	ldi	r18, 0x1E	; 30
    2798:	0e 2d       	mov	r16, r14
    279a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <glcd_bar_graph_vertical>

		glcd_write();
    279e:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
		count += 1;
    27a2:	d3 94       	inc	r13

		DEMO_RETURN();
    27a4:	80 91 68 01 	lds	r24, 0x0168
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <glcd_test_counter_and_graph+0xd6>
    27ac:	b9 cf       	rjmp	.-142    	; 0x2720 <glcd_test_counter_and_graph+0x48>
    27ae:	10 92 68 01 	sts	0x0168, r1
	}

}
    27b2:	28 96       	adiw	r28, 0x08	; 8
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	bf 90       	pop	r11
    27ce:	af 90       	pop	r10
    27d0:	9f 90       	pop	r9
    27d2:	8f 90       	pop	r8
    27d4:	08 95       	ret

000027d6 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	00 e4       	ldi	r16, 0x40	; 64
    27e8:	c0 2e       	mov	r12, r16
    27ea:	0f e1       	ldi	r16, 0x1F	; 31
    27ec:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    27ee:	c0 ea       	ldi	r28, 0xA0	; 160
    27f0:	df e0       	ldi	r29, 0x0F	; 15
    27f2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    27f6:	0e 94 33 18 	call	0x3066	; 0x3066 <rand>
    27fa:	64 e5       	ldi	r22, 0x54	; 84
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    2802:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    2804:	0e 94 33 18 	call	0x3066	; 0x3066 <rand>
    2808:	60 e3       	ldi	r22, 0x30	; 48
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    2810:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    2812:	0e 94 33 18 	call	0x3066	; 0x3066 <rand>
    2816:	62 e3       	ldi	r22, 0x32	; 50
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    281e:	08 2f       	mov	r16, r24
    2820:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2822:	8e 2d       	mov	r24, r14
    2824:	6f 2d       	mov	r22, r15
    2826:	41 2f       	mov	r20, r17
    2828:	21 e0       	ldi	r18, 0x01	; 1
    282a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <glcd_fill_circle>
			glcd_write();
    282e:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2832:	c6 01       	movw	r24, r12
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    2838:	1f 5f       	subi	r17, 0xFF	; 255
    283a:	01 17       	cp	r16, r17
    283c:	90 f7       	brcc	.-28     	; 0x2822 <glcd_test_circles+0x4c>
    283e:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    2840:	8e 2d       	mov	r24, r14
    2842:	6f 2d       	mov	r22, r15
    2844:	41 2f       	mov	r20, r17
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <glcd_fill_circle>
			glcd_write();
    284c:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
    2850:	ce 01       	movw	r24, r28
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    2856:	1f 5f       	subi	r17, 0xFF	; 255
    2858:	01 17       	cp	r16, r17
    285a:	90 f7       	brcc	.-28     	; 0x2840 <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    285c:	80 91 68 01 	lds	r24, 0x0168
    2860:	88 23       	and	r24, r24
    2862:	39 f2       	breq	.-114    	; 0x27f2 <glcd_test_circles+0x1c>
    2864:	10 92 68 01 	sts	0x0168, r1
	}
}
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	08 95       	ret

0000287a <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    287a:	0f 93       	push	r16
	font_current.font_table = font_table;
    287c:	90 93 71 03 	sts	0x0371, r25
    2880:	80 93 70 03 	sts	0x0370, r24
	font_current.width = width;
    2884:	60 93 72 03 	sts	0x0372, r22
	font_current.height = height;
    2888:	40 93 73 03 	sts	0x0373, r20
	font_current.start_char = start_char;
    288c:	20 93 74 03 	sts	0x0374, r18
	font_current.end_char = end_char;
    2890:	00 93 75 03 	sts	0x0375, r16
	font_current.table_type = STANG;
    2894:	10 92 76 03 	sts	0x0376, r1
}
    2898:	0f 91       	pop	r16
    289a:	08 95       	ret

0000289c <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	f8 2e       	mov	r15, r24
    28b0:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    28b2:	5f e2       	ldi	r21, 0x2F	; 47
    28b4:	56 17       	cp	r21, r22
    28b6:	08 f4       	brcc	.+2      	; 0x28ba <glcd_tiny_draw_char_xy+0x1e>
    28b8:	5d c0       	rjmp	.+186    	; 0x2974 <glcd_tiny_draw_char_xy+0xd8>
    28ba:	80 91 72 03 	lds	r24, 0x0372
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	8f 0d       	add	r24, r15
    28c2:	91 1d       	adc	r25, r1
    28c4:	84 35       	cpi	r24, 0x54	; 84
    28c6:	91 05       	cpc	r25, r1
    28c8:	0c f0       	brlt	.+2      	; 0x28cc <glcd_tiny_draw_char_xy+0x30>
    28ca:	54 c0       	rjmp	.+168    	; 0x2974 <glcd_tiny_draw_char_xy+0xd8>
    28cc:	80 91 73 03 	lds	r24, 0x0373
    28d0:	88 30       	cpi	r24, 0x08	; 8
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <glcd_tiny_draw_char_xy+0x3a>
    28d4:	4f c0       	rjmp	.+158    	; 0x2974 <glcd_tiny_draw_char_xy+0xd8>
    28d6:	80 91 76 03 	lds	r24, 0x0376
    28da:	88 23       	and	r24, r24
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <glcd_tiny_draw_char_xy+0x44>
    28de:	4a c0       	rjmp	.+148    	; 0x2974 <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    28e0:	80 91 74 03 	lds	r24, 0x0374
    28e4:	48 17       	cp	r20, r24
    28e6:	20 f0       	brcs	.+8      	; 0x28f0 <glcd_tiny_draw_char_xy+0x54>
    28e8:	80 91 75 03 	lds	r24, 0x0375
    28ec:	84 17       	cp	r24, r20
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <glcd_tiny_draw_char_xy+0x56>
    28f0:	4e e2       	ldi	r20, 0x2E	; 46
    28f2:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    28f4:	c4 2e       	mov	r12, r20
    28f6:	dd 24       	eor	r13, r13
    28f8:	2f c0       	rjmp	.+94     	; 0x2958 <glcd_tiny_draw_char_xy+0xbc>
    28fa:	80 91 74 03 	lds	r24, 0x0374
    28fe:	96 01       	movw	r18, r12
    2900:	28 1b       	sub	r18, r24
    2902:	31 09       	sbc	r19, r1
    2904:	84 2f       	mov	r24, r20
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	ac 01       	movw	r20, r24
    290a:	24 9f       	mul	r18, r20
    290c:	c0 01       	movw	r24, r0
    290e:	25 9f       	mul	r18, r21
    2910:	90 0d       	add	r25, r0
    2912:	34 9f       	mul	r19, r20
    2914:	90 0d       	add	r25, r0
    2916:	11 24       	eor	r1, r1
    2918:	80 0f       	add	r24, r16
    291a:	91 1d       	adc	r25, r1
    291c:	e0 91 70 03 	lds	r30, 0x0370
    2920:	f0 91 71 03 	lds	r31, 0x0371
    2924:	e8 0f       	add	r30, r24
    2926:	f9 1f       	adc	r31, r25
    2928:	e4 91       	lpm	r30, Z+
    292a:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    292c:	ce 2f       	mov	r28, r30
    292e:	d0 e0       	ldi	r29, 0x00	; 0
    2930:	0e c0       	rjmp	.+28     	; 0x294e <glcd_tiny_draw_char_xy+0xb2>
    2932:	61 2f       	mov	r22, r17
    2934:	6e 0d       	add	r22, r14
    2936:	ae 01       	movw	r20, r28
    2938:	01 2e       	mov	r0, r17
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <glcd_tiny_draw_char_xy+0xa4>
    293c:	55 95       	asr	r21
    293e:	47 95       	ror	r20
    2940:	0a 94       	dec	r0
    2942:	e2 f7       	brpl	.-8      	; 0x293c <glcd_tiny_draw_char_xy+0xa0>
    2944:	41 70       	andi	r20, 0x01	; 1
    2946:	8b 2d       	mov	r24, r11
    2948:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    294c:	1f 5f       	subi	r17, 0xFF	; 255
    294e:	80 91 73 03 	lds	r24, 0x0373
    2952:	18 17       	cp	r17, r24
    2954:	70 f3       	brcs	.-36     	; 0x2932 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    2956:	0f 5f       	subi	r16, 0xFF	; 255
    2958:	b0 2e       	mov	r11, r16
    295a:	bf 0c       	add	r11, r15
    295c:	40 91 72 03 	lds	r20, 0x0372
    2960:	04 17       	cp	r16, r20
    2962:	58 f2       	brcs	.-106    	; 0x28fa <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    2964:	4f 0d       	add	r20, r15
    2966:	20 91 73 03 	lds	r18, 0x0373
    296a:	2e 0d       	add	r18, r14
    296c:	8f 2d       	mov	r24, r15
    296e:	6e 2d       	mov	r22, r14
    2970:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	
}
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
    2986:	08 95       	ret

00002988 <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	08 2f       	mov	r16, r24
    2992:	26 2f       	mov	r18, r22
    2994:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    2996:	60 91 73 03 	lds	r22, 0x0373
    299a:	68 30       	cpi	r22, 0x08	; 8
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <glcd_tiny_draw_char+0x18>
    299e:	6a c0       	rjmp	.+212    	; 0x2a74 <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    29a0:	80 91 74 03 	lds	r24, 0x0374
    29a4:	48 17       	cp	r20, r24
    29a6:	20 f0       	brcs	.+8      	; 0x29b0 <glcd_tiny_draw_char+0x28>
    29a8:	80 91 75 03 	lds	r24, 0x0375
    29ac:	84 17       	cp	r24, r20
    29ae:	08 f4       	brcc	.+2      	; 0x29b2 <glcd_tiny_draw_char+0x2a>
    29b0:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    29b2:	c2 2f       	mov	r28, r18
    29b4:	d0 e0       	ldi	r29, 0x00	; 0
    29b6:	e6 2f       	mov	r30, r22
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	31 96       	adiw	r30, 0x01	; 1
    29bc:	80 e3       	ldi	r24, 0x30	; 48
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	bf 01       	movw	r22, r30
    29c2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    29c6:	c6 17       	cp	r28, r22
    29c8:	d7 07       	cpc	r29, r23
    29ca:	0c f0       	brlt	.+2      	; 0x29ce <glcd_tiny_draw_char+0x46>
    29cc:	53 c0       	rjmp	.+166    	; 0x2a74 <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    29ce:	40 91 72 03 	lds	r20, 0x0372
    29d2:	84 2f       	mov	r24, r20
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	80 0f       	add	r24, r16
    29d8:	91 1d       	adc	r25, r1
    29da:	84 35       	cpi	r24, 0x54	; 84
    29dc:	91 05       	cpc	r25, r1
    29de:	0c f0       	brlt	.+2      	; 0x29e2 <glcd_tiny_draw_char+0x5a>
    29e0:	49 c0       	rjmp	.+146    	; 0x2a74 <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    29e2:	ce 9f       	mul	r28, r30
    29e4:	b0 01       	movw	r22, r0
    29e6:	cf 9f       	mul	r28, r31
    29e8:	70 0d       	add	r23, r0
    29ea:	de 9f       	mul	r29, r30
    29ec:	70 0d       	add	r23, r0
    29ee:	11 24       	eor	r1, r1
    29f0:	40 0f       	add	r20, r16
    29f2:	21 96       	adiw	r28, 0x01	; 1
    29f4:	ce 9f       	mul	r28, r30
    29f6:	90 01       	movw	r18, r0
    29f8:	cf 9f       	mul	r28, r31
    29fa:	30 0d       	add	r19, r0
    29fc:	de 9f       	mul	r29, r30
    29fe:	30 0d       	add	r19, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	21 97       	sbiw	r28, 0x01	; 1
    2a04:	80 2f       	mov	r24, r16
    2a06:	0e 94 cc 07 	call	0xf98	; 0xf98 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2a0a:	84 e5       	ldi	r24, 0x54	; 84
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	c8 9f       	mul	r28, r24
    2a10:	d0 01       	movw	r26, r0
    2a12:	c9 9f       	mul	r28, r25
    2a14:	b0 0d       	add	r27, r0
    2a16:	d8 9f       	mul	r29, r24
    2a18:	b0 0d       	add	r27, r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	61 2f       	mov	r22, r17
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	22 c0       	rjmp	.+68     	; 0x2a68 <glcd_tiny_draw_char+0xe0>
    2a24:	80 91 74 03 	lds	r24, 0x0374
    2a28:	9b 01       	movw	r18, r22
    2a2a:	28 1b       	sub	r18, r24
    2a2c:	31 09       	sbc	r19, r1
    2a2e:	89 2f       	mov	r24, r25
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	fc 01       	movw	r30, r24
    2a34:	2e 9f       	mul	r18, r30
    2a36:	c0 01       	movw	r24, r0
    2a38:	2f 9f       	mul	r18, r31
    2a3a:	90 0d       	add	r25, r0
    2a3c:	3e 9f       	mul	r19, r30
    2a3e:	90 0d       	add	r25, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	85 0f       	add	r24, r21
    2a44:	91 1d       	adc	r25, r1
    2a46:	e0 91 70 03 	lds	r30, 0x0370
    2a4a:	f0 91 71 03 	lds	r31, 0x0371
    2a4e:	e8 0f       	add	r30, r24
    2a50:	f9 1f       	adc	r31, r25
    2a52:	84 91       	lpm	r24, Z+
    2a54:	e0 91 6c 03 	lds	r30, 0x036C
    2a58:	f0 91 6d 03 	lds	r31, 0x036D
    2a5c:	ea 0f       	add	r30, r26
    2a5e:	fb 1f       	adc	r31, r27
    2a60:	e4 0f       	add	r30, r20
    2a62:	f1 1d       	adc	r31, r1
    2a64:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    2a66:	5f 5f       	subi	r21, 0xFF	; 255
    2a68:	45 2f       	mov	r20, r21
    2a6a:	40 0f       	add	r20, r16
    2a6c:	90 91 72 03 	lds	r25, 0x0372
    2a70:	59 17       	cp	r21, r25
    2a72:	c0 f2       	brcs	.-80     	; 0x2a24 <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	18 2f       	mov	r17, r24
    2a88:	06 2f       	mov	r16, r22
    2a8a:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2a8c:	80 91 73 03 	lds	r24, 0x0373
    2a90:	88 30       	cpi	r24, 0x08	; 8
    2a92:	20 f5       	brcc	.+72     	; 0x2adc <glcd_tiny_draw_string_P+0x5e>
		return;
    2a94:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    2a96:	21 96       	adiw	r28, 0x01	; 1
    2a98:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    2a9a:	44 23       	and	r20, r20
    2a9c:	f9 f0       	breq	.+62     	; 0x2adc <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    2a9e:	81 2f       	mov	r24, r17
    2aa0:	60 2f       	mov	r22, r16
    2aa2:	0e 94 c4 14 	call	0x2988	; 0x2988 <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    2aa6:	80 91 72 03 	lds	r24, 0x0372
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	18 0f       	add	r17, r24
    2aae:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	81 0f       	add	r24, r17
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	84 35       	cpi	r24, 0x54	; 84
    2ab8:	91 05       	cpc	r25, r1
    2aba:	14 f0       	brlt	.+4      	; 0x2ac0 <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    2abc:	0f 5f       	subi	r16, 0xFF	; 255
    2abe:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2ac0:	20 2f       	mov	r18, r16
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	60 91 73 03 	lds	r22, 0x0373
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	6f 5f       	subi	r22, 0xFF	; 255
    2acc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ace:	80 e3       	ldi	r24, 0x30	; 48
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    2ad6:	26 17       	cp	r18, r22
    2ad8:	37 07       	cpc	r19, r23
    2ada:	e4 f2       	brlt	.-72     	; 0x2a94 <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	08 95       	ret

00002ae6 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	18 2f       	mov	r17, r24
    2af0:	06 2f       	mov	r16, r22
    2af2:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2af4:	80 91 73 03 	lds	r24, 0x0373
    2af8:	88 30       	cpi	r24, 0x08	; 8
    2afa:	08 f1       	brcs	.+66     	; 0x2b3e <glcd_tiny_draw_string+0x58>
    2afc:	23 c0       	rjmp	.+70     	; 0x2b44 <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2afe:	81 2f       	mov	r24, r17
    2b00:	60 2f       	mov	r22, r16
    2b02:	0e 94 c4 14 	call	0x2988	; 0x2988 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    2b06:	80 91 72 03 	lds	r24, 0x0372
    2b0a:	8f 5f       	subi	r24, 0xFF	; 255
    2b0c:	18 0f       	add	r17, r24
    2b0e:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	81 0f       	add	r24, r17
    2b14:	91 1d       	adc	r25, r1
    2b16:	84 35       	cpi	r24, 0x54	; 84
    2b18:	91 05       	cpc	r25, r1
    2b1a:	14 f0       	brlt	.+4      	; 0x2b20 <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2b20:	20 2f       	mov	r18, r16
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	60 91 73 03 	lds	r22, 0x0373
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	6f 5f       	subi	r22, 0xFF	; 255
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	80 e3       	ldi	r24, 0x30	; 48
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__divmodhi4>
    2b36:	26 17       	cp	r18, r22
    2b38:	37 07       	cpc	r19, r23
    2b3a:	24 f4       	brge	.+8      	; 0x2b44 <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2b3c:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    2b3e:	48 81       	ld	r20, Y
    2b40:	44 23       	and	r20, r20
    2b42:	e9 f6       	brne	.-70     	; 0x2afe <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	08 95       	ret

00002b4e <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    2b4e:	68 2f       	mov	r22, r24
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	66 0f       	add	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	8a 95       	dec	r24
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <glcd_tiny_invert_line+0x6>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	43 e5       	ldi	r20, 0x53	; 83
    2b60:	28 e0       	ldi	r18, 0x08	; 8
    2b62:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <glcd_invert_area>
}
    2b66:	08 95       	ret

00002b68 <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2b6e:	0e 94 19 08 	call	0x1032	; 0x1032 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	65 e0       	ldi	r22, 0x05	; 5
    2b76:	a8 01       	movw	r20, r16
    2b78:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <glcd_tiny_draw_string_P>
	glcd_write();
    2b7c:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
}
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2b8c:	0e 94 19 08 	call	0x1032	; 0x1032 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	65 e0       	ldi	r22, 0x05	; 5
    2b94:	a8 01       	movw	r20, r16
    2b96:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <glcd_tiny_draw_string>
	glcd_write();
    2b9a:	0e 94 b2 08 	call	0x1164	; 0x1164 <glcd_write>
}
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	08 95       	ret

00002ba4 <EERead1Byte>:
	
	return 0;
}


uint8_t EERead1Byte ( uint16_t u16addr ){
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	18 2f       	mov	r17, r24
    2baa:	09 2f       	mov	r16, r25
	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	uint8_t u8data = 0;
	
    TWIStart();
    2bac:	0e 94 44 16 	call	0x2c88	; 0x2c88 <TWIStart>
	TWIWrite( EEWRITE );
    2bb0:	80 ea       	ldi	r24, 0xA0	; 160
    2bb2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIWrite( addr_l );
    2bb6:	81 2f       	mov	r24, r17
    2bb8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIWrite(addr_h);
    2bbc:	80 2f       	mov	r24, r16
    2bbe:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
    TWIStart();
    2bc2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <TWIStart>
	TWIWrite( EEREAD );
    2bc6:	81 ea       	ldi	r24, 0xA1	; 161
    2bc8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	u8data = TWIReadNACK();
    2bcc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <TWIReadNACK>
    2bd0:	18 2f       	mov	r17, r24
    TWIStop();
    2bd2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <TWIStop>
	
    return u8data;
}
    2bd6:	81 2f       	mov	r24, r17
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <EERead2Bytes>:
	_delay_ms(50);								// for write
	
	return 0;
}

uint16_t EERead2Bytes ( uint16_t u16addr ){
    2bde:	ff 92       	push	r15
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	8c 01       	movw	r16, r24
	
	uint16_t data_lsb, data_msb;
	
	data_lsb = EERead1Byte ( u16addr );			// read LSB register
    2be6:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <EERead1Byte>
    2bea:	f8 2e       	mov	r15, r24
	data_msb = EERead1Byte ( u16addr + 0x01 );	// read MSB register
    2bec:	c8 01       	movw	r24, r16
    2bee:	01 96       	adiw	r24, 0x01	; 1
    2bf0:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <EERead1Byte>
    2bf4:	38 2f       	mov	r19, r24
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	2f 0d       	add	r18, r15
    2bfa:	31 1d       	adc	r19, r1
	
    return ( data_lsb + ( data_msb << 8 ));	// 16 Bit
    2bfc:	c9 01       	movw	r24, r18
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	08 95       	ret

00002c06 <EEWrite1Byte>:

#define EEWRITE		0b10100000
#define EEREAD		0b10100001

// 8 Bit data
uint8_t EEWrite1Byte ( uint16_t u16addr, uint8_t u8data ){
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	18 2f       	mov	r17, r24
    2c0e:	09 2f       	mov	r16, r25
    2c10:	f6 2e       	mov	r15, r22

	uint8_t addr_l, addr_h;
	addr_l = u16addr;
	addr_h = ( u16addr >> 8 );
	
    TWIStart();
    2c12:	0e 94 44 16 	call	0x2c88	; 0x2c88 <TWIStart>
	TWIWrite( EEWRITE );  
    2c16:	80 ea       	ldi	r24, 0xA0	; 160
    2c18:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIWrite( addr_l );
    2c1c:	81 2f       	mov	r24, r17
    2c1e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIWrite( addr_h );
    2c22:	80 2f       	mov	r24, r16
    2c24:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIWrite( u8data );
    2c28:	8f 2d       	mov	r24, r15
    2c2a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWIWrite>
	TWIStop();
    2c2e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <TWIStop>
	
	return 0;
}
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	08 95       	ret

00002c3c <EEWrite2Bytes>:
	
    return u8data;
}
//
// 16 Bit data
uint8_t EEWrite2Bytes ( uint16_t u16addr, uint16_t u16data ){
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	7c 01       	movw	r14, r24
    2c48:	d7 2e       	mov	r13, r23
	uint8_t data_lsb, data_msb;
	
	data_lsb = u16data;							// LSB data
	data_msb = ( u16data >> 8 );				// MSB data
	
	EEWrite1Byte ( u16addr, data_lsb );			// write LSB register
    2c4a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <EEWrite1Byte>
    2c4e:	04 ed       	ldi	r16, 0xD4	; 212
    2c50:	10 e3       	ldi	r17, 0x30	; 48
    2c52:	c8 01       	movw	r24, r16
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <EEWrite2Bytes+0x18>
	_delay_ms(50);								// for write
	EEWrite1Byte (( u16addr + 1 ),  data_msb );// Write MSB register
    2c58:	c7 01       	movw	r24, r14
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	6d 2d       	mov	r22, r13
    2c5e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <EEWrite1Byte>
    2c62:	c8 01       	movw	r24, r16
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <EEWrite2Bytes+0x28>
	_delay_ms(50);								// for write
	
	return 0;
}
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	08 95       	ret

00002c76 <TWIInit>:
#include "twi.h"

// Initial TWI
void TWIInit ( void ){
	// set SCL to 400kHz
	TWSR = 0x00;
    2c76:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0x0C;
    2c7a:	8c e0       	ldi	r24, 0x0C	; 12
    2c7c:	80 93 b8 00 	sts	0x00B8, r24
	// enable TWI
	TWCR = ( 1 << TWEN );
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	80 93 bc 00 	sts	0x00BC, r24
}
    2c86:	08 95       	ret

00002c88 <TWIStart>:
//
// Start read/write
void TWIStart ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA ) | ( 1 << TWEN );
    2c88:	84 ea       	ldi	r24, 0xA4	; 164
    2c8a:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2c8e:	80 91 bc 00 	lds	r24, 0x00BC
    2c92:	87 ff       	sbrs	r24, 7
    2c94:	fc cf       	rjmp	.-8      	; 0x2c8e <TWIStart+0x6>
}
    2c96:	08 95       	ret

00002c98 <TWIStop>:
//
// Stop read/ write
void TWIStop ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTO ) | ( 1 << TWEN );
    2c98:	84 e9       	ldi	r24, 0x94	; 148
    2c9a:	80 93 bc 00 	sts	0x00BC, r24
}
    2c9e:	08 95       	ret

00002ca0 <TWIWrite>:
//
// Write
void TWIWrite ( uint8_t u8data ){

	TWDR = u8data;
    2ca0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    2ca4:	84 e8       	ldi	r24, 0x84	; 132
    2ca6:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2caa:	80 91 bc 00 	lds	r24, 0x00BC
    2cae:	87 ff       	sbrs	r24, 7
    2cb0:	fc cf       	rjmp	.-8      	; 0x2caa <TWIWrite+0xa>
}
    2cb2:	08 95       	ret

00002cb4 <TWIReadACK>:
//
// Read
uint8_t TWIReadACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN )|( 1 << TWEA );
    2cb4:	84 ec       	ldi	r24, 0xC4	; 196
    2cb6:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2cba:	80 91 bc 00 	lds	r24, 0x00BC
    2cbe:	87 ff       	sbrs	r24, 7
    2cc0:	fc cf       	rjmp	.-8      	; 0x2cba <TWIReadACK+0x6>
	return TWDR;
    2cc2:	80 91 bb 00 	lds	r24, 0x00BB
}
    2cc6:	08 95       	ret

00002cc8 <TWIReadNACK>:
//
// Read function
uint8_t TWIReadNACK ( void ){

	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
    2cc8:	84 e8       	ldi	r24, 0x84	; 132
    2cca:	80 93 bc 00 	sts	0x00BC, r24
	while (( TWCR & ( 1 << TWINT )) == 0 );
    2cce:	80 91 bc 00 	lds	r24, 0x00BC
    2cd2:	87 ff       	sbrs	r24, 7
    2cd4:	fc cf       	rjmp	.-8      	; 0x2cce <TWIReadNACK+0x6>
	return TWDR;
    2cd6:	80 91 bb 00 	lds	r24, 0x00BB
}
    2cda:	08 95       	ret

00002cdc <TWIGetStatus>:
// Status
uint8_t TWIGetStatus( void ){

	uint8_t status;
	// mask status
	status = TWSR & 0xF8;
    2cdc:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
    2ce0:	88 7f       	andi	r24, 0xF8	; 248
    2ce2:	08 95       	ret

00002ce4 <__cmpsf2>:
    2ce4:	6c d0       	rcall	.+216    	; 0x2dbe <__fp_cmp>
    2ce6:	08 f4       	brcc	.+2      	; 0x2cea <__cmpsf2+0x6>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	08 95       	ret

00002cec <__fixunssfsi>:
    2cec:	94 d0       	rcall	.+296    	; 0x2e16 <__fp_splitA>
    2cee:	88 f0       	brcs	.+34     	; 0x2d12 <__fixunssfsi+0x26>
    2cf0:	9f 57       	subi	r25, 0x7F	; 127
    2cf2:	90 f0       	brcs	.+36     	; 0x2d18 <__fixunssfsi+0x2c>
    2cf4:	b9 2f       	mov	r27, r25
    2cf6:	99 27       	eor	r25, r25
    2cf8:	b7 51       	subi	r27, 0x17	; 23
    2cfa:	a0 f0       	brcs	.+40     	; 0x2d24 <__fixunssfsi+0x38>
    2cfc:	d1 f0       	breq	.+52     	; 0x2d32 <__fixunssfsi+0x46>
    2cfe:	66 0f       	add	r22, r22
    2d00:	77 1f       	adc	r23, r23
    2d02:	88 1f       	adc	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	1a f0       	brmi	.+6      	; 0x2d0e <__fixunssfsi+0x22>
    2d08:	ba 95       	dec	r27
    2d0a:	c9 f7       	brne	.-14     	; 0x2cfe <__fixunssfsi+0x12>
    2d0c:	12 c0       	rjmp	.+36     	; 0x2d32 <__fixunssfsi+0x46>
    2d0e:	b1 30       	cpi	r27, 0x01	; 1
    2d10:	81 f0       	breq	.+32     	; 0x2d32 <__fixunssfsi+0x46>
    2d12:	9b d0       	rcall	.+310    	; 0x2e4a <__fp_zero>
    2d14:	b1 e0       	ldi	r27, 0x01	; 1
    2d16:	08 95       	ret
    2d18:	98 c0       	rjmp	.+304    	; 0x2e4a <__fp_zero>
    2d1a:	67 2f       	mov	r22, r23
    2d1c:	78 2f       	mov	r23, r24
    2d1e:	88 27       	eor	r24, r24
    2d20:	b8 5f       	subi	r27, 0xF8	; 248
    2d22:	39 f0       	breq	.+14     	; 0x2d32 <__fixunssfsi+0x46>
    2d24:	b9 3f       	cpi	r27, 0xF9	; 249
    2d26:	cc f3       	brlt	.-14     	; 0x2d1a <__fixunssfsi+0x2e>
    2d28:	86 95       	lsr	r24
    2d2a:	77 95       	ror	r23
    2d2c:	67 95       	ror	r22
    2d2e:	b3 95       	inc	r27
    2d30:	d9 f7       	brne	.-10     	; 0x2d28 <__fixunssfsi+0x3c>
    2d32:	3e f4       	brtc	.+14     	; 0x2d42 <__fixunssfsi+0x56>
    2d34:	90 95       	com	r25
    2d36:	80 95       	com	r24
    2d38:	70 95       	com	r23
    2d3a:	61 95       	neg	r22
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	08 95       	ret

00002d44 <__floatunsisf>:
    2d44:	e8 94       	clt
    2d46:	09 c0       	rjmp	.+18     	; 0x2d5a <__floatsisf+0x12>

00002d48 <__floatsisf>:
    2d48:	97 fb       	bst	r25, 7
    2d4a:	3e f4       	brtc	.+14     	; 0x2d5a <__floatsisf+0x12>
    2d4c:	90 95       	com	r25
    2d4e:	80 95       	com	r24
    2d50:	70 95       	com	r23
    2d52:	61 95       	neg	r22
    2d54:	7f 4f       	sbci	r23, 0xFF	; 255
    2d56:	8f 4f       	sbci	r24, 0xFF	; 255
    2d58:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5a:	99 23       	and	r25, r25
    2d5c:	a9 f0       	breq	.+42     	; 0x2d88 <__floatsisf+0x40>
    2d5e:	f9 2f       	mov	r31, r25
    2d60:	96 e9       	ldi	r25, 0x96	; 150
    2d62:	bb 27       	eor	r27, r27
    2d64:	93 95       	inc	r25
    2d66:	f6 95       	lsr	r31
    2d68:	87 95       	ror	r24
    2d6a:	77 95       	ror	r23
    2d6c:	67 95       	ror	r22
    2d6e:	b7 95       	ror	r27
    2d70:	f1 11       	cpse	r31, r1
    2d72:	f8 cf       	rjmp	.-16     	; 0x2d64 <__floatsisf+0x1c>
    2d74:	fa f4       	brpl	.+62     	; 0x2db4 <__floatsisf+0x6c>
    2d76:	bb 0f       	add	r27, r27
    2d78:	11 f4       	brne	.+4      	; 0x2d7e <__floatsisf+0x36>
    2d7a:	60 ff       	sbrs	r22, 0
    2d7c:	1b c0       	rjmp	.+54     	; 0x2db4 <__floatsisf+0x6c>
    2d7e:	6f 5f       	subi	r22, 0xFF	; 255
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	16 c0       	rjmp	.+44     	; 0x2db4 <__floatsisf+0x6c>
    2d88:	88 23       	and	r24, r24
    2d8a:	11 f0       	breq	.+4      	; 0x2d90 <__floatsisf+0x48>
    2d8c:	96 e9       	ldi	r25, 0x96	; 150
    2d8e:	11 c0       	rjmp	.+34     	; 0x2db2 <__floatsisf+0x6a>
    2d90:	77 23       	and	r23, r23
    2d92:	21 f0       	breq	.+8      	; 0x2d9c <__floatsisf+0x54>
    2d94:	9e e8       	ldi	r25, 0x8E	; 142
    2d96:	87 2f       	mov	r24, r23
    2d98:	76 2f       	mov	r23, r22
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <__floatsisf+0x5e>
    2d9c:	66 23       	and	r22, r22
    2d9e:	71 f0       	breq	.+28     	; 0x2dbc <__floatsisf+0x74>
    2da0:	96 e8       	ldi	r25, 0x86	; 134
    2da2:	86 2f       	mov	r24, r22
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	2a f0       	brmi	.+10     	; 0x2db4 <__floatsisf+0x6c>
    2daa:	9a 95       	dec	r25
    2dac:	66 0f       	add	r22, r22
    2dae:	77 1f       	adc	r23, r23
    2db0:	88 1f       	adc	r24, r24
    2db2:	da f7       	brpl	.-10     	; 0x2daa <__floatsisf+0x62>
    2db4:	88 0f       	add	r24, r24
    2db6:	96 95       	lsr	r25
    2db8:	87 95       	ror	r24
    2dba:	97 f9       	bld	r25, 7
    2dbc:	08 95       	ret

00002dbe <__fp_cmp>:
    2dbe:	99 0f       	add	r25, r25
    2dc0:	00 08       	sbc	r0, r0
    2dc2:	55 0f       	add	r21, r21
    2dc4:	aa 0b       	sbc	r26, r26
    2dc6:	e0 e8       	ldi	r30, 0x80	; 128
    2dc8:	fe ef       	ldi	r31, 0xFE	; 254
    2dca:	16 16       	cp	r1, r22
    2dcc:	17 06       	cpc	r1, r23
    2dce:	e8 07       	cpc	r30, r24
    2dd0:	f9 07       	cpc	r31, r25
    2dd2:	c0 f0       	brcs	.+48     	; 0x2e04 <__fp_cmp+0x46>
    2dd4:	12 16       	cp	r1, r18
    2dd6:	13 06       	cpc	r1, r19
    2dd8:	e4 07       	cpc	r30, r20
    2dda:	f5 07       	cpc	r31, r21
    2ddc:	98 f0       	brcs	.+38     	; 0x2e04 <__fp_cmp+0x46>
    2dde:	62 1b       	sub	r22, r18
    2de0:	73 0b       	sbc	r23, r19
    2de2:	84 0b       	sbc	r24, r20
    2de4:	95 0b       	sbc	r25, r21
    2de6:	39 f4       	brne	.+14     	; 0x2df6 <__fp_cmp+0x38>
    2de8:	0a 26       	eor	r0, r26
    2dea:	61 f0       	breq	.+24     	; 0x2e04 <__fp_cmp+0x46>
    2dec:	23 2b       	or	r18, r19
    2dee:	24 2b       	or	r18, r20
    2df0:	25 2b       	or	r18, r21
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <__fp_cmp+0x3e>
    2df4:	08 95       	ret
    2df6:	0a 26       	eor	r0, r26
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <__fp_cmp+0x3e>
    2dfa:	a1 40       	sbci	r26, 0x01	; 1
    2dfc:	a6 95       	lsr	r26
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
    2e00:	81 1d       	adc	r24, r1
    2e02:	81 1d       	adc	r24, r1
    2e04:	08 95       	ret

00002e06 <__fp_split3>:
    2e06:	57 fd       	sbrc	r21, 7
    2e08:	90 58       	subi	r25, 0x80	; 128
    2e0a:	44 0f       	add	r20, r20
    2e0c:	55 1f       	adc	r21, r21
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <__fp_splitA+0x10>
    2e10:	5f 3f       	cpi	r21, 0xFF	; 255
    2e12:	71 f0       	breq	.+28     	; 0x2e30 <__fp_splitA+0x1a>
    2e14:	47 95       	ror	r20

00002e16 <__fp_splitA>:
    2e16:	88 0f       	add	r24, r24
    2e18:	97 fb       	bst	r25, 7
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	61 f0       	breq	.+24     	; 0x2e36 <__fp_splitA+0x20>
    2e1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e20:	79 f0       	breq	.+30     	; 0x2e40 <__fp_splitA+0x2a>
    2e22:	87 95       	ror	r24
    2e24:	08 95       	ret
    2e26:	12 16       	cp	r1, r18
    2e28:	13 06       	cpc	r1, r19
    2e2a:	14 06       	cpc	r1, r20
    2e2c:	55 1f       	adc	r21, r21
    2e2e:	f2 cf       	rjmp	.-28     	; 0x2e14 <__fp_split3+0xe>
    2e30:	46 95       	lsr	r20
    2e32:	f1 df       	rcall	.-30     	; 0x2e16 <__fp_splitA>
    2e34:	08 c0       	rjmp	.+16     	; 0x2e46 <__fp_splitA+0x30>
    2e36:	16 16       	cp	r1, r22
    2e38:	17 06       	cpc	r1, r23
    2e3a:	18 06       	cpc	r1, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	f1 cf       	rjmp	.-30     	; 0x2e22 <__fp_splitA+0xc>
    2e40:	86 95       	lsr	r24
    2e42:	71 05       	cpc	r23, r1
    2e44:	61 05       	cpc	r22, r1
    2e46:	08 94       	sec
    2e48:	08 95       	ret

00002e4a <__fp_zero>:
    2e4a:	e8 94       	clt

00002e4c <__fp_szero>:
    2e4c:	bb 27       	eor	r27, r27
    2e4e:	66 27       	eor	r22, r22
    2e50:	77 27       	eor	r23, r23
    2e52:	cb 01       	movw	r24, r22
    2e54:	97 f9       	bld	r25, 7
    2e56:	08 95       	ret

00002e58 <__gesf2>:
    2e58:	b2 df       	rcall	.-156    	; 0x2dbe <__fp_cmp>
    2e5a:	08 f4       	brcc	.+2      	; 0x2e5e <__gesf2+0x6>
    2e5c:	8f ef       	ldi	r24, 0xFF	; 255
    2e5e:	08 95       	ret

00002e60 <__mulsf3>:
    2e60:	0b d0       	rcall	.+22     	; 0x2e78 <__mulsf3x>
    2e62:	78 c0       	rjmp	.+240    	; 0x2f54 <__fp_round>
    2e64:	69 d0       	rcall	.+210    	; 0x2f38 <__fp_pscA>
    2e66:	28 f0       	brcs	.+10     	; 0x2e72 <__mulsf3+0x12>
    2e68:	6e d0       	rcall	.+220    	; 0x2f46 <__fp_pscB>
    2e6a:	18 f0       	brcs	.+6      	; 0x2e72 <__mulsf3+0x12>
    2e6c:	95 23       	and	r25, r21
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <__mulsf3+0x12>
    2e70:	5a c0       	rjmp	.+180    	; 0x2f26 <__fp_inf>
    2e72:	5f c0       	rjmp	.+190    	; 0x2f32 <__fp_nan>
    2e74:	11 24       	eor	r1, r1
    2e76:	ea cf       	rjmp	.-44     	; 0x2e4c <__fp_szero>

00002e78 <__mulsf3x>:
    2e78:	c6 df       	rcall	.-116    	; 0x2e06 <__fp_split3>
    2e7a:	a0 f3       	brcs	.-24     	; 0x2e64 <__mulsf3+0x4>

00002e7c <__mulsf3_pse>:
    2e7c:	95 9f       	mul	r25, r21
    2e7e:	d1 f3       	breq	.-12     	; 0x2e74 <__mulsf3+0x14>
    2e80:	95 0f       	add	r25, r21
    2e82:	50 e0       	ldi	r21, 0x00	; 0
    2e84:	55 1f       	adc	r21, r21
    2e86:	62 9f       	mul	r22, r18
    2e88:	f0 01       	movw	r30, r0
    2e8a:	72 9f       	mul	r23, r18
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	f0 0d       	add	r31, r0
    2e90:	b1 1d       	adc	r27, r1
    2e92:	63 9f       	mul	r22, r19
    2e94:	aa 27       	eor	r26, r26
    2e96:	f0 0d       	add	r31, r0
    2e98:	b1 1d       	adc	r27, r1
    2e9a:	aa 1f       	adc	r26, r26
    2e9c:	64 9f       	mul	r22, r20
    2e9e:	66 27       	eor	r22, r22
    2ea0:	b0 0d       	add	r27, r0
    2ea2:	a1 1d       	adc	r26, r1
    2ea4:	66 1f       	adc	r22, r22
    2ea6:	82 9f       	mul	r24, r18
    2ea8:	22 27       	eor	r18, r18
    2eaa:	b0 0d       	add	r27, r0
    2eac:	a1 1d       	adc	r26, r1
    2eae:	62 1f       	adc	r22, r18
    2eb0:	73 9f       	mul	r23, r19
    2eb2:	b0 0d       	add	r27, r0
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	62 1f       	adc	r22, r18
    2eb8:	83 9f       	mul	r24, r19
    2eba:	a0 0d       	add	r26, r0
    2ebc:	61 1d       	adc	r22, r1
    2ebe:	22 1f       	adc	r18, r18
    2ec0:	74 9f       	mul	r23, r20
    2ec2:	33 27       	eor	r19, r19
    2ec4:	a0 0d       	add	r26, r0
    2ec6:	61 1d       	adc	r22, r1
    2ec8:	23 1f       	adc	r18, r19
    2eca:	84 9f       	mul	r24, r20
    2ecc:	60 0d       	add	r22, r0
    2ece:	21 1d       	adc	r18, r1
    2ed0:	82 2f       	mov	r24, r18
    2ed2:	76 2f       	mov	r23, r22
    2ed4:	6a 2f       	mov	r22, r26
    2ed6:	11 24       	eor	r1, r1
    2ed8:	9f 57       	subi	r25, 0x7F	; 127
    2eda:	50 40       	sbci	r21, 0x00	; 0
    2edc:	8a f0       	brmi	.+34     	; 0x2f00 <__mulsf3_pse+0x84>
    2ede:	e1 f0       	breq	.+56     	; 0x2f18 <__mulsf3_pse+0x9c>
    2ee0:	88 23       	and	r24, r24
    2ee2:	4a f0       	brmi	.+18     	; 0x2ef6 <__mulsf3_pse+0x7a>
    2ee4:	ee 0f       	add	r30, r30
    2ee6:	ff 1f       	adc	r31, r31
    2ee8:	bb 1f       	adc	r27, r27
    2eea:	66 1f       	adc	r22, r22
    2eec:	77 1f       	adc	r23, r23
    2eee:	88 1f       	adc	r24, r24
    2ef0:	91 50       	subi	r25, 0x01	; 1
    2ef2:	50 40       	sbci	r21, 0x00	; 0
    2ef4:	a9 f7       	brne	.-22     	; 0x2ee0 <__mulsf3_pse+0x64>
    2ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ef8:	51 05       	cpc	r21, r1
    2efa:	70 f0       	brcs	.+28     	; 0x2f18 <__mulsf3_pse+0x9c>
    2efc:	14 c0       	rjmp	.+40     	; 0x2f26 <__fp_inf>
    2efe:	a6 cf       	rjmp	.-180    	; 0x2e4c <__fp_szero>
    2f00:	5f 3f       	cpi	r21, 0xFF	; 255
    2f02:	ec f3       	brlt	.-6      	; 0x2efe <__mulsf3_pse+0x82>
    2f04:	98 3e       	cpi	r25, 0xE8	; 232
    2f06:	dc f3       	brlt	.-10     	; 0x2efe <__mulsf3_pse+0x82>
    2f08:	86 95       	lsr	r24
    2f0a:	77 95       	ror	r23
    2f0c:	67 95       	ror	r22
    2f0e:	b7 95       	ror	r27
    2f10:	f7 95       	ror	r31
    2f12:	e7 95       	ror	r30
    2f14:	9f 5f       	subi	r25, 0xFF	; 255
    2f16:	c1 f7       	brne	.-16     	; 0x2f08 <__mulsf3_pse+0x8c>
    2f18:	fe 2b       	or	r31, r30
    2f1a:	88 0f       	add	r24, r24
    2f1c:	91 1d       	adc	r25, r1
    2f1e:	96 95       	lsr	r25
    2f20:	87 95       	ror	r24
    2f22:	97 f9       	bld	r25, 7
    2f24:	08 95       	ret

00002f26 <__fp_inf>:
    2f26:	97 f9       	bld	r25, 7
    2f28:	9f 67       	ori	r25, 0x7F	; 127
    2f2a:	80 e8       	ldi	r24, 0x80	; 128
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	08 95       	ret

00002f32 <__fp_nan>:
    2f32:	9f ef       	ldi	r25, 0xFF	; 255
    2f34:	80 ec       	ldi	r24, 0xC0	; 192
    2f36:	08 95       	ret

00002f38 <__fp_pscA>:
    2f38:	00 24       	eor	r0, r0
    2f3a:	0a 94       	dec	r0
    2f3c:	16 16       	cp	r1, r22
    2f3e:	17 06       	cpc	r1, r23
    2f40:	18 06       	cpc	r1, r24
    2f42:	09 06       	cpc	r0, r25
    2f44:	08 95       	ret

00002f46 <__fp_pscB>:
    2f46:	00 24       	eor	r0, r0
    2f48:	0a 94       	dec	r0
    2f4a:	12 16       	cp	r1, r18
    2f4c:	13 06       	cpc	r1, r19
    2f4e:	14 06       	cpc	r1, r20
    2f50:	05 06       	cpc	r0, r21
    2f52:	08 95       	ret

00002f54 <__fp_round>:
    2f54:	09 2e       	mov	r0, r25
    2f56:	03 94       	inc	r0
    2f58:	00 0c       	add	r0, r0
    2f5a:	11 f4       	brne	.+4      	; 0x2f60 <__fp_round+0xc>
    2f5c:	88 23       	and	r24, r24
    2f5e:	52 f0       	brmi	.+20     	; 0x2f74 <__fp_round+0x20>
    2f60:	bb 0f       	add	r27, r27
    2f62:	40 f4       	brcc	.+16     	; 0x2f74 <__fp_round+0x20>
    2f64:	bf 2b       	or	r27, r31
    2f66:	11 f4       	brne	.+4      	; 0x2f6c <__fp_round+0x18>
    2f68:	60 ff       	sbrs	r22, 0
    2f6a:	04 c0       	rjmp	.+8      	; 0x2f74 <__fp_round+0x20>
    2f6c:	6f 5f       	subi	r22, 0xFF	; 255
    2f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f70:	8f 4f       	sbci	r24, 0xFF	; 255
    2f72:	9f 4f       	sbci	r25, 0xFF	; 255
    2f74:	08 95       	ret

00002f76 <__divmodhi4>:
    2f76:	97 fb       	bst	r25, 7
    2f78:	09 2e       	mov	r0, r25
    2f7a:	07 26       	eor	r0, r23
    2f7c:	0a d0       	rcall	.+20     	; 0x2f92 <__divmodhi4_neg1>
    2f7e:	77 fd       	sbrc	r23, 7
    2f80:	04 d0       	rcall	.+8      	; 0x2f8a <__divmodhi4_neg2>
    2f82:	0c d0       	rcall	.+24     	; 0x2f9c <__udivmodhi4>
    2f84:	06 d0       	rcall	.+12     	; 0x2f92 <__divmodhi4_neg1>
    2f86:	00 20       	and	r0, r0
    2f88:	1a f4       	brpl	.+6      	; 0x2f90 <__divmodhi4_exit>

00002f8a <__divmodhi4_neg2>:
    2f8a:	70 95       	com	r23
    2f8c:	61 95       	neg	r22
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255

00002f90 <__divmodhi4_exit>:
    2f90:	08 95       	ret

00002f92 <__divmodhi4_neg1>:
    2f92:	f6 f7       	brtc	.-4      	; 0x2f90 <__divmodhi4_exit>
    2f94:	90 95       	com	r25
    2f96:	81 95       	neg	r24
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	08 95       	ret

00002f9c <__udivmodhi4>:
    2f9c:	aa 1b       	sub	r26, r26
    2f9e:	bb 1b       	sub	r27, r27
    2fa0:	51 e1       	ldi	r21, 0x11	; 17
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <__udivmodhi4_ep>

00002fa4 <__udivmodhi4_loop>:
    2fa4:	aa 1f       	adc	r26, r26
    2fa6:	bb 1f       	adc	r27, r27
    2fa8:	a6 17       	cp	r26, r22
    2faa:	b7 07       	cpc	r27, r23
    2fac:	10 f0       	brcs	.+4      	; 0x2fb2 <__udivmodhi4_ep>
    2fae:	a6 1b       	sub	r26, r22
    2fb0:	b7 0b       	sbc	r27, r23

00002fb2 <__udivmodhi4_ep>:
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	5a 95       	dec	r21
    2fb8:	a9 f7       	brne	.-22     	; 0x2fa4 <__udivmodhi4_loop>
    2fba:	80 95       	com	r24
    2fbc:	90 95       	com	r25
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	08 95       	ret

00002fc4 <do_rand>:
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e8 ee       	ldi	r30, 0xE8	; 232
    2fca:	f7 e1       	ldi	r31, 0x17	; 23
    2fcc:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__prologue_saves__+0x10>
    2fd0:	ec 01       	movw	r28, r24
    2fd2:	a8 80       	ld	r10, Y
    2fd4:	b9 80       	ldd	r11, Y+1	; 0x01
    2fd6:	ca 80       	ldd	r12, Y+2	; 0x02
    2fd8:	db 80       	ldd	r13, Y+3	; 0x03
    2fda:	a1 14       	cp	r10, r1
    2fdc:	b1 04       	cpc	r11, r1
    2fde:	c1 04       	cpc	r12, r1
    2fe0:	d1 04       	cpc	r13, r1
    2fe2:	41 f4       	brne	.+16     	; 0x2ff4 <do_rand+0x30>
    2fe4:	84 e2       	ldi	r24, 0x24	; 36
    2fe6:	a8 2e       	mov	r10, r24
    2fe8:	89 ed       	ldi	r24, 0xD9	; 217
    2fea:	b8 2e       	mov	r11, r24
    2fec:	8b e5       	ldi	r24, 0x5B	; 91
    2fee:	c8 2e       	mov	r12, r24
    2ff0:	87 e0       	ldi	r24, 0x07	; 7
    2ff2:	d8 2e       	mov	r13, r24
    2ff4:	c6 01       	movw	r24, r12
    2ff6:	b5 01       	movw	r22, r10
    2ff8:	2d e1       	ldi	r18, 0x1D	; 29
    2ffa:	33 ef       	ldi	r19, 0xF3	; 243
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__divmodsi4>
    3004:	27 ea       	ldi	r18, 0xA7	; 167
    3006:	31 e4       	ldi	r19, 0x41	; 65
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__mulsi3>
    3010:	7b 01       	movw	r14, r22
    3012:	8c 01       	movw	r16, r24
    3014:	c6 01       	movw	r24, r12
    3016:	b5 01       	movw	r22, r10
    3018:	2d e1       	ldi	r18, 0x1D	; 29
    301a:	33 ef       	ldi	r19, 0xF3	; 243
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__divmodsi4>
    3024:	ca 01       	movw	r24, r20
    3026:	b9 01       	movw	r22, r18
    3028:	2c ee       	ldi	r18, 0xEC	; 236
    302a:	34 ef       	ldi	r19, 0xF4	; 244
    302c:	4f ef       	ldi	r20, 0xFF	; 255
    302e:	5f ef       	ldi	r21, 0xFF	; 255
    3030:	0e 94 ed 1a 	call	0x35da	; 0x35da <__mulsi3>
    3034:	6e 0d       	add	r22, r14
    3036:	7f 1d       	adc	r23, r15
    3038:	80 1f       	adc	r24, r16
    303a:	91 1f       	adc	r25, r17
    303c:	97 ff       	sbrs	r25, 7
    303e:	04 c0       	rjmp	.+8      	; 0x3048 <do_rand+0x84>
    3040:	61 50       	subi	r22, 0x01	; 1
    3042:	70 40       	sbci	r23, 0x00	; 0
    3044:	80 40       	sbci	r24, 0x00	; 0
    3046:	90 48       	sbci	r25, 0x80	; 128
    3048:	68 83       	st	Y, r22
    304a:	79 83       	std	Y+1, r23	; 0x01
    304c:	8a 83       	std	Y+2, r24	; 0x02
    304e:	9b 83       	std	Y+3, r25	; 0x03
    3050:	9b 01       	movw	r18, r22
    3052:	3f 77       	andi	r19, 0x7F	; 127
    3054:	c9 01       	movw	r24, r18
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	ea e0       	ldi	r30, 0x0A	; 10
    305c:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__epilogue_restores__+0x10>

00003060 <rand_r>:
    3060:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <do_rand>
    3064:	08 95       	ret

00003066 <rand>:
    3066:	84 e6       	ldi	r24, 0x64	; 100
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <do_rand>
    306e:	08 95       	ret

00003070 <srand>:
    3070:	a0 e0       	ldi	r26, 0x00	; 0
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	80 93 64 01 	sts	0x0164, r24
    3078:	90 93 65 01 	sts	0x0165, r25
    307c:	a0 93 66 01 	sts	0x0166, r26
    3080:	b0 93 67 01 	sts	0x0167, r27
    3084:	08 95       	ret

00003086 <memcpy_P>:
    3086:	fb 01       	movw	r30, r22
    3088:	dc 01       	movw	r26, r24
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <memcpy_P+0xa>
    308c:	05 90       	lpm	r0, Z+
    308e:	0d 92       	st	X+, r0
    3090:	41 50       	subi	r20, 0x01	; 1
    3092:	50 40       	sbci	r21, 0x00	; 0
    3094:	d8 f7       	brcc	.-10     	; 0x308c <memcpy_P+0x6>
    3096:	08 95       	ret

00003098 <sprintf>:
    3098:	ae e0       	ldi	r26, 0x0E	; 14
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e2 e5       	ldi	r30, 0x52	; 82
    309e:	f8 e1       	ldi	r31, 0x18	; 24
    30a0:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__prologue_saves__+0x1c>
    30a4:	0d 89       	ldd	r16, Y+21	; 0x15
    30a6:	1e 89       	ldd	r17, Y+22	; 0x16
    30a8:	86 e0       	ldi	r24, 0x06	; 6
    30aa:	8c 83       	std	Y+4, r24	; 0x04
    30ac:	1a 83       	std	Y+2, r17	; 0x02
    30ae:	09 83       	std	Y+1, r16	; 0x01
    30b0:	8f ef       	ldi	r24, 0xFF	; 255
    30b2:	9f e7       	ldi	r25, 0x7F	; 127
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	9e 01       	movw	r18, r28
    30ba:	27 5e       	subi	r18, 0xE7	; 231
    30bc:	3f 4f       	sbci	r19, 0xFF	; 255
    30be:	ce 01       	movw	r24, r28
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	6f 89       	ldd	r22, Y+23	; 0x17
    30c4:	78 8d       	ldd	r23, Y+24	; 0x18
    30c6:	a9 01       	movw	r20, r18
    30c8:	0e 94 70 18 	call	0x30e0	; 0x30e0 <vfprintf>
    30cc:	2f 81       	ldd	r18, Y+7	; 0x07
    30ce:	38 85       	ldd	r19, Y+8	; 0x08
    30d0:	02 0f       	add	r16, r18
    30d2:	13 1f       	adc	r17, r19
    30d4:	f8 01       	movw	r30, r16
    30d6:	10 82       	st	Z, r1
    30d8:	2e 96       	adiw	r28, 0x0e	; 14
    30da:	e4 e0       	ldi	r30, 0x04	; 4
    30dc:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__epilogue_restores__+0x1c>

000030e0 <vfprintf>:
    30e0:	ab e0       	ldi	r26, 0x0B	; 11
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e6 e7       	ldi	r30, 0x76	; 118
    30e6:	f8 e1       	ldi	r31, 0x18	; 24
    30e8:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__prologue_saves__>
    30ec:	3c 01       	movw	r6, r24
    30ee:	2b 01       	movw	r4, r22
    30f0:	5a 01       	movw	r10, r20
    30f2:	fc 01       	movw	r30, r24
    30f4:	17 82       	std	Z+7, r1	; 0x07
    30f6:	16 82       	std	Z+6, r1	; 0x06
    30f8:	83 81       	ldd	r24, Z+3	; 0x03
    30fa:	81 fd       	sbrc	r24, 1
    30fc:	03 c0       	rjmp	.+6      	; 0x3104 <vfprintf+0x24>
    30fe:	6f ef       	ldi	r22, 0xFF	; 255
    3100:	7f ef       	ldi	r23, 0xFF	; 255
    3102:	c6 c1       	rjmp	.+908    	; 0x3490 <vfprintf+0x3b0>
    3104:	9a e0       	ldi	r25, 0x0A	; 10
    3106:	89 2e       	mov	r8, r25
    3108:	1e 01       	movw	r2, r28
    310a:	08 94       	sec
    310c:	21 1c       	adc	r2, r1
    310e:	31 1c       	adc	r3, r1
    3110:	f3 01       	movw	r30, r6
    3112:	23 81       	ldd	r18, Z+3	; 0x03
    3114:	f2 01       	movw	r30, r4
    3116:	23 fd       	sbrc	r18, 3
    3118:	85 91       	lpm	r24, Z+
    311a:	23 ff       	sbrs	r18, 3
    311c:	81 91       	ld	r24, Z+
    311e:	2f 01       	movw	r4, r30
    3120:	88 23       	and	r24, r24
    3122:	09 f4       	brne	.+2      	; 0x3126 <vfprintf+0x46>
    3124:	b2 c1       	rjmp	.+868    	; 0x348a <vfprintf+0x3aa>
    3126:	85 32       	cpi	r24, 0x25	; 37
    3128:	39 f4       	brne	.+14     	; 0x3138 <vfprintf+0x58>
    312a:	23 fd       	sbrc	r18, 3
    312c:	85 91       	lpm	r24, Z+
    312e:	23 ff       	sbrs	r18, 3
    3130:	81 91       	ld	r24, Z+
    3132:	2f 01       	movw	r4, r30
    3134:	85 32       	cpi	r24, 0x25	; 37
    3136:	29 f4       	brne	.+10     	; 0x3142 <vfprintf+0x62>
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	b3 01       	movw	r22, r6
    313c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    3140:	e7 cf       	rjmp	.-50     	; 0x3110 <vfprintf+0x30>
    3142:	98 2f       	mov	r25, r24
    3144:	ff 24       	eor	r15, r15
    3146:	ee 24       	eor	r14, r14
    3148:	99 24       	eor	r9, r9
    314a:	ff e1       	ldi	r31, 0x1F	; 31
    314c:	ff 15       	cp	r31, r15
    314e:	d0 f0       	brcs	.+52     	; 0x3184 <vfprintf+0xa4>
    3150:	9b 32       	cpi	r25, 0x2B	; 43
    3152:	69 f0       	breq	.+26     	; 0x316e <vfprintf+0x8e>
    3154:	9c 32       	cpi	r25, 0x2C	; 44
    3156:	28 f4       	brcc	.+10     	; 0x3162 <vfprintf+0x82>
    3158:	90 32       	cpi	r25, 0x20	; 32
    315a:	59 f0       	breq	.+22     	; 0x3172 <vfprintf+0x92>
    315c:	93 32       	cpi	r25, 0x23	; 35
    315e:	91 f4       	brne	.+36     	; 0x3184 <vfprintf+0xa4>
    3160:	0e c0       	rjmp	.+28     	; 0x317e <vfprintf+0x9e>
    3162:	9d 32       	cpi	r25, 0x2D	; 45
    3164:	49 f0       	breq	.+18     	; 0x3178 <vfprintf+0x98>
    3166:	90 33       	cpi	r25, 0x30	; 48
    3168:	69 f4       	brne	.+26     	; 0x3184 <vfprintf+0xa4>
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	24 c0       	rjmp	.+72     	; 0x31b6 <vfprintf+0xd6>
    316e:	52 e0       	ldi	r21, 0x02	; 2
    3170:	f5 2a       	or	r15, r21
    3172:	84 e0       	ldi	r24, 0x04	; 4
    3174:	f8 2a       	or	r15, r24
    3176:	28 c0       	rjmp	.+80     	; 0x31c8 <vfprintf+0xe8>
    3178:	98 e0       	ldi	r25, 0x08	; 8
    317a:	f9 2a       	or	r15, r25
    317c:	25 c0       	rjmp	.+74     	; 0x31c8 <vfprintf+0xe8>
    317e:	e0 e1       	ldi	r30, 0x10	; 16
    3180:	fe 2a       	or	r15, r30
    3182:	22 c0       	rjmp	.+68     	; 0x31c8 <vfprintf+0xe8>
    3184:	f7 fc       	sbrc	r15, 7
    3186:	29 c0       	rjmp	.+82     	; 0x31da <vfprintf+0xfa>
    3188:	89 2f       	mov	r24, r25
    318a:	80 53       	subi	r24, 0x30	; 48
    318c:	8a 30       	cpi	r24, 0x0A	; 10
    318e:	70 f4       	brcc	.+28     	; 0x31ac <vfprintf+0xcc>
    3190:	f6 fe       	sbrs	r15, 6
    3192:	05 c0       	rjmp	.+10     	; 0x319e <vfprintf+0xbe>
    3194:	98 9c       	mul	r9, r8
    3196:	90 2c       	mov	r9, r0
    3198:	11 24       	eor	r1, r1
    319a:	98 0e       	add	r9, r24
    319c:	15 c0       	rjmp	.+42     	; 0x31c8 <vfprintf+0xe8>
    319e:	e8 9c       	mul	r14, r8
    31a0:	e0 2c       	mov	r14, r0
    31a2:	11 24       	eor	r1, r1
    31a4:	e8 0e       	add	r14, r24
    31a6:	f0 e2       	ldi	r31, 0x20	; 32
    31a8:	ff 2a       	or	r15, r31
    31aa:	0e c0       	rjmp	.+28     	; 0x31c8 <vfprintf+0xe8>
    31ac:	9e 32       	cpi	r25, 0x2E	; 46
    31ae:	29 f4       	brne	.+10     	; 0x31ba <vfprintf+0xda>
    31b0:	f6 fc       	sbrc	r15, 6
    31b2:	6b c1       	rjmp	.+726    	; 0x348a <vfprintf+0x3aa>
    31b4:	40 e4       	ldi	r20, 0x40	; 64
    31b6:	f4 2a       	or	r15, r20
    31b8:	07 c0       	rjmp	.+14     	; 0x31c8 <vfprintf+0xe8>
    31ba:	9c 36       	cpi	r25, 0x6C	; 108
    31bc:	19 f4       	brne	.+6      	; 0x31c4 <vfprintf+0xe4>
    31be:	50 e8       	ldi	r21, 0x80	; 128
    31c0:	f5 2a       	or	r15, r21
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0xe8>
    31c4:	98 36       	cpi	r25, 0x68	; 104
    31c6:	49 f4       	brne	.+18     	; 0x31da <vfprintf+0xfa>
    31c8:	f2 01       	movw	r30, r4
    31ca:	23 fd       	sbrc	r18, 3
    31cc:	95 91       	lpm	r25, Z+
    31ce:	23 ff       	sbrs	r18, 3
    31d0:	91 91       	ld	r25, Z+
    31d2:	2f 01       	movw	r4, r30
    31d4:	99 23       	and	r25, r25
    31d6:	09 f0       	breq	.+2      	; 0x31da <vfprintf+0xfa>
    31d8:	b8 cf       	rjmp	.-144    	; 0x314a <vfprintf+0x6a>
    31da:	89 2f       	mov	r24, r25
    31dc:	85 54       	subi	r24, 0x45	; 69
    31de:	83 30       	cpi	r24, 0x03	; 3
    31e0:	18 f0       	brcs	.+6      	; 0x31e8 <vfprintf+0x108>
    31e2:	80 52       	subi	r24, 0x20	; 32
    31e4:	83 30       	cpi	r24, 0x03	; 3
    31e6:	38 f4       	brcc	.+14     	; 0x31f6 <vfprintf+0x116>
    31e8:	44 e0       	ldi	r20, 0x04	; 4
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	a4 0e       	add	r10, r20
    31ee:	b5 1e       	adc	r11, r21
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	59 83       	std	Y+1, r21	; 0x01
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <vfprintf+0x134>
    31f6:	93 36       	cpi	r25, 0x63	; 99
    31f8:	31 f0       	breq	.+12     	; 0x3206 <vfprintf+0x126>
    31fa:	93 37       	cpi	r25, 0x73	; 115
    31fc:	79 f0       	breq	.+30     	; 0x321c <vfprintf+0x13c>
    31fe:	93 35       	cpi	r25, 0x53	; 83
    3200:	09 f0       	breq	.+2      	; 0x3204 <vfprintf+0x124>
    3202:	56 c0       	rjmp	.+172    	; 0x32b0 <vfprintf+0x1d0>
    3204:	20 c0       	rjmp	.+64     	; 0x3246 <vfprintf+0x166>
    3206:	f5 01       	movw	r30, r10
    3208:	80 81       	ld	r24, Z
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	42 e0       	ldi	r20, 0x02	; 2
    320e:	50 e0       	ldi	r21, 0x00	; 0
    3210:	a4 0e       	add	r10, r20
    3212:	b5 1e       	adc	r11, r21
    3214:	61 01       	movw	r12, r2
    3216:	01 e0       	ldi	r16, 0x01	; 1
    3218:	10 e0       	ldi	r17, 0x00	; 0
    321a:	12 c0       	rjmp	.+36     	; 0x3240 <vfprintf+0x160>
    321c:	f5 01       	movw	r30, r10
    321e:	c0 80       	ld	r12, Z
    3220:	d1 80       	ldd	r13, Z+1	; 0x01
    3222:	f6 fc       	sbrc	r15, 6
    3224:	03 c0       	rjmp	.+6      	; 0x322c <vfprintf+0x14c>
    3226:	6f ef       	ldi	r22, 0xFF	; 255
    3228:	7f ef       	ldi	r23, 0xFF	; 255
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0x150>
    322c:	69 2d       	mov	r22, r9
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	42 e0       	ldi	r20, 0x02	; 2
    3232:	50 e0       	ldi	r21, 0x00	; 0
    3234:	a4 0e       	add	r10, r20
    3236:	b5 1e       	adc	r11, r21
    3238:	c6 01       	movw	r24, r12
    323a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strnlen>
    323e:	8c 01       	movw	r16, r24
    3240:	5f e7       	ldi	r21, 0x7F	; 127
    3242:	f5 22       	and	r15, r21
    3244:	14 c0       	rjmp	.+40     	; 0x326e <vfprintf+0x18e>
    3246:	f5 01       	movw	r30, r10
    3248:	c0 80       	ld	r12, Z
    324a:	d1 80       	ldd	r13, Z+1	; 0x01
    324c:	f6 fc       	sbrc	r15, 6
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <vfprintf+0x176>
    3250:	6f ef       	ldi	r22, 0xFF	; 255
    3252:	7f ef       	ldi	r23, 0xFF	; 255
    3254:	02 c0       	rjmp	.+4      	; 0x325a <vfprintf+0x17a>
    3256:	69 2d       	mov	r22, r9
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	42 e0       	ldi	r20, 0x02	; 2
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	a4 0e       	add	r10, r20
    3260:	b5 1e       	adc	r11, r21
    3262:	c6 01       	movw	r24, r12
    3264:	0e 94 4d 1a 	call	0x349a	; 0x349a <strnlen_P>
    3268:	8c 01       	movw	r16, r24
    326a:	50 e8       	ldi	r21, 0x80	; 128
    326c:	f5 2a       	or	r15, r21
    326e:	f3 fe       	sbrs	r15, 3
    3270:	07 c0       	rjmp	.+14     	; 0x3280 <vfprintf+0x1a0>
    3272:	1a c0       	rjmp	.+52     	; 0x32a8 <vfprintf+0x1c8>
    3274:	80 e2       	ldi	r24, 0x20	; 32
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	b3 01       	movw	r22, r6
    327a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    327e:	ea 94       	dec	r14
    3280:	8e 2d       	mov	r24, r14
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	08 17       	cp	r16, r24
    3286:	19 07       	cpc	r17, r25
    3288:	a8 f3       	brcs	.-22     	; 0x3274 <vfprintf+0x194>
    328a:	0e c0       	rjmp	.+28     	; 0x32a8 <vfprintf+0x1c8>
    328c:	f6 01       	movw	r30, r12
    328e:	f7 fc       	sbrc	r15, 7
    3290:	85 91       	lpm	r24, Z+
    3292:	f7 fe       	sbrs	r15, 7
    3294:	81 91       	ld	r24, Z+
    3296:	6f 01       	movw	r12, r30
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	b3 01       	movw	r22, r6
    329c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    32a0:	e1 10       	cpse	r14, r1
    32a2:	ea 94       	dec	r14
    32a4:	01 50       	subi	r16, 0x01	; 1
    32a6:	10 40       	sbci	r17, 0x00	; 0
    32a8:	01 15       	cp	r16, r1
    32aa:	11 05       	cpc	r17, r1
    32ac:	79 f7       	brne	.-34     	; 0x328c <vfprintf+0x1ac>
    32ae:	ea c0       	rjmp	.+468    	; 0x3484 <vfprintf+0x3a4>
    32b0:	94 36       	cpi	r25, 0x64	; 100
    32b2:	11 f0       	breq	.+4      	; 0x32b8 <vfprintf+0x1d8>
    32b4:	99 36       	cpi	r25, 0x69	; 105
    32b6:	69 f5       	brne	.+90     	; 0x3312 <vfprintf+0x232>
    32b8:	f7 fe       	sbrs	r15, 7
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <vfprintf+0x1ec>
    32bc:	f5 01       	movw	r30, r10
    32be:	20 81       	ld	r18, Z
    32c0:	31 81       	ldd	r19, Z+1	; 0x01
    32c2:	42 81       	ldd	r20, Z+2	; 0x02
    32c4:	53 81       	ldd	r21, Z+3	; 0x03
    32c6:	84 e0       	ldi	r24, 0x04	; 4
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0a c0       	rjmp	.+20     	; 0x32e0 <vfprintf+0x200>
    32cc:	f5 01       	movw	r30, r10
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	9c 01       	movw	r18, r24
    32d4:	44 27       	eor	r20, r20
    32d6:	37 fd       	sbrc	r19, 7
    32d8:	40 95       	com	r20
    32da:	54 2f       	mov	r21, r20
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a8 0e       	add	r10, r24
    32e2:	b9 1e       	adc	r11, r25
    32e4:	9f e6       	ldi	r25, 0x6F	; 111
    32e6:	f9 22       	and	r15, r25
    32e8:	57 ff       	sbrs	r21, 7
    32ea:	09 c0       	rjmp	.+18     	; 0x32fe <vfprintf+0x21e>
    32ec:	50 95       	com	r21
    32ee:	40 95       	com	r20
    32f0:	30 95       	com	r19
    32f2:	21 95       	neg	r18
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	4f 4f       	sbci	r20, 0xFF	; 255
    32f8:	5f 4f       	sbci	r21, 0xFF	; 255
    32fa:	e0 e8       	ldi	r30, 0x80	; 128
    32fc:	fe 2a       	or	r15, r30
    32fe:	ca 01       	movw	r24, r20
    3300:	b9 01       	movw	r22, r18
    3302:	a1 01       	movw	r20, r2
    3304:	2a e0       	ldi	r18, 0x0A	; 10
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	0e 94 8f 1a 	call	0x351e	; 0x351e <__ultoa_invert>
    330c:	d8 2e       	mov	r13, r24
    330e:	d2 18       	sub	r13, r2
    3310:	40 c0       	rjmp	.+128    	; 0x3392 <vfprintf+0x2b2>
    3312:	95 37       	cpi	r25, 0x75	; 117
    3314:	29 f4       	brne	.+10     	; 0x3320 <vfprintf+0x240>
    3316:	1f 2d       	mov	r17, r15
    3318:	1f 7e       	andi	r17, 0xEF	; 239
    331a:	2a e0       	ldi	r18, 0x0A	; 10
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	1d c0       	rjmp	.+58     	; 0x335a <vfprintf+0x27a>
    3320:	1f 2d       	mov	r17, r15
    3322:	19 7f       	andi	r17, 0xF9	; 249
    3324:	9f 36       	cpi	r25, 0x6F	; 111
    3326:	61 f0       	breq	.+24     	; 0x3340 <vfprintf+0x260>
    3328:	90 37       	cpi	r25, 0x70	; 112
    332a:	20 f4       	brcc	.+8      	; 0x3334 <vfprintf+0x254>
    332c:	98 35       	cpi	r25, 0x58	; 88
    332e:	09 f0       	breq	.+2      	; 0x3332 <vfprintf+0x252>
    3330:	ac c0       	rjmp	.+344    	; 0x348a <vfprintf+0x3aa>
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <vfprintf+0x272>
    3334:	90 37       	cpi	r25, 0x70	; 112
    3336:	39 f0       	breq	.+14     	; 0x3346 <vfprintf+0x266>
    3338:	98 37       	cpi	r25, 0x78	; 120
    333a:	09 f0       	breq	.+2      	; 0x333e <vfprintf+0x25e>
    333c:	a6 c0       	rjmp	.+332    	; 0x348a <vfprintf+0x3aa>
    333e:	04 c0       	rjmp	.+8      	; 0x3348 <vfprintf+0x268>
    3340:	28 e0       	ldi	r18, 0x08	; 8
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	0a c0       	rjmp	.+20     	; 0x335a <vfprintf+0x27a>
    3346:	10 61       	ori	r17, 0x10	; 16
    3348:	14 fd       	sbrc	r17, 4
    334a:	14 60       	ori	r17, 0x04	; 4
    334c:	20 e1       	ldi	r18, 0x10	; 16
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	04 c0       	rjmp	.+8      	; 0x335a <vfprintf+0x27a>
    3352:	14 fd       	sbrc	r17, 4
    3354:	16 60       	ori	r17, 0x06	; 6
    3356:	20 e1       	ldi	r18, 0x10	; 16
    3358:	32 e0       	ldi	r19, 0x02	; 2
    335a:	17 ff       	sbrs	r17, 7
    335c:	08 c0       	rjmp	.+16     	; 0x336e <vfprintf+0x28e>
    335e:	f5 01       	movw	r30, r10
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	44 e0       	ldi	r20, 0x04	; 4
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	08 c0       	rjmp	.+16     	; 0x337e <vfprintf+0x29e>
    336e:	f5 01       	movw	r30, r10
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	bc 01       	movw	r22, r24
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	42 e0       	ldi	r20, 0x02	; 2
    337c:	50 e0       	ldi	r21, 0x00	; 0
    337e:	a4 0e       	add	r10, r20
    3380:	b5 1e       	adc	r11, r21
    3382:	a1 01       	movw	r20, r2
    3384:	0e 94 8f 1a 	call	0x351e	; 0x351e <__ultoa_invert>
    3388:	d8 2e       	mov	r13, r24
    338a:	d2 18       	sub	r13, r2
    338c:	8f e7       	ldi	r24, 0x7F	; 127
    338e:	f8 2e       	mov	r15, r24
    3390:	f1 22       	and	r15, r17
    3392:	f6 fe       	sbrs	r15, 6
    3394:	0b c0       	rjmp	.+22     	; 0x33ac <vfprintf+0x2cc>
    3396:	5e ef       	ldi	r21, 0xFE	; 254
    3398:	f5 22       	and	r15, r21
    339a:	d9 14       	cp	r13, r9
    339c:	38 f4       	brcc	.+14     	; 0x33ac <vfprintf+0x2cc>
    339e:	f4 fe       	sbrs	r15, 4
    33a0:	07 c0       	rjmp	.+14     	; 0x33b0 <vfprintf+0x2d0>
    33a2:	f2 fc       	sbrc	r15, 2
    33a4:	05 c0       	rjmp	.+10     	; 0x33b0 <vfprintf+0x2d0>
    33a6:	8f ee       	ldi	r24, 0xEF	; 239
    33a8:	f8 22       	and	r15, r24
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <vfprintf+0x2d0>
    33ac:	1d 2d       	mov	r17, r13
    33ae:	01 c0       	rjmp	.+2      	; 0x33b2 <vfprintf+0x2d2>
    33b0:	19 2d       	mov	r17, r9
    33b2:	f4 fe       	sbrs	r15, 4
    33b4:	0d c0       	rjmp	.+26     	; 0x33d0 <vfprintf+0x2f0>
    33b6:	fe 01       	movw	r30, r28
    33b8:	ed 0d       	add	r30, r13
    33ba:	f1 1d       	adc	r31, r1
    33bc:	80 81       	ld	r24, Z
    33be:	80 33       	cpi	r24, 0x30	; 48
    33c0:	19 f4       	brne	.+6      	; 0x33c8 <vfprintf+0x2e8>
    33c2:	99 ee       	ldi	r25, 0xE9	; 233
    33c4:	f9 22       	and	r15, r25
    33c6:	08 c0       	rjmp	.+16     	; 0x33d8 <vfprintf+0x2f8>
    33c8:	1f 5f       	subi	r17, 0xFF	; 255
    33ca:	f2 fe       	sbrs	r15, 2
    33cc:	05 c0       	rjmp	.+10     	; 0x33d8 <vfprintf+0x2f8>
    33ce:	03 c0       	rjmp	.+6      	; 0x33d6 <vfprintf+0x2f6>
    33d0:	8f 2d       	mov	r24, r15
    33d2:	86 78       	andi	r24, 0x86	; 134
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <vfprintf+0x2f8>
    33d6:	1f 5f       	subi	r17, 0xFF	; 255
    33d8:	0f 2d       	mov	r16, r15
    33da:	f3 fc       	sbrc	r15, 3
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <vfprintf+0x326>
    33de:	f0 fe       	sbrs	r15, 0
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <vfprintf+0x320>
    33e2:	1e 15       	cp	r17, r14
    33e4:	10 f0       	brcs	.+4      	; 0x33ea <vfprintf+0x30a>
    33e6:	9d 2c       	mov	r9, r13
    33e8:	0b c0       	rjmp	.+22     	; 0x3400 <vfprintf+0x320>
    33ea:	9d 2c       	mov	r9, r13
    33ec:	9e 0c       	add	r9, r14
    33ee:	91 1a       	sub	r9, r17
    33f0:	1e 2d       	mov	r17, r14
    33f2:	06 c0       	rjmp	.+12     	; 0x3400 <vfprintf+0x320>
    33f4:	80 e2       	ldi	r24, 0x20	; 32
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	b3 01       	movw	r22, r6
    33fa:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    33fe:	1f 5f       	subi	r17, 0xFF	; 255
    3400:	1e 15       	cp	r17, r14
    3402:	c0 f3       	brcs	.-16     	; 0x33f4 <vfprintf+0x314>
    3404:	04 c0       	rjmp	.+8      	; 0x340e <vfprintf+0x32e>
    3406:	1e 15       	cp	r17, r14
    3408:	10 f4       	brcc	.+4      	; 0x340e <vfprintf+0x32e>
    340a:	e1 1a       	sub	r14, r17
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <vfprintf+0x330>
    340e:	ee 24       	eor	r14, r14
    3410:	04 ff       	sbrs	r16, 4
    3412:	0f c0       	rjmp	.+30     	; 0x3432 <vfprintf+0x352>
    3414:	80 e3       	ldi	r24, 0x30	; 48
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	b3 01       	movw	r22, r6
    341a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    341e:	02 ff       	sbrs	r16, 2
    3420:	1d c0       	rjmp	.+58     	; 0x345c <vfprintf+0x37c>
    3422:	01 fd       	sbrc	r16, 1
    3424:	03 c0       	rjmp	.+6      	; 0x342c <vfprintf+0x34c>
    3426:	88 e7       	ldi	r24, 0x78	; 120
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <vfprintf+0x368>
    342c:	88 e5       	ldi	r24, 0x58	; 88
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0b c0       	rjmp	.+22     	; 0x3448 <vfprintf+0x368>
    3432:	80 2f       	mov	r24, r16
    3434:	86 78       	andi	r24, 0x86	; 134
    3436:	91 f0       	breq	.+36     	; 0x345c <vfprintf+0x37c>
    3438:	01 ff       	sbrs	r16, 1
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <vfprintf+0x360>
    343c:	8b e2       	ldi	r24, 0x2B	; 43
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <vfprintf+0x362>
    3440:	80 e2       	ldi	r24, 0x20	; 32
    3442:	f7 fc       	sbrc	r15, 7
    3444:	8d e2       	ldi	r24, 0x2D	; 45
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	b3 01       	movw	r22, r6
    344a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    344e:	06 c0       	rjmp	.+12     	; 0x345c <vfprintf+0x37c>
    3450:	80 e3       	ldi	r24, 0x30	; 48
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	b3 01       	movw	r22, r6
    3456:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    345a:	9a 94       	dec	r9
    345c:	d9 14       	cp	r13, r9
    345e:	c0 f3       	brcs	.-16     	; 0x3450 <vfprintf+0x370>
    3460:	da 94       	dec	r13
    3462:	f1 01       	movw	r30, r2
    3464:	ed 0d       	add	r30, r13
    3466:	f1 1d       	adc	r31, r1
    3468:	80 81       	ld	r24, Z
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	b3 01       	movw	r22, r6
    346e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    3472:	dd 20       	and	r13, r13
    3474:	a9 f7       	brne	.-22     	; 0x3460 <vfprintf+0x380>
    3476:	06 c0       	rjmp	.+12     	; 0x3484 <vfprintf+0x3a4>
    3478:	80 e2       	ldi	r24, 0x20	; 32
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	b3 01       	movw	r22, r6
    347e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <fputc>
    3482:	ea 94       	dec	r14
    3484:	ee 20       	and	r14, r14
    3486:	c1 f7       	brne	.-16     	; 0x3478 <vfprintf+0x398>
    3488:	43 ce       	rjmp	.-890    	; 0x3110 <vfprintf+0x30>
    348a:	f3 01       	movw	r30, r6
    348c:	66 81       	ldd	r22, Z+6	; 0x06
    348e:	77 81       	ldd	r23, Z+7	; 0x07
    3490:	cb 01       	movw	r24, r22
    3492:	2b 96       	adiw	r28, 0x0b	; 11
    3494:	e2 e1       	ldi	r30, 0x12	; 18
    3496:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__epilogue_restores__>

0000349a <strnlen_P>:
    349a:	fc 01       	movw	r30, r24
    349c:	05 90       	lpm	r0, Z+
    349e:	61 50       	subi	r22, 0x01	; 1
    34a0:	70 40       	sbci	r23, 0x00	; 0
    34a2:	01 10       	cpse	r0, r1
    34a4:	d8 f7       	brcc	.-10     	; 0x349c <strnlen_P+0x2>
    34a6:	80 95       	com	r24
    34a8:	90 95       	com	r25
    34aa:	8e 0f       	add	r24, r30
    34ac:	9f 1f       	adc	r25, r31
    34ae:	08 95       	ret

000034b0 <strnlen>:
    34b0:	fc 01       	movw	r30, r24
    34b2:	61 50       	subi	r22, 0x01	; 1
    34b4:	70 40       	sbci	r23, 0x00	; 0
    34b6:	01 90       	ld	r0, Z+
    34b8:	01 10       	cpse	r0, r1
    34ba:	d8 f7       	brcc	.-10     	; 0x34b2 <strnlen+0x2>
    34bc:	80 95       	com	r24
    34be:	90 95       	com	r25
    34c0:	8e 0f       	add	r24, r30
    34c2:	9f 1f       	adc	r25, r31
    34c4:	08 95       	ret

000034c6 <fputc>:
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	8c 01       	movw	r16, r24
    34d0:	eb 01       	movw	r28, r22
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	81 ff       	sbrs	r24, 1
    34d6:	1b c0       	rjmp	.+54     	; 0x350e <fputc+0x48>
    34d8:	82 ff       	sbrs	r24, 2
    34da:	0d c0       	rjmp	.+26     	; 0x34f6 <fputc+0x30>
    34dc:	2e 81       	ldd	r18, Y+6	; 0x06
    34de:	3f 81       	ldd	r19, Y+7	; 0x07
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	9d 81       	ldd	r25, Y+5	; 0x05
    34e4:	28 17       	cp	r18, r24
    34e6:	39 07       	cpc	r19, r25
    34e8:	64 f4       	brge	.+24     	; 0x3502 <fputc+0x3c>
    34ea:	e8 81       	ld	r30, Y
    34ec:	f9 81       	ldd	r31, Y+1	; 0x01
    34ee:	01 93       	st	Z+, r16
    34f0:	f9 83       	std	Y+1, r31	; 0x01
    34f2:	e8 83       	st	Y, r30
    34f4:	06 c0       	rjmp	.+12     	; 0x3502 <fputc+0x3c>
    34f6:	e8 85       	ldd	r30, Y+8	; 0x08
    34f8:	f9 85       	ldd	r31, Y+9	; 0x09
    34fa:	80 2f       	mov	r24, r16
    34fc:	09 95       	icall
    34fe:	89 2b       	or	r24, r25
    3500:	31 f4       	brne	.+12     	; 0x350e <fputc+0x48>
    3502:	8e 81       	ldd	r24, Y+6	; 0x06
    3504:	9f 81       	ldd	r25, Y+7	; 0x07
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	9f 83       	std	Y+7, r25	; 0x07
    350a:	8e 83       	std	Y+6, r24	; 0x06
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <fputc+0x4c>
    350e:	0f ef       	ldi	r16, 0xFF	; 255
    3510:	1f ef       	ldi	r17, 0xFF	; 255
    3512:	c8 01       	movw	r24, r16
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	08 95       	ret

0000351e <__ultoa_invert>:
    351e:	fa 01       	movw	r30, r20
    3520:	aa 27       	eor	r26, r26
    3522:	28 30       	cpi	r18, 0x08	; 8
    3524:	51 f1       	breq	.+84     	; 0x357a <__ultoa_invert+0x5c>
    3526:	20 31       	cpi	r18, 0x10	; 16
    3528:	81 f1       	breq	.+96     	; 0x358a <__ultoa_invert+0x6c>
    352a:	e8 94       	clt
    352c:	6f 93       	push	r22
    352e:	6e 7f       	andi	r22, 0xFE	; 254
    3530:	6e 5f       	subi	r22, 0xFE	; 254
    3532:	7f 4f       	sbci	r23, 0xFF	; 255
    3534:	8f 4f       	sbci	r24, 0xFF	; 255
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	af 4f       	sbci	r26, 0xFF	; 255
    353a:	b1 e0       	ldi	r27, 0x01	; 1
    353c:	3e d0       	rcall	.+124    	; 0x35ba <__ultoa_invert+0x9c>
    353e:	b4 e0       	ldi	r27, 0x04	; 4
    3540:	3c d0       	rcall	.+120    	; 0x35ba <__ultoa_invert+0x9c>
    3542:	67 0f       	add	r22, r23
    3544:	78 1f       	adc	r23, r24
    3546:	89 1f       	adc	r24, r25
    3548:	9a 1f       	adc	r25, r26
    354a:	a1 1d       	adc	r26, r1
    354c:	68 0f       	add	r22, r24
    354e:	79 1f       	adc	r23, r25
    3550:	8a 1f       	adc	r24, r26
    3552:	91 1d       	adc	r25, r1
    3554:	a1 1d       	adc	r26, r1
    3556:	6a 0f       	add	r22, r26
    3558:	71 1d       	adc	r23, r1
    355a:	81 1d       	adc	r24, r1
    355c:	91 1d       	adc	r25, r1
    355e:	a1 1d       	adc	r26, r1
    3560:	20 d0       	rcall	.+64     	; 0x35a2 <__ultoa_invert+0x84>
    3562:	09 f4       	brne	.+2      	; 0x3566 <__ultoa_invert+0x48>
    3564:	68 94       	set
    3566:	3f 91       	pop	r19
    3568:	2a e0       	ldi	r18, 0x0A	; 10
    356a:	26 9f       	mul	r18, r22
    356c:	11 24       	eor	r1, r1
    356e:	30 19       	sub	r19, r0
    3570:	30 5d       	subi	r19, 0xD0	; 208
    3572:	31 93       	st	Z+, r19
    3574:	de f6       	brtc	.-74     	; 0x352c <__ultoa_invert+0xe>
    3576:	cf 01       	movw	r24, r30
    3578:	08 95       	ret
    357a:	46 2f       	mov	r20, r22
    357c:	47 70       	andi	r20, 0x07	; 7
    357e:	40 5d       	subi	r20, 0xD0	; 208
    3580:	41 93       	st	Z+, r20
    3582:	b3 e0       	ldi	r27, 0x03	; 3
    3584:	0f d0       	rcall	.+30     	; 0x35a4 <__ultoa_invert+0x86>
    3586:	c9 f7       	brne	.-14     	; 0x357a <__ultoa_invert+0x5c>
    3588:	f6 cf       	rjmp	.-20     	; 0x3576 <__ultoa_invert+0x58>
    358a:	46 2f       	mov	r20, r22
    358c:	4f 70       	andi	r20, 0x0F	; 15
    358e:	40 5d       	subi	r20, 0xD0	; 208
    3590:	4a 33       	cpi	r20, 0x3A	; 58
    3592:	18 f0       	brcs	.+6      	; 0x359a <__ultoa_invert+0x7c>
    3594:	49 5d       	subi	r20, 0xD9	; 217
    3596:	31 fd       	sbrc	r19, 1
    3598:	40 52       	subi	r20, 0x20	; 32
    359a:	41 93       	st	Z+, r20
    359c:	02 d0       	rcall	.+4      	; 0x35a2 <__ultoa_invert+0x84>
    359e:	a9 f7       	brne	.-22     	; 0x358a <__ultoa_invert+0x6c>
    35a0:	ea cf       	rjmp	.-44     	; 0x3576 <__ultoa_invert+0x58>
    35a2:	b4 e0       	ldi	r27, 0x04	; 4
    35a4:	a6 95       	lsr	r26
    35a6:	97 95       	ror	r25
    35a8:	87 95       	ror	r24
    35aa:	77 95       	ror	r23
    35ac:	67 95       	ror	r22
    35ae:	ba 95       	dec	r27
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__ultoa_invert+0x86>
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	61 05       	cpc	r22, r1
    35b6:	71 05       	cpc	r23, r1
    35b8:	08 95       	ret
    35ba:	9b 01       	movw	r18, r22
    35bc:	ac 01       	movw	r20, r24
    35be:	0a 2e       	mov	r0, r26
    35c0:	06 94       	lsr	r0
    35c2:	57 95       	ror	r21
    35c4:	47 95       	ror	r20
    35c6:	37 95       	ror	r19
    35c8:	27 95       	ror	r18
    35ca:	ba 95       	dec	r27
    35cc:	c9 f7       	brne	.-14     	; 0x35c0 <__ultoa_invert+0xa2>
    35ce:	62 0f       	add	r22, r18
    35d0:	73 1f       	adc	r23, r19
    35d2:	84 1f       	adc	r24, r20
    35d4:	95 1f       	adc	r25, r21
    35d6:	a0 1d       	adc	r26, r0
    35d8:	08 95       	ret

000035da <__mulsi3>:
    35da:	62 9f       	mul	r22, r18
    35dc:	d0 01       	movw	r26, r0
    35de:	73 9f       	mul	r23, r19
    35e0:	f0 01       	movw	r30, r0
    35e2:	82 9f       	mul	r24, r18
    35e4:	e0 0d       	add	r30, r0
    35e6:	f1 1d       	adc	r31, r1
    35e8:	64 9f       	mul	r22, r20
    35ea:	e0 0d       	add	r30, r0
    35ec:	f1 1d       	adc	r31, r1
    35ee:	92 9f       	mul	r25, r18
    35f0:	f0 0d       	add	r31, r0
    35f2:	83 9f       	mul	r24, r19
    35f4:	f0 0d       	add	r31, r0
    35f6:	74 9f       	mul	r23, r20
    35f8:	f0 0d       	add	r31, r0
    35fa:	65 9f       	mul	r22, r21
    35fc:	f0 0d       	add	r31, r0
    35fe:	99 27       	eor	r25, r25
    3600:	72 9f       	mul	r23, r18
    3602:	b0 0d       	add	r27, r0
    3604:	e1 1d       	adc	r30, r1
    3606:	f9 1f       	adc	r31, r25
    3608:	63 9f       	mul	r22, r19
    360a:	b0 0d       	add	r27, r0
    360c:	e1 1d       	adc	r30, r1
    360e:	f9 1f       	adc	r31, r25
    3610:	bd 01       	movw	r22, r26
    3612:	cf 01       	movw	r24, r30
    3614:	11 24       	eor	r1, r1
    3616:	08 95       	ret

00003618 <__divmodsi4>:
    3618:	97 fb       	bst	r25, 7
    361a:	09 2e       	mov	r0, r25
    361c:	05 26       	eor	r0, r21
    361e:	0e d0       	rcall	.+28     	; 0x363c <__divmodsi4_neg1>
    3620:	57 fd       	sbrc	r21, 7
    3622:	04 d0       	rcall	.+8      	; 0x362c <__divmodsi4_neg2>
    3624:	4b d0       	rcall	.+150    	; 0x36bc <__udivmodsi4>
    3626:	0a d0       	rcall	.+20     	; 0x363c <__divmodsi4_neg1>
    3628:	00 1c       	adc	r0, r0
    362a:	38 f4       	brcc	.+14     	; 0x363a <__divmodsi4_exit>

0000362c <__divmodsi4_neg2>:
    362c:	50 95       	com	r21
    362e:	40 95       	com	r20
    3630:	30 95       	com	r19
    3632:	21 95       	neg	r18
    3634:	3f 4f       	sbci	r19, 0xFF	; 255
    3636:	4f 4f       	sbci	r20, 0xFF	; 255
    3638:	5f 4f       	sbci	r21, 0xFF	; 255

0000363a <__divmodsi4_exit>:
    363a:	08 95       	ret

0000363c <__divmodsi4_neg1>:
    363c:	f6 f7       	brtc	.-4      	; 0x363a <__divmodsi4_exit>
    363e:	90 95       	com	r25
    3640:	80 95       	com	r24
    3642:	70 95       	com	r23
    3644:	61 95       	neg	r22
    3646:	7f 4f       	sbci	r23, 0xFF	; 255
    3648:	8f 4f       	sbci	r24, 0xFF	; 255
    364a:	9f 4f       	sbci	r25, 0xFF	; 255
    364c:	08 95       	ret

0000364e <__prologue_saves__>:
    364e:	2f 92       	push	r2
    3650:	3f 92       	push	r3
    3652:	4f 92       	push	r4
    3654:	5f 92       	push	r5
    3656:	6f 92       	push	r6
    3658:	7f 92       	push	r7
    365a:	8f 92       	push	r8
    365c:	9f 92       	push	r9
    365e:	af 92       	push	r10
    3660:	bf 92       	push	r11
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	ca 1b       	sub	r28, r26
    3678:	db 0b       	sbc	r29, r27
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	09 94       	ijmp

00003686 <__epilogue_restores__>:
    3686:	2a 88       	ldd	r2, Y+18	; 0x12
    3688:	39 88       	ldd	r3, Y+17	; 0x11
    368a:	48 88       	ldd	r4, Y+16	; 0x10
    368c:	5f 84       	ldd	r5, Y+15	; 0x0f
    368e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3690:	7d 84       	ldd	r7, Y+13	; 0x0d
    3692:	8c 84       	ldd	r8, Y+12	; 0x0c
    3694:	9b 84       	ldd	r9, Y+11	; 0x0b
    3696:	aa 84       	ldd	r10, Y+10	; 0x0a
    3698:	b9 84       	ldd	r11, Y+9	; 0x09
    369a:	c8 84       	ldd	r12, Y+8	; 0x08
    369c:	df 80       	ldd	r13, Y+7	; 0x07
    369e:	ee 80       	ldd	r14, Y+6	; 0x06
    36a0:	fd 80       	ldd	r15, Y+5	; 0x05
    36a2:	0c 81       	ldd	r16, Y+4	; 0x04
    36a4:	1b 81       	ldd	r17, Y+3	; 0x03
    36a6:	aa 81       	ldd	r26, Y+2	; 0x02
    36a8:	b9 81       	ldd	r27, Y+1	; 0x01
    36aa:	ce 0f       	add	r28, r30
    36ac:	d1 1d       	adc	r29, r1
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	ed 01       	movw	r28, r26
    36ba:	08 95       	ret

000036bc <__udivmodsi4>:
    36bc:	a1 e2       	ldi	r26, 0x21	; 33
    36be:	1a 2e       	mov	r1, r26
    36c0:	aa 1b       	sub	r26, r26
    36c2:	bb 1b       	sub	r27, r27
    36c4:	fd 01       	movw	r30, r26
    36c6:	0d c0       	rjmp	.+26     	; 0x36e2 <__udivmodsi4_ep>

000036c8 <__udivmodsi4_loop>:
    36c8:	aa 1f       	adc	r26, r26
    36ca:	bb 1f       	adc	r27, r27
    36cc:	ee 1f       	adc	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	a2 17       	cp	r26, r18
    36d2:	b3 07       	cpc	r27, r19
    36d4:	e4 07       	cpc	r30, r20
    36d6:	f5 07       	cpc	r31, r21
    36d8:	20 f0       	brcs	.+8      	; 0x36e2 <__udivmodsi4_ep>
    36da:	a2 1b       	sub	r26, r18
    36dc:	b3 0b       	sbc	r27, r19
    36de:	e4 0b       	sbc	r30, r20
    36e0:	f5 0b       	sbc	r31, r21

000036e2 <__udivmodsi4_ep>:
    36e2:	66 1f       	adc	r22, r22
    36e4:	77 1f       	adc	r23, r23
    36e6:	88 1f       	adc	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	1a 94       	dec	r1
    36ec:	69 f7       	brne	.-38     	; 0x36c8 <__udivmodsi4_loop>
    36ee:	60 95       	com	r22
    36f0:	70 95       	com	r23
    36f2:	80 95       	com	r24
    36f4:	90 95       	com	r25
    36f6:	9b 01       	movw	r18, r22
    36f8:	ac 01       	movw	r20, r24
    36fa:	bd 01       	movw	r22, r26
    36fc:	cf 01       	movw	r24, r30
    36fe:	08 95       	ret

00003700 <_exit>:
    3700:	f8 94       	cli

00003702 <__stop_program>:
    3702:	ff cf       	rjmp	.-2      	; 0x3702 <__stop_program>
